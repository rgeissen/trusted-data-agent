2025-09-06 01:13:52,917 - --- FULL CONTEXT (Session: 61add44f-af77-4b7c-8ab4-2c3ab96267a7) ---
--- REASON FOR CALL ---
Generating a strategic meta-plan for the goal: 'is there a fitness database on the system?'

--- History (History Disabled for LLM Call: False) ---
[user]: You are a helpful assistant.
[model]: Understood.

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.


2025-09-06 01:13:54,113 - --- FULL CONTEXT (Session: 61add44f-af77-4b7c-8ab4-2c3ab96267a7) ---
--- REASON FOR CALL ---
Generating a strategic meta-plan for the goal: 'is there a fitness database on the system?'

--- History (History Disabled for LLM Call: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of all databases on the system to check for a fitness database.",
    "relevant_tools": [
      "base_databaseList"
    ],
    "arguments": {}
  },
  {
    "phase": 2,
    "goal": "Check if any of the databases in the list from Phase 1 contains the word 'fitness'.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [],
    "executable_prompt": "base_query",
    "arguments": {
      "query": "Is '{{database_name}}' a fitness database?"
    }
  }
]
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONTEXT FOR RE-PLANNING ---
Your previous plan was inefficient because it used a high-level prompt in a multi-step plan. You MUST create a new, more detailed plan that achieves the same goal using ONLY tools.

**CRITICAL ARCHITECTURAL RULE:** Your new tool-only plan must still adhere to all primary directives. This includes the rule that all synthesis or summarization tasks must be consolidated into a single, final `CoreLLMTask` phase. Avoid creating redundant, back-to-back summary steps.

To help you, here is the description of the prompt(s) you previously selected. You must replicate their logic using basic tools:

- Instructions for 'base_query': Help users interact with  Teradata databases effectively.

1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.


2025-09-06 01:13:56,290 - --- FULL CONTEXT (Session: 61add44f-af77-4b7c-8ab4-2c3ab96267a7) ---
--- REASON FOR CALL ---
Executing CoreLLMTask: 
You are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.

--- INSTRUCTIONS ---
Your entire response MUST be formatted in standard markdown and MUST be structured as follows:

1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).
    - Quantitative Example: `Key Metric: {"value": "21", "label": "Databases on system"}`
    - Qualitative Example: `Key Metric: {"value": "High", "label": "System Utilization"}`
    If there is no single primary value, you MUST omit this line entirely.
2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.
3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.
4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.


--- History (History Disabled for LLM Call: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of all databases on the system to check for a fitness database.",
    "relevant_tools": [
      "base_databaseList"
    ],
    "arguments": {}
  },
  {
    "phase": 2,
    "goal": "Check if any of the databases in the list from Phase 1 contains the word 'fitness'.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [],
    "executable_prompt": "base_query",
    "arguments": {
      "query": "Is '{{database_name}}' a fitness database?"
    }
  }
]
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONTEXT FOR RE-PLANNING ---
Your previous plan was inefficient because it used a high-level prompt in a multi-step plan. You MUST create a new, more detailed plan that achieves the same goal using ONLY tools.

**CRITICAL ARCHITECTURAL RULE:** Your new tool-only plan must still adhere to all primary directives. This includes the rule that all synthesis or summarization tasks must be consolidated into a single, final `CoreLLMTask` phase. Avoid creating redundant, back-to-back summary steps.

To help you, here is the description of the prompt(s) you previously selected. You must replicate their logic using basic tools:

- Instructions for 'base_query': Help users interact with  Teradata databases effectively.

1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of all databases on the system.",
    "relevant_tools": [
      "base_databaseList"
    ],
    "arguments": {}
  },
  {
    "phase": 2,
    "goal": "Filter the list of databases to find those that contain 'fitness' in their name.",
    "relevant_tools": [
      "base_readQuery"
    ],
    "arguments": {
      "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';"
    }
  },
  {
    "phase": 3,
    "goal": "Summarize the results and answer whether a fitness database exists.",
    "relevant_tools": [
      "CoreLLMTask"
    ],
    "arguments": {
      "task_description": "is there a fitness database on the system?",
      "source_data": [
        "result_of_phase_2"
      ]
    }
  }
]
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'is there a fitness database on the system?'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---

You are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.

--- INSTRUCTIONS ---
Your entire response MUST be formatted in standard markdown and MUST be structured as follows:

1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).
    - Quantitative Example: `Key Metric: {"value": "21", "label": "Databases on system"}`
    - Qualitative Example: `Key Metric: {"value": "High", "label": "System Utilization"}`
    If there is no single primary value, you MUST omit this line entirely.
2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.
3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.
4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.


--- RELEVANT DATA (Selected from Previous Phases) ---
{
  "result_of_phase_2": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_readQuery",
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          }
        ],
        "row_count": 1
      },
      "results": [
        {
          "DatabaseName": "fitness_db"
        }
      ]
    }
  ]
}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
None

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.

2025-09-06 01:14:07,819 - --- FULL CONTEXT (Session: 61add44f-af77-4b7c-8ab4-2c3ab96267a7) ---
--- REASON FOR CALL ---
Generating a strategic meta-plan for the goal: 'what's in fitness_db?'

--- History (History Disabled for LLM Call: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of all databases on the system to check for a fitness database.",
    "relevant_tools": [
      "base_databaseList"
    ],
    "arguments": {}
  },
  {
    "phase": 2,
    "goal": "Check if any of the databases in the list from Phase 1 contains the word 'fitness'.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [],
    "executable_prompt": "base_query",
    "arguments": {
      "query": "Is '{{database_name}}' a fitness database?"
    }
  }
]
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONTEXT FOR RE-PLANNING ---
Your previous plan was inefficient because it used a high-level prompt in a multi-step plan. You MUST create a new, more detailed plan that achieves the same goal using ONLY tools.

**CRITICAL ARCHITECTURAL RULE:** Your new tool-only plan must still adhere to all primary directives. This includes the rule that all synthesis or summarization tasks must be consolidated into a single, final `CoreLLMTask` phase. Avoid creating redundant, back-to-back summary steps.

To help you, here is the description of the prompt(s) you previously selected. You must replicate their logic using basic tools:

- Instructions for 'base_query': Help users interact with  Teradata databases effectively.

1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of all databases on the system.",
    "relevant_tools": [
      "base_databaseList"
    ],
    "arguments": {}
  },
  {
    "phase": 2,
    "goal": "Filter the list of databases to find those that contain 'fitness' in their name.",
    "relevant_tools": [
      "base_readQuery"
    ],
    "arguments": {
      "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';"
    }
  },
  {
    "phase": 3,
    "goal": "Summarize the results and answer whether a fitness database exists.",
    "relevant_tools": [
      "CoreLLMTask"
    ],
    "arguments": {
      "task_description": "is there a fitness database on the system?",
      "source_data": [
        "result_of_phase_2"
      ]
    }
  }
]
```
[user]: SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'is there a fitness database on the system?'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---

You are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.

--- INSTRUCTIONS ---
Your entire response MUST be formatted in standard markdown and MUST be structured as follows:

1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).
    - Quantitative Example: `Key Metric: {"value": "21", "label": "Databases on system"}`
    - Qualitative Example: `Key Metric: {"value": "High", "label": "System Utilization"}`
    If there is no single primary value, you MUST omit this line entirely.
2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.
3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.
4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.


--- RELEVANT DATA (Selected from Previous Phases) ---
{
  "result_of_phase_2": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_readQuery",
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          }
        ],
        "row_count": 1
      },
      "results": [
        {
          "DatabaseName": "fitness_db"
        }
      ]
    }
  ]
}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
None

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.
[model]: Key Metric: {"value": "Yes", "label": "Fitness database exists"}
Yes, there is a fitness database on the system.

## Key Observations
*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.
*   The database 'fitness_db' was found to match the search criteria.
*   The system contains at least one database related to fitness.


--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `what's in fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what's in fitness_db?`
-   Workflow History: `[
  {
    "action": {
      "tool_name": "base_databaseList",
      "arguments": {}
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_databaseList",
        "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          },
          {
            "name": "DBType",
            "type": "str"
          },
          {
            "name": "CommentString",
            "type": "str"
          }
        ],
        "row_count": 47
      },
      "results": [
        {
          "DatabaseName": "TD_SYSXML",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "mldb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "gs_tables_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "All",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSGPL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_ANALYTICS_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt2",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "SYSJDBC",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSFNLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "DBC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "demo_user",
          "DBType": "User",
          "CommentString": "Logon ID for the end user to run demonstrations"
        },
        {
          "DatabaseName": "tapidb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "EXTUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SQLJ",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Default",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_DB",
          "DBType": "DataBase",
          "CommentString": "As-A-Service : APIs DB "
        },
        {
          "DatabaseName": "TDaaS_BAR",
          "DBType": "User",
          "CommentString": "As-A-Service : Backup and Restore "
        },
        {
          "DatabaseName": "val",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "PUBLIC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "dbcmngr",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_Monitor",
          "DBType": "User",
          "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
        },
        {
          "DatabaseName": "TDStats",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSBAR",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "External_AP",
          "DBType": "User",
          "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
        },
        {
          "DatabaseName": "TDQCD",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "tdwm",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "LockLogShredder",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "modelops",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Sys_Calendar",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "GLOBAL_FUNCTIONS",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "system",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDMaps",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUDTLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDPUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDBCMgmt",
          "DBType": "DataBase",
          "CommentString": "POG/COG router management database"
        },
        {
          "DatabaseName": "DemoNow_Monitor",
          "DBType": "User",
          "CommentString": "Support logon username for monitoring the platform"
        },
        {
          "DatabaseName": "TDaaS_Support",
          "DBType": "User",
          "CommentString": "As-A-Service Support : Problem and Error Investigation "
        },
        {
          "DatabaseName": "TD_SERVER_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSSPATIAL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SystemFe",
          "DBType": "User",
          "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt1",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "TDaaS_Maint",
          "DBType": "User",
          "CommentString": "As-A-Service Maintenance : Patching and Configuration "
        },
        {
          "DatabaseName": "SysAdmin",
          "DBType": "User",
          "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
        },
        {
          "DatabaseName": "Crashdumps",
          "DBType": "User",
          "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
        },
        {
          "DatabaseName": "fitness_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUIF",
          "DBType": "DataBase",
          "CommentString": "None"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "base_readQuery",
      "arguments": {
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';"
      }
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_readQuery",
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          }
        ],
        "row_count": 1
      },
      "results": [
        {
          "DatabaseName": "fitness_db"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "CoreLLMTask",
      "arguments": {
        "task_description": "\nYou are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.\n\n--- INSTRUCTIONS ---\nYour entire response MUST be formatted in standard markdown and MUST be structured as follows:\n\n1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).\n    - Quantitative Example: `Key Metric: {\"value\": \"21\", \"label\": \"Databases on system\"}`\n    - Qualitative Example: `Key Metric: {\"value\": \"High\", \"label\": \"System Utilization\"}`\n    If there is no single primary value, you MUST omit this line entirely.\n2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.\n3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.\n4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.\n",
        "source_data": [
          "result_of_phase_2"
        ],
        "user_question": "is there a fitness database on the system?",
        "data": {
          "result_of_phase_1": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_databaseList",
                "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  },
                  {
                    "name": "DBType",
                    "type": "str"
                  },
                  {
                    "name": "CommentString",
                    "type": "str"
                  }
                ],
                "row_count": 47
              },
              "results": [
                {
                  "DatabaseName": "TD_SYSXML",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "mldb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "gs_tables_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "All",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSGPL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_ANALYTICS_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt2",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "SYSJDBC",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSFNLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "DBC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "demo_user",
                  "DBType": "User",
                  "CommentString": "Logon ID for the end user to run demonstrations"
                },
                {
                  "DatabaseName": "tapidb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "EXTUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SQLJ",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Default",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_DB",
                  "DBType": "DataBase",
                  "CommentString": "As-A-Service : APIs DB "
                },
                {
                  "DatabaseName": "TDaaS_BAR",
                  "DBType": "User",
                  "CommentString": "As-A-Service : Backup and Restore "
                },
                {
                  "DatabaseName": "val",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "PUBLIC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "dbcmngr",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_Monitor",
                  "DBType": "User",
                  "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
                },
                {
                  "DatabaseName": "TDStats",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSBAR",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "External_AP",
                  "DBType": "User",
                  "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
                },
                {
                  "DatabaseName": "TDQCD",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "tdwm",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "LockLogShredder",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "modelops",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Sys_Calendar",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "GLOBAL_FUNCTIONS",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "system",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDMaps",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUDTLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDPUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDBCMgmt",
                  "DBType": "DataBase",
                  "CommentString": "POG/COG router management database"
                },
                {
                  "DatabaseName": "DemoNow_Monitor",
                  "DBType": "User",
                  "CommentString": "Support logon username for monitoring the platform"
                },
                {
                  "DatabaseName": "TDaaS_Support",
                  "DBType": "User",
                  "CommentString": "As-A-Service Support : Problem and Error Investigation "
                },
                {
                  "DatabaseName": "TD_SERVER_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSSPATIAL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SystemFe",
                  "DBType": "User",
                  "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt1",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "TDaaS_Maint",
                  "DBType": "User",
                  "CommentString": "As-A-Service Maintenance : Patching and Configuration "
                },
                {
                  "DatabaseName": "SysAdmin",
                  "DBType": "User",
                  "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
                },
                {
                  "DatabaseName": "Crashdumps",
                  "DBType": "User",
                  "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
                },
                {
                  "DatabaseName": "fitness_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUIF",
                  "DBType": "DataBase",
                  "CommentString": "None"
                }
              ]
            }
          ],
          "result_of_phase_2": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_readQuery",
                "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  }
                ],
                "row_count": 1
              },
              "results": [
                {
                  "DatabaseName": "fitness_db"
                }
              ]
            }
          ],
          "result_of_phase_3": [
            {
              "status": "success",
              "results": [
                {
                  "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
                }
              ]
            }
          ]
        }
      }
    },
    "result": {
      "status": "success",
      "results": [
        {
          "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
        }
      ]
    }
  }
]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `what's in fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what's in fitness_db?`
-   Workflow History: `[
  {
    "action": {
      "tool_name": "base_databaseList",
      "arguments": {}
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_databaseList",
        "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          },
          {
            "name": "DBType",
            "type": "str"
          },
          {
            "name": "CommentString",
            "type": "str"
          }
        ],
        "row_count": 47
      },
      "results": [
        {
          "DatabaseName": "TD_SYSXML",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "mldb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "gs_tables_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "All",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSGPL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_ANALYTICS_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt2",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "SYSJDBC",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSFNLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "DBC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "demo_user",
          "DBType": "User",
          "CommentString": "Logon ID for the end user to run demonstrations"
        },
        {
          "DatabaseName": "tapidb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "EXTUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SQLJ",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Default",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_DB",
          "DBType": "DataBase",
          "CommentString": "As-A-Service : APIs DB "
        },
        {
          "DatabaseName": "TDaaS_BAR",
          "DBType": "User",
          "CommentString": "As-A-Service : Backup and Restore "
        },
        {
          "DatabaseName": "val",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "PUBLIC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "dbcmngr",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_Monitor",
          "DBType": "User",
          "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
        },
        {
          "DatabaseName": "TDStats",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSBAR",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "External_AP",
          "DBType": "User",
          "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
        },
        {
          "DatabaseName": "TDQCD",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "tdwm",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "LockLogShredder",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "modelops",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Sys_Calendar",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "GLOBAL_FUNCTIONS",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "system",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDMaps",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUDTLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDPUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDBCMgmt",
          "DBType": "DataBase",
          "CommentString": "POG/COG router management database"
        },
        {
          "DatabaseName": "DemoNow_Monitor",
          "DBType": "User",
          "CommentString": "Support logon username for monitoring the platform"
        },
        {
          "DatabaseName": "TDaaS_Support",
          "DBType": "User",
          "CommentString": "As-A-Service Support : Problem and Error Investigation "
        },
        {
          "DatabaseName": "TD_SERVER_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSSPATIAL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SystemFe",
          "DBType": "User",
          "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt1",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "TDaaS_Maint",
          "DBType": "User",
          "CommentString": "As-A-Service Maintenance : Patching and Configuration "
        },
        {
          "DatabaseName": "SysAdmin",
          "DBType": "User",
          "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
        },
        {
          "DatabaseName": "Crashdumps",
          "DBType": "User",
          "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
        },
        {
          "DatabaseName": "fitness_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUIF",
          "DBType": "DataBase",
          "CommentString": "None"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "base_readQuery",
      "arguments": {
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';"
      }
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_readQuery",
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          }
        ],
        "row_count": 1
      },
      "results": [
        {
          "DatabaseName": "fitness_db"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "CoreLLMTask",
      "arguments": {
        "task_description": "\nYou are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.\n\n--- INSTRUCTIONS ---\nYour entire response MUST be formatted in standard markdown and MUST be structured as follows:\n\n1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).\n    - Quantitative Example: `Key Metric: {\"value\": \"21\", \"label\": \"Databases on system\"}`\n    - Qualitative Example: `Key Metric: {\"value\": \"High\", \"label\": \"System Utilization\"}`\n    If there is no single primary value, you MUST omit this line entirely.\n2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.\n3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.\n4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.\n",
        "source_data": [
          "result_of_phase_2"
        ],
        "user_question": "is there a fitness database on the system?",
        "data": {
          "result_of_phase_1": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_databaseList",
                "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  },
                  {
                    "name": "DBType",
                    "type": "str"
                  },
                  {
                    "name": "CommentString",
                    "type": "str"
                  }
                ],
                "row_count": 47
              },
              "results": [
                {
                  "DatabaseName": "TD_SYSXML",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "mldb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "gs_tables_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "All",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSGPL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_ANALYTICS_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt2",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "SYSJDBC",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSFNLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "DBC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "demo_user",
                  "DBType": "User",
                  "CommentString": "Logon ID for the end user to run demonstrations"
                },
                {
                  "DatabaseName": "tapidb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "EXTUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SQLJ",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Default",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_DB",
                  "DBType": "DataBase",
                  "CommentString": "As-A-Service : APIs DB "
                },
                {
                  "DatabaseName": "TDaaS_BAR",
                  "DBType": "User",
                  "CommentString": "As-A-Service : Backup and Restore "
                },
                {
                  "DatabaseName": "val",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "PUBLIC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "dbcmngr",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_Monitor",
                  "DBType": "User",
                  "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
                },
                {
                  "DatabaseName": "TDStats",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSBAR",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "External_AP",
                  "DBType": "User",
                  "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
                },
                {
                  "DatabaseName": "TDQCD",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "tdwm",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "LockLogShredder",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "modelops",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Sys_Calendar",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "GLOBAL_FUNCTIONS",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "system",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDMaps",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUDTLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDPUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDBCMgmt",
                  "DBType": "DataBase",
                  "CommentString": "POG/COG router management database"
                },
                {
                  "DatabaseName": "DemoNow_Monitor",
                  "DBType": "User",
                  "CommentString": "Support logon username for monitoring the platform"
                },
                {
                  "DatabaseName": "TDaaS_Support",
                  "DBType": "User",
                  "CommentString": "As-A-Service Support : Problem and Error Investigation "
                },
                {
                  "DatabaseName": "TD_SERVER_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSSPATIAL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SystemFe",
                  "DBType": "User",
                  "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt1",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "TDaaS_Maint",
                  "DBType": "User",
                  "CommentString": "As-A-Service Maintenance : Patching and Configuration "
                },
                {
                  "DatabaseName": "SysAdmin",
                  "DBType": "User",
                  "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
                },
                {
                  "DatabaseName": "Crashdumps",
                  "DBType": "User",
                  "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
                },
                {
                  "DatabaseName": "fitness_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUIF",
                  "DBType": "DataBase",
                  "CommentString": "None"
                }
              ]
            }
          ],
          "result_of_phase_2": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_readQuery",
                "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  }
                ],
                "row_count": 1
              },
              "results": [
                {
                  "DatabaseName": "fitness_db"
                }
              ]
            }
          ],
          "result_of_phase_3": [
            {
              "status": "success",
              "results": [
                {
                  "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
                }
              ]
            }
          ]
        }
      }
    },
    "result": {
      "status": "success",
      "results": [
        {
          "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
        }
      ]
    }
  }
]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.


2025-09-06 01:14:09,413 - --- FULL CONTEXT (Session: 61add44f-af77-4b7c-8ab4-2c3ab96267a7) ---
--- REASON FOR CALL ---
Executing CoreLLMTask: 
You are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.

--- INSTRUCTIONS ---
Your entire response MUST be formatted in standard markdown and MUST be structured as follows:

1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).
    - Quantitative Example: `Key Metric: {"value": "21", "label": "Databases on system"}`
    - Qualitative Example: `Key Metric: {"value": "High", "label": "System Utilization"}`
    If there is no single primary value, you MUST omit this line entirely.
2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.
3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.
4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.


--- History (History Disabled for LLM Call: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of all databases on the system to check for a fitness database.",
    "relevant_tools": [
      "base_databaseList"
    ],
    "arguments": {}
  },
  {
    "phase": 2,
    "goal": "Check if any of the databases in the list from Phase 1 contains the word 'fitness'.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [],
    "executable_prompt": "base_query",
    "arguments": {
      "query": "Is '{{database_name}}' a fitness database?"
    }
  }
]
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONTEXT FOR RE-PLANNING ---
Your previous plan was inefficient because it used a high-level prompt in a multi-step plan. You MUST create a new, more detailed plan that achieves the same goal using ONLY tools.

**CRITICAL ARCHITECTURAL RULE:** Your new tool-only plan must still adhere to all primary directives. This includes the rule that all synthesis or summarization tasks must be consolidated into a single, final `CoreLLMTask` phase. Avoid creating redundant, back-to-back summary steps.

To help you, here is the description of the prompt(s) you previously selected. You must replicate their logic using basic tools:

- Instructions for 'base_query': Help users interact with  Teradata databases effectively.

1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of all databases on the system.",
    "relevant_tools": [
      "base_databaseList"
    ],
    "arguments": {}
  },
  {
    "phase": 2,
    "goal": "Filter the list of databases to find those that contain 'fitness' in their name.",
    "relevant_tools": [
      "base_readQuery"
    ],
    "arguments": {
      "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';"
    }
  },
  {
    "phase": 3,
    "goal": "Summarize the results and answer whether a fitness database exists.",
    "relevant_tools": [
      "CoreLLMTask"
    ],
    "arguments": {
      "task_description": "is there a fitness database on the system?",
      "source_data": [
        "result_of_phase_2"
      ]
    }
  }
]
```
[user]: SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'is there a fitness database on the system?'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---

You are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.

--- INSTRUCTIONS ---
Your entire response MUST be formatted in standard markdown and MUST be structured as follows:

1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).
    - Quantitative Example: `Key Metric: {"value": "21", "label": "Databases on system"}`
    - Qualitative Example: `Key Metric: {"value": "High", "label": "System Utilization"}`
    If there is no single primary value, you MUST omit this line entirely.
2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.
3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.
4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.


--- RELEVANT DATA (Selected from Previous Phases) ---
{
  "result_of_phase_2": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_readQuery",
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          }
        ],
        "row_count": 1
      },
      "results": [
        {
          "DatabaseName": "fitness_db"
        }
      ]
    }
  ]
}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
None

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.
[model]: Key Metric: {"value": "Yes", "label": "Fitness database exists"}
Yes, there is a fitness database on the system.

## Key Observations
*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.
*   The database 'fitness_db' was found to match the search criteria.
*   The system contains at least one database related to fitness.

[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `what's in fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what's in fitness_db?`
-   Workflow History: `[
  {
    "action": {
      "tool_name": "base_databaseList",
      "arguments": {}
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_databaseList",
        "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          },
          {
            "name": "DBType",
            "type": "str"
          },
          {
            "name": "CommentString",
            "type": "str"
          }
        ],
        "row_count": 47
      },
      "results": [
        {
          "DatabaseName": "TD_SYSXML",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "mldb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "gs_tables_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "All",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSGPL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_ANALYTICS_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt2",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "SYSJDBC",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSFNLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "DBC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "demo_user",
          "DBType": "User",
          "CommentString": "Logon ID for the end user to run demonstrations"
        },
        {
          "DatabaseName": "tapidb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "EXTUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SQLJ",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Default",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_DB",
          "DBType": "DataBase",
          "CommentString": "As-A-Service : APIs DB "
        },
        {
          "DatabaseName": "TDaaS_BAR",
          "DBType": "User",
          "CommentString": "As-A-Service : Backup and Restore "
        },
        {
          "DatabaseName": "val",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "PUBLIC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "dbcmngr",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_Monitor",
          "DBType": "User",
          "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
        },
        {
          "DatabaseName": "TDStats",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSBAR",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "External_AP",
          "DBType": "User",
          "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
        },
        {
          "DatabaseName": "TDQCD",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "tdwm",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "LockLogShredder",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "modelops",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Sys_Calendar",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "GLOBAL_FUNCTIONS",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "system",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDMaps",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUDTLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDPUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDBCMgmt",
          "DBType": "DataBase",
          "CommentString": "POG/COG router management database"
        },
        {
          "DatabaseName": "DemoNow_Monitor",
          "DBType": "User",
          "CommentString": "Support logon username for monitoring the platform"
        },
        {
          "DatabaseName": "TDaaS_Support",
          "DBType": "User",
          "CommentString": "As-A-Service Support : Problem and Error Investigation "
        },
        {
          "DatabaseName": "TD_SERVER_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSSPATIAL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SystemFe",
          "DBType": "User",
          "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt1",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "TDaaS_Maint",
          "DBType": "User",
          "CommentString": "As-A-Service Maintenance : Patching and Configuration "
        },
        {
          "DatabaseName": "SysAdmin",
          "DBType": "User",
          "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
        },
        {
          "DatabaseName": "Crashdumps",
          "DBType": "User",
          "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
        },
        {
          "DatabaseName": "fitness_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUIF",
          "DBType": "DataBase",
          "CommentString": "None"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "base_readQuery",
      "arguments": {
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';"
      }
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_readQuery",
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          }
        ],
        "row_count": 1
      },
      "results": [
        {
          "DatabaseName": "fitness_db"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "CoreLLMTask",
      "arguments": {
        "task_description": "\nYou are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.\n\n--- INSTRUCTIONS ---\nYour entire response MUST be formatted in standard markdown and MUST be structured as follows:\n\n1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).\n    - Quantitative Example: `Key Metric: {\"value\": \"21\", \"label\": \"Databases on system\"}`\n    - Qualitative Example: `Key Metric: {\"value\": \"High\", \"label\": \"System Utilization\"}`\n    If there is no single primary value, you MUST omit this line entirely.\n2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.\n3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.\n4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.\n",
        "source_data": [
          "result_of_phase_2"
        ],
        "user_question": "is there a fitness database on the system?",
        "data": {
          "result_of_phase_1": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_databaseList",
                "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  },
                  {
                    "name": "DBType",
                    "type": "str"
                  },
                  {
                    "name": "CommentString",
                    "type": "str"
                  }
                ],
                "row_count": 47
              },
              "results": [
                {
                  "DatabaseName": "TD_SYSXML",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "mldb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "gs_tables_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "All",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSGPL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_ANALYTICS_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt2",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "SYSJDBC",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSFNLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "DBC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "demo_user",
                  "DBType": "User",
                  "CommentString": "Logon ID for the end user to run demonstrations"
                },
                {
                  "DatabaseName": "tapidb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "EXTUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SQLJ",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Default",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_DB",
                  "DBType": "DataBase",
                  "CommentString": "As-A-Service : APIs DB "
                },
                {
                  "DatabaseName": "TDaaS_BAR",
                  "DBType": "User",
                  "CommentString": "As-A-Service : Backup and Restore "
                },
                {
                  "DatabaseName": "val",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "PUBLIC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "dbcmngr",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_Monitor",
                  "DBType": "User",
                  "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
                },
                {
                  "DatabaseName": "TDStats",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSBAR",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "External_AP",
                  "DBType": "User",
                  "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
                },
                {
                  "DatabaseName": "TDQCD",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "tdwm",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "LockLogShredder",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "modelops",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Sys_Calendar",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "GLOBAL_FUNCTIONS",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "system",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDMaps",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUDTLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDPUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDBCMgmt",
                  "DBType": "DataBase",
                  "CommentString": "POG/COG router management database"
                },
                {
                  "DatabaseName": "DemoNow_Monitor",
                  "DBType": "User",
                  "CommentString": "Support logon username for monitoring the platform"
                },
                {
                  "DatabaseName": "TDaaS_Support",
                  "DBType": "User",
                  "CommentString": "As-A-Service Support : Problem and Error Investigation "
                },
                {
                  "DatabaseName": "TD_SERVER_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSSPATIAL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SystemFe",
                  "DBType": "User",
                  "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt1",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "TDaaS_Maint",
                  "DBType": "User",
                  "CommentString": "As-A-Service Maintenance : Patching and Configuration "
                },
                {
                  "DatabaseName": "SysAdmin",
                  "DBType": "User",
                  "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
                },
                {
                  "DatabaseName": "Crashdumps",
                  "DBType": "User",
                  "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
                },
                {
                  "DatabaseName": "fitness_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUIF",
                  "DBType": "DataBase",
                  "CommentString": "None"
                }
              ]
            }
          ],
          "result_of_phase_2": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_readQuery",
                "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  }
                ],
                "row_count": 1
              },
              "results": [
                {
                  "DatabaseName": "fitness_db"
                }
              ]
            }
          ],
          "result_of_phase_3": [
            {
              "status": "success",
              "results": [
                {
                  "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
                }
              ]
            }
          ]
        }
      }
    },
    "result": {
      "status": "success",
      "results": [
        {
          "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
        }
      ]
    }
  }
]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `what's in fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what's in fitness_db?`
-   Workflow History: `[
  {
    "action": {
      "tool_name": "base_databaseList",
      "arguments": {}
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_databaseList",
        "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          },
          {
            "name": "DBType",
            "type": "str"
          },
          {
            "name": "CommentString",
            "type": "str"
          }
        ],
        "row_count": 47
      },
      "results": [
        {
          "DatabaseName": "TD_SYSXML",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "mldb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "gs_tables_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "All",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSGPL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_ANALYTICS_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt2",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "SYSJDBC",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSFNLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "DBC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "demo_user",
          "DBType": "User",
          "CommentString": "Logon ID for the end user to run demonstrations"
        },
        {
          "DatabaseName": "tapidb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "EXTUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SQLJ",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Default",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_DB",
          "DBType": "DataBase",
          "CommentString": "As-A-Service : APIs DB "
        },
        {
          "DatabaseName": "TDaaS_BAR",
          "DBType": "User",
          "CommentString": "As-A-Service : Backup and Restore "
        },
        {
          "DatabaseName": "val",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "PUBLIC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "dbcmngr",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_Monitor",
          "DBType": "User",
          "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
        },
        {
          "DatabaseName": "TDStats",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSBAR",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "External_AP",
          "DBType": "User",
          "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
        },
        {
          "DatabaseName": "TDQCD",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "tdwm",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "LockLogShredder",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "modelops",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Sys_Calendar",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "GLOBAL_FUNCTIONS",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "system",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDMaps",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUDTLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDPUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDBCMgmt",
          "DBType": "DataBase",
          "CommentString": "POG/COG router management database"
        },
        {
          "DatabaseName": "DemoNow_Monitor",
          "DBType": "User",
          "CommentString": "Support logon username for monitoring the platform"
        },
        {
          "DatabaseName": "TDaaS_Support",
          "DBType": "User",
          "CommentString": "As-A-Service Support : Problem and Error Investigation "
        },
        {
          "DatabaseName": "TD_SERVER_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSSPATIAL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SystemFe",
          "DBType": "User",
          "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt1",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "TDaaS_Maint",
          "DBType": "User",
          "CommentString": "As-A-Service Maintenance : Patching and Configuration "
        },
        {
          "DatabaseName": "SysAdmin",
          "DBType": "User",
          "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
        },
        {
          "DatabaseName": "Crashdumps",
          "DBType": "User",
          "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
        },
        {
          "DatabaseName": "fitness_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUIF",
          "DBType": "DataBase",
          "CommentString": "None"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "base_readQuery",
      "arguments": {
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';"
      }
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_readQuery",
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          }
        ],
        "row_count": 1
      },
      "results": [
        {
          "DatabaseName": "fitness_db"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "CoreLLMTask",
      "arguments": {
        "task_description": "\nYou are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.\n\n--- INSTRUCTIONS ---\nYour entire response MUST be formatted in standard markdown and MUST be structured as follows:\n\n1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).\n    - Quantitative Example: `Key Metric: {\"value\": \"21\", \"label\": \"Databases on system\"}`\n    - Qualitative Example: `Key Metric: {\"value\": \"High\", \"label\": \"System Utilization\"}`\n    If there is no single primary value, you MUST omit this line entirely.\n2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.\n3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.\n4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.\n",
        "source_data": [
          "result_of_phase_2"
        ],
        "user_question": "is there a fitness database on the system?",
        "data": {
          "result_of_phase_1": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_databaseList",
                "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  },
                  {
                    "name": "DBType",
                    "type": "str"
                  },
                  {
                    "name": "CommentString",
                    "type": "str"
                  }
                ],
                "row_count": 47
              },
              "results": [
                {
                  "DatabaseName": "TD_SYSXML",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "mldb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "gs_tables_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "All",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSGPL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_ANALYTICS_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt2",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "SYSJDBC",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSFNLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "DBC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "demo_user",
                  "DBType": "User",
                  "CommentString": "Logon ID for the end user to run demonstrations"
                },
                {
                  "DatabaseName": "tapidb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "EXTUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SQLJ",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Default",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_DB",
                  "DBType": "DataBase",
                  "CommentString": "As-A-Service : APIs DB "
                },
                {
                  "DatabaseName": "TDaaS_BAR",
                  "DBType": "User",
                  "CommentString": "As-A-Service : Backup and Restore "
                },
                {
                  "DatabaseName": "val",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "PUBLIC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "dbcmngr",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_Monitor",
                  "DBType": "User",
                  "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
                },
                {
                  "DatabaseName": "TDStats",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSBAR",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "External_AP",
                  "DBType": "User",
                  "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
                },
                {
                  "DatabaseName": "TDQCD",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "tdwm",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "LockLogShredder",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "modelops",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Sys_Calendar",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "GLOBAL_FUNCTIONS",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "system",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDMaps",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUDTLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDPUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDBCMgmt",
                  "DBType": "DataBase",
                  "CommentString": "POG/COG router management database"
                },
                {
                  "DatabaseName": "DemoNow_Monitor",
                  "DBType": "User",
                  "CommentString": "Support logon username for monitoring the platform"
                },
                {
                  "DatabaseName": "TDaaS_Support",
                  "DBType": "User",
                  "CommentString": "As-A-Service Support : Problem and Error Investigation "
                },
                {
                  "DatabaseName": "TD_SERVER_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSSPATIAL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SystemFe",
                  "DBType": "User",
                  "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt1",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "TDaaS_Maint",
                  "DBType": "User",
                  "CommentString": "As-A-Service Maintenance : Patching and Configuration "
                },
                {
                  "DatabaseName": "SysAdmin",
                  "DBType": "User",
                  "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
                },
                {
                  "DatabaseName": "Crashdumps",
                  "DBType": "User",
                  "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
                },
                {
                  "DatabaseName": "fitness_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUIF",
                  "DBType": "DataBase",
                  "CommentString": "None"
                }
              ]
            }
          ],
          "result_of_phase_2": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_readQuery",
                "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  }
                ],
                "row_count": 1
              },
              "results": [
                {
                  "DatabaseName": "fitness_db"
                }
              ]
            }
          ],
          "result_of_phase_3": [
            {
              "status": "success",
              "results": [
                {
                  "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
                }
              ]
            }
          ]
        }
      }
    },
    "result": {
      "status": "success",
      "results": [
        {
          "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
        }
      ]
    }
  }
]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of tables in the fitness_db database.",
    "relevant_tools": [
      "base_tableList"
    ],
    "arguments": {
      "database_name": "fitness_db"
    }
  },
  {
    "phase": 2,
    "goal": "Summarize the contents of the fitness_db database.",
    "relevant_tools": [
      "CoreLLMTask"
    ],
    "arguments": {
      "task_description": "what's in fitness_db?",
      "source_data": [
        "result_of_phase_1"
      ]
    }
  }
]
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'what's in fitness_db?'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---

You are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.

--- INSTRUCTIONS ---
Your entire response MUST be formatted in standard markdown and MUST be structured as follows:

1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).
    - Quantitative Example: `Key Metric: {"value": "21", "label": "Databases on system"}`
    - Qualitative Example: `Key Metric: {"value": "High", "label": "System Utilization"}`
    If there is no single primary value, you MUST omit this line entirely.
2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.
3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.
4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.


--- RELEVANT DATA (Selected from Previous Phases) ---
{
  "result_of_phase_1": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableList",
        "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
        "columns": [
          {
            "name": "TableName",
            "type": "str"
          }
        ],
        "row_count": 5
      },
      "results": [
        {
          "TableName": "Sales"
        },
        {
          "TableName": "SaleDetails"
        },
        {
          "TableName": "Products"
        },
        {
          "TableName": "ServiceTickets"
        },
        {
          "TableName": "Customers"
        }
      ]
    }
  ]
}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
None

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.

2025-09-06 01:14:39,033 - --- FULL CONTEXT (Session: 61add44f-af77-4b7c-8ab4-2c3ab96267a7) ---
--- REASON FOR CALL ---
Generating a strategic meta-plan for the goal: 'what is the business description of Products?'

--- History (History Disabled for LLM Call: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of all databases on the system to check for a fitness database.",
    "relevant_tools": [
      "base_databaseList"
    ],
    "arguments": {}
  },
  {
    "phase": 2,
    "goal": "Check if any of the databases in the list from Phase 1 contains the word 'fitness'.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [],
    "executable_prompt": "base_query",
    "arguments": {
      "query": "Is '{{database_name}}' a fitness database?"
    }
  }
]
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONTEXT FOR RE-PLANNING ---
Your previous plan was inefficient because it used a high-level prompt in a multi-step plan. You MUST create a new, more detailed plan that achieves the same goal using ONLY tools.

**CRITICAL ARCHITECTURAL RULE:** Your new tool-only plan must still adhere to all primary directives. This includes the rule that all synthesis or summarization tasks must be consolidated into a single, final `CoreLLMTask` phase. Avoid creating redundant, back-to-back summary steps.

To help you, here is the description of the prompt(s) you previously selected. You must replicate their logic using basic tools:

- Instructions for 'base_query': Help users interact with  Teradata databases effectively.

1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of all databases on the system.",
    "relevant_tools": [
      "base_databaseList"
    ],
    "arguments": {}
  },
  {
    "phase": 2,
    "goal": "Filter the list of databases to find those that contain 'fitness' in their name.",
    "relevant_tools": [
      "base_readQuery"
    ],
    "arguments": {
      "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';"
    }
  },
  {
    "phase": 3,
    "goal": "Summarize the results and answer whether a fitness database exists.",
    "relevant_tools": [
      "CoreLLMTask"
    ],
    "arguments": {
      "task_description": "is there a fitness database on the system?",
      "source_data": [
        "result_of_phase_2"
      ]
    }
  }
]
```
[user]: SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'is there a fitness database on the system?'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---

You are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.

--- INSTRUCTIONS ---
Your entire response MUST be formatted in standard markdown and MUST be structured as follows:

1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).
    - Quantitative Example: `Key Metric: {"value": "21", "label": "Databases on system"}`
    - Qualitative Example: `Key Metric: {"value": "High", "label": "System Utilization"}`
    If there is no single primary value, you MUST omit this line entirely.
2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.
3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.
4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.


--- RELEVANT DATA (Selected from Previous Phases) ---
{
  "result_of_phase_2": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_readQuery",
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          }
        ],
        "row_count": 1
      },
      "results": [
        {
          "DatabaseName": "fitness_db"
        }
      ]
    }
  ]
}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
None

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.
[model]: Key Metric: {"value": "Yes", "label": "Fitness database exists"}
Yes, there is a fitness database on the system.

## Key Observations
*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.
*   The database 'fitness_db' was found to match the search criteria.
*   The system contains at least one database related to fitness.

[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `what's in fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what's in fitness_db?`
-   Workflow History: `[
  {
    "action": {
      "tool_name": "base_databaseList",
      "arguments": {}
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_databaseList",
        "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          },
          {
            "name": "DBType",
            "type": "str"
          },
          {
            "name": "CommentString",
            "type": "str"
          }
        ],
        "row_count": 47
      },
      "results": [
        {
          "DatabaseName": "TD_SYSXML",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "mldb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "gs_tables_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "All",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSGPL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_ANALYTICS_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt2",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "SYSJDBC",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSFNLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "DBC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "demo_user",
          "DBType": "User",
          "CommentString": "Logon ID for the end user to run demonstrations"
        },
        {
          "DatabaseName": "tapidb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "EXTUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SQLJ",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Default",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_DB",
          "DBType": "DataBase",
          "CommentString": "As-A-Service : APIs DB "
        },
        {
          "DatabaseName": "TDaaS_BAR",
          "DBType": "User",
          "CommentString": "As-A-Service : Backup and Restore "
        },
        {
          "DatabaseName": "val",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "PUBLIC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "dbcmngr",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_Monitor",
          "DBType": "User",
          "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
        },
        {
          "DatabaseName": "TDStats",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSBAR",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "External_AP",
          "DBType": "User",
          "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
        },
        {
          "DatabaseName": "TDQCD",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "tdwm",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "LockLogShredder",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "modelops",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Sys_Calendar",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "GLOBAL_FUNCTIONS",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "system",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDMaps",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUDTLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDPUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDBCMgmt",
          "DBType": "DataBase",
          "CommentString": "POG/COG router management database"
        },
        {
          "DatabaseName": "DemoNow_Monitor",
          "DBType": "User",
          "CommentString": "Support logon username for monitoring the platform"
        },
        {
          "DatabaseName": "TDaaS_Support",
          "DBType": "User",
          "CommentString": "As-A-Service Support : Problem and Error Investigation "
        },
        {
          "DatabaseName": "TD_SERVER_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSSPATIAL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SystemFe",
          "DBType": "User",
          "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt1",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "TDaaS_Maint",
          "DBType": "User",
          "CommentString": "As-A-Service Maintenance : Patching and Configuration "
        },
        {
          "DatabaseName": "SysAdmin",
          "DBType": "User",
          "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
        },
        {
          "DatabaseName": "Crashdumps",
          "DBType": "User",
          "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
        },
        {
          "DatabaseName": "fitness_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUIF",
          "DBType": "DataBase",
          "CommentString": "None"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "base_readQuery",
      "arguments": {
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';"
      }
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_readQuery",
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          }
        ],
        "row_count": 1
      },
      "results": [
        {
          "DatabaseName": "fitness_db"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "CoreLLMTask",
      "arguments": {
        "task_description": "\nYou are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.\n\n--- INSTRUCTIONS ---\nYour entire response MUST be formatted in standard markdown and MUST be structured as follows:\n\n1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).\n    - Quantitative Example: `Key Metric: {\"value\": \"21\", \"label\": \"Databases on system\"}`\n    - Qualitative Example: `Key Metric: {\"value\": \"High\", \"label\": \"System Utilization\"}`\n    If there is no single primary value, you MUST omit this line entirely.\n2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.\n3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.\n4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.\n",
        "source_data": [
          "result_of_phase_2"
        ],
        "user_question": "is there a fitness database on the system?",
        "data": {
          "result_of_phase_1": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_databaseList",
                "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  },
                  {
                    "name": "DBType",
                    "type": "str"
                  },
                  {
                    "name": "CommentString",
                    "type": "str"
                  }
                ],
                "row_count": 47
              },
              "results": [
                {
                  "DatabaseName": "TD_SYSXML",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "mldb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "gs_tables_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "All",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSGPL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_ANALYTICS_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt2",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "SYSJDBC",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSFNLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "DBC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "demo_user",
                  "DBType": "User",
                  "CommentString": "Logon ID for the end user to run demonstrations"
                },
                {
                  "DatabaseName": "tapidb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "EXTUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SQLJ",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Default",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_DB",
                  "DBType": "DataBase",
                  "CommentString": "As-A-Service : APIs DB "
                },
                {
                  "DatabaseName": "TDaaS_BAR",
                  "DBType": "User",
                  "CommentString": "As-A-Service : Backup and Restore "
                },
                {
                  "DatabaseName": "val",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "PUBLIC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "dbcmngr",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_Monitor",
                  "DBType": "User",
                  "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
                },
                {
                  "DatabaseName": "TDStats",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSBAR",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "External_AP",
                  "DBType": "User",
                  "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
                },
                {
                  "DatabaseName": "TDQCD",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "tdwm",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "LockLogShredder",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "modelops",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Sys_Calendar",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "GLOBAL_FUNCTIONS",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "system",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDMaps",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUDTLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDPUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDBCMgmt",
                  "DBType": "DataBase",
                  "CommentString": "POG/COG router management database"
                },
                {
                  "DatabaseName": "DemoNow_Monitor",
                  "DBType": "User",
                  "CommentString": "Support logon username for monitoring the platform"
                },
                {
                  "DatabaseName": "TDaaS_Support",
                  "DBType": "User",
                  "CommentString": "As-A-Service Support : Problem and Error Investigation "
                },
                {
                  "DatabaseName": "TD_SERVER_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSSPATIAL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SystemFe",
                  "DBType": "User",
                  "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt1",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "TDaaS_Maint",
                  "DBType": "User",
                  "CommentString": "As-A-Service Maintenance : Patching and Configuration "
                },
                {
                  "DatabaseName": "SysAdmin",
                  "DBType": "User",
                  "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
                },
                {
                  "DatabaseName": "Crashdumps",
                  "DBType": "User",
                  "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
                },
                {
                  "DatabaseName": "fitness_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUIF",
                  "DBType": "DataBase",
                  "CommentString": "None"
                }
              ]
            }
          ],
          "result_of_phase_2": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_readQuery",
                "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  }
                ],
                "row_count": 1
              },
              "results": [
                {
                  "DatabaseName": "fitness_db"
                }
              ]
            }
          ],
          "result_of_phase_3": [
            {
              "status": "success",
              "results": [
                {
                  "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
                }
              ]
            }
          ]
        }
      }
    },
    "result": {
      "status": "success",
      "results": [
        {
          "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
        }
      ]
    }
  }
]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `what's in fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what's in fitness_db?`
-   Workflow History: `[
  {
    "action": {
      "tool_name": "base_databaseList",
      "arguments": {}
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_databaseList",
        "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          },
          {
            "name": "DBType",
            "type": "str"
          },
          {
            "name": "CommentString",
            "type": "str"
          }
        ],
        "row_count": 47
      },
      "results": [
        {
          "DatabaseName": "TD_SYSXML",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "mldb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "gs_tables_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "All",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSGPL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_ANALYTICS_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt2",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "SYSJDBC",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSFNLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "DBC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "demo_user",
          "DBType": "User",
          "CommentString": "Logon ID for the end user to run demonstrations"
        },
        {
          "DatabaseName": "tapidb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "EXTUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SQLJ",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Default",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_DB",
          "DBType": "DataBase",
          "CommentString": "As-A-Service : APIs DB "
        },
        {
          "DatabaseName": "TDaaS_BAR",
          "DBType": "User",
          "CommentString": "As-A-Service : Backup and Restore "
        },
        {
          "DatabaseName": "val",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "PUBLIC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "dbcmngr",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_Monitor",
          "DBType": "User",
          "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
        },
        {
          "DatabaseName": "TDStats",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSBAR",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "External_AP",
          "DBType": "User",
          "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
        },
        {
          "DatabaseName": "TDQCD",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "tdwm",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "LockLogShredder",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "modelops",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Sys_Calendar",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "GLOBAL_FUNCTIONS",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "system",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDMaps",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUDTLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDPUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDBCMgmt",
          "DBType": "DataBase",
          "CommentString": "POG/COG router management database"
        },
        {
          "DatabaseName": "DemoNow_Monitor",
          "DBType": "User",
          "CommentString": "Support logon username for monitoring the platform"
        },
        {
          "DatabaseName": "TDaaS_Support",
          "DBType": "User",
          "CommentString": "As-A-Service Support : Problem and Error Investigation "
        },
        {
          "DatabaseName": "TD_SERVER_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSSPATIAL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SystemFe",
          "DBType": "User",
          "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt1",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "TDaaS_Maint",
          "DBType": "User",
          "CommentString": "As-A-Service Maintenance : Patching and Configuration "
        },
        {
          "DatabaseName": "SysAdmin",
          "DBType": "User",
          "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
        },
        {
          "DatabaseName": "Crashdumps",
          "DBType": "User",
          "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
        },
        {
          "DatabaseName": "fitness_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUIF",
          "DBType": "DataBase",
          "CommentString": "None"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "base_readQuery",
      "arguments": {
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';"
      }
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_readQuery",
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          }
        ],
        "row_count": 1
      },
      "results": [
        {
          "DatabaseName": "fitness_db"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "CoreLLMTask",
      "arguments": {
        "task_description": "\nYou are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.\n\n--- INSTRUCTIONS ---\nYour entire response MUST be formatted in standard markdown and MUST be structured as follows:\n\n1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).\n    - Quantitative Example: `Key Metric: {\"value\": \"21\", \"label\": \"Databases on system\"}`\n    - Qualitative Example: `Key Metric: {\"value\": \"High\", \"label\": \"System Utilization\"}`\n    If there is no single primary value, you MUST omit this line entirely.\n2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.\n3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.\n4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.\n",
        "source_data": [
          "result_of_phase_2"
        ],
        "user_question": "is there a fitness database on the system?",
        "data": {
          "result_of_phase_1": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_databaseList",
                "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  },
                  {
                    "name": "DBType",
                    "type": "str"
                  },
                  {
                    "name": "CommentString",
                    "type": "str"
                  }
                ],
                "row_count": 47
              },
              "results": [
                {
                  "DatabaseName": "TD_SYSXML",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "mldb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "gs_tables_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "All",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSGPL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_ANALYTICS_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt2",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "SYSJDBC",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSFNLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "DBC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "demo_user",
                  "DBType": "User",
                  "CommentString": "Logon ID for the end user to run demonstrations"
                },
                {
                  "DatabaseName": "tapidb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "EXTUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SQLJ",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Default",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_DB",
                  "DBType": "DataBase",
                  "CommentString": "As-A-Service : APIs DB "
                },
                {
                  "DatabaseName": "TDaaS_BAR",
                  "DBType": "User",
                  "CommentString": "As-A-Service : Backup and Restore "
                },
                {
                  "DatabaseName": "val",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "PUBLIC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "dbcmngr",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_Monitor",
                  "DBType": "User",
                  "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
                },
                {
                  "DatabaseName": "TDStats",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSBAR",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "External_AP",
                  "DBType": "User",
                  "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
                },
                {
                  "DatabaseName": "TDQCD",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "tdwm",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "LockLogShredder",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "modelops",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Sys_Calendar",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "GLOBAL_FUNCTIONS",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "system",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDMaps",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUDTLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDPUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDBCMgmt",
                  "DBType": "DataBase",
                  "CommentString": "POG/COG router management database"
                },
                {
                  "DatabaseName": "DemoNow_Monitor",
                  "DBType": "User",
                  "CommentString": "Support logon username for monitoring the platform"
                },
                {
                  "DatabaseName": "TDaaS_Support",
                  "DBType": "User",
                  "CommentString": "As-A-Service Support : Problem and Error Investigation "
                },
                {
                  "DatabaseName": "TD_SERVER_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSSPATIAL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SystemFe",
                  "DBType": "User",
                  "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt1",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "TDaaS_Maint",
                  "DBType": "User",
                  "CommentString": "As-A-Service Maintenance : Patching and Configuration "
                },
                {
                  "DatabaseName": "SysAdmin",
                  "DBType": "User",
                  "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
                },
                {
                  "DatabaseName": "Crashdumps",
                  "DBType": "User",
                  "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
                },
                {
                  "DatabaseName": "fitness_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUIF",
                  "DBType": "DataBase",
                  "CommentString": "None"
                }
              ]
            }
          ],
          "result_of_phase_2": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_readQuery",
                "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  }
                ],
                "row_count": 1
              },
              "results": [
                {
                  "DatabaseName": "fitness_db"
                }
              ]
            }
          ],
          "result_of_phase_3": [
            {
              "status": "success",
              "results": [
                {
                  "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
                }
              ]
            }
          ]
        }
      }
    },
    "result": {
      "status": "success",
      "results": [
        {
          "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
        }
      ]
    }
  }
]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of tables in the fitness_db database.",
    "relevant_tools": [
      "base_tableList"
    ],
    "arguments": {
      "database_name": "fitness_db"
    }
  },
  {
    "phase": 2,
    "goal": "Summarize the contents of the fitness_db database.",
    "relevant_tools": [
      "CoreLLMTask"
    ],
    "arguments": {
      "task_description": "what's in fitness_db?",
      "source_data": [
        "result_of_phase_1"
      ]
    }
  }
]
```
[user]: SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'what's in fitness_db?'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---

You are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.

--- INSTRUCTIONS ---
Your entire response MUST be formatted in standard markdown and MUST be structured as follows:

1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).
    - Quantitative Example: `Key Metric: {"value": "21", "label": "Databases on system"}`
    - Qualitative Example: `Key Metric: {"value": "High", "label": "System Utilization"}`
    If there is no single primary value, you MUST omit this line entirely.
2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.
3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.
4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.


--- RELEVANT DATA (Selected from Previous Phases) ---
{
  "result_of_phase_1": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableList",
        "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
        "columns": [
          {
            "name": "TableName",
            "type": "str"
          }
        ],
        "row_count": 5
      },
      "results": [
        {
          "TableName": "Sales"
        },
        {
          "TableName": "SaleDetails"
        },
        {
          "TableName": "Products"
        },
        {
          "TableName": "ServiceTickets"
        },
        {
          "TableName": "Customers"
        }
      ]
    }
  ]
}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
None

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.
[model]: The fitness_db database contains the following tables: Sales, SaleDetails, Products, ServiceTickets, and Customers.

## Key Observations

*   The database includes tables likely related to sales operations (Sales, SaleDetails, Products), customer management (Customers), and service management (ServiceTickets).
*   The presence of these tables suggests the database is designed to track sales, customer interactions, and service-related activities within a fitness-related business.


--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `what is the business description of Products?`
-   Explicit Parameters: 
-   User's Original Input: `what is the business description of Products?`
-   Workflow History: `[
  {
    "action": {
      "tool_name": "base_tableList",
      "arguments": {
        "database_name": "fitness_db"
      }
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableList",
        "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
        "columns": [
          {
            "name": "TableName",
            "type": "str"
          }
        ],
        "row_count": 5
      },
      "results": [
        {
          "TableName": "Sales"
        },
        {
          "TableName": "SaleDetails"
        },
        {
          "TableName": "Products"
        },
        {
          "TableName": "ServiceTickets"
        },
        {
          "TableName": "Customers"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "CoreLLMTask",
      "arguments": {
        "task_description": "\nYou are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.\n\n--- INSTRUCTIONS ---\nYour entire response MUST be formatted in standard markdown and MUST be structured as follows:\n\n1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).\n    - Quantitative Example: `Key Metric: {\"value\": \"21\", \"label\": \"Databases on system\"}`\n    - Qualitative Example: `Key Metric: {\"value\": \"High\", \"label\": \"System Utilization\"}`\n    If there is no single primary value, you MUST omit this line entirely.\n2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.\n3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.\n4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.\n",
        "source_data": [
          "result_of_phase_1"
        ],
        "user_question": "what's in fitness_db?",
        "data": {
          "result_of_phase_1": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_tableList",
                "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
                "columns": [
                  {
                    "name": "TableName",
                    "type": "str"
                  }
                ],
                "row_count": 5
              },
              "results": [
                {
                  "TableName": "Sales"
                },
                {
                  "TableName": "SaleDetails"
                },
                {
                  "TableName": "Products"
                },
                {
                  "TableName": "ServiceTickets"
                },
                {
                  "TableName": "Customers"
                }
              ]
            }
          ],
          "result_of_phase_2": [
            {
              "status": "success",
              "results": [
                {
                  "response": "The fitness_db database contains the following tables: Sales, SaleDetails, Products, ServiceTickets, and Customers.\n\n## Key Observations\n\n*   The database includes tables likely related to sales operations (Sales, SaleDetails, Products), customer management (Customers), and service management (ServiceTickets).\n*   The presence of these tables suggests the database is designed to track sales, customer interactions, and service-related activities within a fitness-related business."
                }
              ]
            }
          ]
        }
      }
    },
    "result": {
      "status": "success",
      "results": [
        {
          "response": "The fitness_db database contains the following tables: Sales, SaleDetails, Products, ServiceTickets, and Customers.\n\n## Key Observations\n\n*   The database includes tables likely related to sales operations (Sales, SaleDetails, Products), customer management (Customers), and service management (ServiceTickets).\n*   The presence of these tables suggests the database is designed to track sales, customer interactions, and service-related activities within a fitness-related business."
        }
      ]
    }
  }
]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `what is the business description of Products?`
-   Explicit Parameters: 
-   User's Original Input: `what is the business description of Products?`
-   Workflow History: `[
  {
    "action": {
      "tool_name": "base_tableList",
      "arguments": {
        "database_name": "fitness_db"
      }
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableList",
        "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
        "columns": [
          {
            "name": "TableName",
            "type": "str"
          }
        ],
        "row_count": 5
      },
      "results": [
        {
          "TableName": "Sales"
        },
        {
          "TableName": "SaleDetails"
        },
        {
          "TableName": "Products"
        },
        {
          "TableName": "ServiceTickets"
        },
        {
          "TableName": "Customers"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "CoreLLMTask",
      "arguments": {
        "task_description": "\nYou are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.\n\n--- INSTRUCTIONS ---\nYour entire response MUST be formatted in standard markdown and MUST be structured as follows:\n\n1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).\n    - Quantitative Example: `Key Metric: {\"value\": \"21\", \"label\": \"Databases on system\"}`\n    - Qualitative Example: `Key Metric: {\"value\": \"High\", \"label\": \"System Utilization\"}`\n    If there is no single primary value, you MUST omit this line entirely.\n2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.\n3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.\n4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.\n",
        "source_data": [
          "result_of_phase_1"
        ],
        "user_question": "what's in fitness_db?",
        "data": {
          "result_of_phase_1": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_tableList",
                "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
                "columns": [
                  {
                    "name": "TableName",
                    "type": "str"
                  }
                ],
                "row_count": 5
              },
              "results": [
                {
                  "TableName": "Sales"
                },
                {
                  "TableName": "SaleDetails"
                },
                {
                  "TableName": "Products"
                },
                {
                  "TableName": "ServiceTickets"
                },
                {
                  "TableName": "Customers"
                }
              ]
            }
          ],
          "result_of_phase_2": [
            {
              "status": "success",
              "results": [
                {
                  "response": "The fitness_db database contains the following tables: Sales, SaleDetails, Products, ServiceTickets, and Customers.\n\n## Key Observations\n\n*   The database includes tables likely related to sales operations (Sales, SaleDetails, Products), customer management (Customers), and service management (ServiceTickets).\n*   The presence of these tables suggests the database is designed to track sales, customer interactions, and service-related activities within a fitness-related business."
                }
              ]
            }
          ]
        }
      }
    },
    "result": {
      "status": "success",
      "results": [
        {
          "response": "The fitness_db database contains the following tables: Sales, SaleDetails, Products, ServiceTickets, and Customers.\n\n## Key Observations\n\n*   The database includes tables likely related to sales operations (Sales, SaleDetails, Products), customer management (Customers), and service management (ServiceTickets).\n*   The presence of these tables suggests the database is designed to track sales, customer interactions, and service-related activities within a fitness-related business."
        }
      ]
    }
  }
]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.


2025-09-06 01:14:40,360 - --- FULL CONTEXT (Session: 61add44f-af77-4b7c-8ab4-2c3ab96267a7) ---
--- REASON FOR CALL ---
Generating a strategic meta-plan for the goal: 'You are a Teradata DBA who is an expert in describing the business use of tables in a database.

## '

--- History (History Disabled for LLM Call: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of all databases on the system to check for a fitness database.",
    "relevant_tools": [
      "base_databaseList"
    ],
    "arguments": {}
  },
  {
    "phase": 2,
    "goal": "Check if any of the databases in the list from Phase 1 contains the word 'fitness'.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [],
    "executable_prompt": "base_query",
    "arguments": {
      "query": "Is '{{database_name}}' a fitness database?"
    }
  }
]
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONTEXT FOR RE-PLANNING ---
Your previous plan was inefficient because it used a high-level prompt in a multi-step plan. You MUST create a new, more detailed plan that achieves the same goal using ONLY tools.

**CRITICAL ARCHITECTURAL RULE:** Your new tool-only plan must still adhere to all primary directives. This includes the rule that all synthesis or summarization tasks must be consolidated into a single, final `CoreLLMTask` phase. Avoid creating redundant, back-to-back summary steps.

To help you, here is the description of the prompt(s) you previously selected. You must replicate their logic using basic tools:

- Instructions for 'base_query': Help users interact with  Teradata databases effectively.

1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of all databases on the system.",
    "relevant_tools": [
      "base_databaseList"
    ],
    "arguments": {}
  },
  {
    "phase": 2,
    "goal": "Filter the list of databases to find those that contain 'fitness' in their name.",
    "relevant_tools": [
      "base_readQuery"
    ],
    "arguments": {
      "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';"
    }
  },
  {
    "phase": 3,
    "goal": "Summarize the results and answer whether a fitness database exists.",
    "relevant_tools": [
      "CoreLLMTask"
    ],
    "arguments": {
      "task_description": "is there a fitness database on the system?",
      "source_data": [
        "result_of_phase_2"
      ]
    }
  }
]
```
[user]: SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'is there a fitness database on the system?'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---

You are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.

--- INSTRUCTIONS ---
Your entire response MUST be formatted in standard markdown and MUST be structured as follows:

1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).
    - Quantitative Example: `Key Metric: {"value": "21", "label": "Databases on system"}`
    - Qualitative Example: `Key Metric: {"value": "High", "label": "System Utilization"}`
    If there is no single primary value, you MUST omit this line entirely.
2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.
3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.
4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.


--- RELEVANT DATA (Selected from Previous Phases) ---
{
  "result_of_phase_2": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_readQuery",
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          }
        ],
        "row_count": 1
      },
      "results": [
        {
          "DatabaseName": "fitness_db"
        }
      ]
    }
  ]
}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
None

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.
[model]: Key Metric: {"value": "Yes", "label": "Fitness database exists"}
Yes, there is a fitness database on the system.

## Key Observations
*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.
*   The database 'fitness_db' was found to match the search criteria.
*   The system contains at least one database related to fitness.

[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `what's in fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what's in fitness_db?`
-   Workflow History: `[
  {
    "action": {
      "tool_name": "base_databaseList",
      "arguments": {}
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_databaseList",
        "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          },
          {
            "name": "DBType",
            "type": "str"
          },
          {
            "name": "CommentString",
            "type": "str"
          }
        ],
        "row_count": 47
      },
      "results": [
        {
          "DatabaseName": "TD_SYSXML",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "mldb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "gs_tables_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "All",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSGPL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_ANALYTICS_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt2",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "SYSJDBC",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSFNLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "DBC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "demo_user",
          "DBType": "User",
          "CommentString": "Logon ID for the end user to run demonstrations"
        },
        {
          "DatabaseName": "tapidb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "EXTUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SQLJ",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Default",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_DB",
          "DBType": "DataBase",
          "CommentString": "As-A-Service : APIs DB "
        },
        {
          "DatabaseName": "TDaaS_BAR",
          "DBType": "User",
          "CommentString": "As-A-Service : Backup and Restore "
        },
        {
          "DatabaseName": "val",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "PUBLIC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "dbcmngr",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_Monitor",
          "DBType": "User",
          "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
        },
        {
          "DatabaseName": "TDStats",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSBAR",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "External_AP",
          "DBType": "User",
          "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
        },
        {
          "DatabaseName": "TDQCD",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "tdwm",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "LockLogShredder",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "modelops",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Sys_Calendar",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "GLOBAL_FUNCTIONS",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "system",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDMaps",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUDTLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDPUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDBCMgmt",
          "DBType": "DataBase",
          "CommentString": "POG/COG router management database"
        },
        {
          "DatabaseName": "DemoNow_Monitor",
          "DBType": "User",
          "CommentString": "Support logon username for monitoring the platform"
        },
        {
          "DatabaseName": "TDaaS_Support",
          "DBType": "User",
          "CommentString": "As-A-Service Support : Problem and Error Investigation "
        },
        {
          "DatabaseName": "TD_SERVER_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSSPATIAL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SystemFe",
          "DBType": "User",
          "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt1",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "TDaaS_Maint",
          "DBType": "User",
          "CommentString": "As-A-Service Maintenance : Patching and Configuration "
        },
        {
          "DatabaseName": "SysAdmin",
          "DBType": "User",
          "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
        },
        {
          "DatabaseName": "Crashdumps",
          "DBType": "User",
          "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
        },
        {
          "DatabaseName": "fitness_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUIF",
          "DBType": "DataBase",
          "CommentString": "None"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "base_readQuery",
      "arguments": {
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';"
      }
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_readQuery",
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          }
        ],
        "row_count": 1
      },
      "results": [
        {
          "DatabaseName": "fitness_db"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "CoreLLMTask",
      "arguments": {
        "task_description": "\nYou are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.\n\n--- INSTRUCTIONS ---\nYour entire response MUST be formatted in standard markdown and MUST be structured as follows:\n\n1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).\n    - Quantitative Example: `Key Metric: {\"value\": \"21\", \"label\": \"Databases on system\"}`\n    - Qualitative Example: `Key Metric: {\"value\": \"High\", \"label\": \"System Utilization\"}`\n    If there is no single primary value, you MUST omit this line entirely.\n2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.\n3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.\n4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.\n",
        "source_data": [
          "result_of_phase_2"
        ],
        "user_question": "is there a fitness database on the system?",
        "data": {
          "result_of_phase_1": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_databaseList",
                "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  },
                  {
                    "name": "DBType",
                    "type": "str"
                  },
                  {
                    "name": "CommentString",
                    "type": "str"
                  }
                ],
                "row_count": 47
              },
              "results": [
                {
                  "DatabaseName": "TD_SYSXML",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "mldb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "gs_tables_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "All",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSGPL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_ANALYTICS_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt2",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "SYSJDBC",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSFNLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "DBC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "demo_user",
                  "DBType": "User",
                  "CommentString": "Logon ID for the end user to run demonstrations"
                },
                {
                  "DatabaseName": "tapidb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "EXTUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SQLJ",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Default",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_DB",
                  "DBType": "DataBase",
                  "CommentString": "As-A-Service : APIs DB "
                },
                {
                  "DatabaseName": "TDaaS_BAR",
                  "DBType": "User",
                  "CommentString": "As-A-Service : Backup and Restore "
                },
                {
                  "DatabaseName": "val",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "PUBLIC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "dbcmngr",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_Monitor",
                  "DBType": "User",
                  "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
                },
                {
                  "DatabaseName": "TDStats",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSBAR",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "External_AP",
                  "DBType": "User",
                  "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
                },
                {
                  "DatabaseName": "TDQCD",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "tdwm",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "LockLogShredder",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "modelops",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Sys_Calendar",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "GLOBAL_FUNCTIONS",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "system",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDMaps",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUDTLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDPUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDBCMgmt",
                  "DBType": "DataBase",
                  "CommentString": "POG/COG router management database"
                },
                {
                  "DatabaseName": "DemoNow_Monitor",
                  "DBType": "User",
                  "CommentString": "Support logon username for monitoring the platform"
                },
                {
                  "DatabaseName": "TDaaS_Support",
                  "DBType": "User",
                  "CommentString": "As-A-Service Support : Problem and Error Investigation "
                },
                {
                  "DatabaseName": "TD_SERVER_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSSPATIAL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SystemFe",
                  "DBType": "User",
                  "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt1",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "TDaaS_Maint",
                  "DBType": "User",
                  "CommentString": "As-A-Service Maintenance : Patching and Configuration "
                },
                {
                  "DatabaseName": "SysAdmin",
                  "DBType": "User",
                  "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
                },
                {
                  "DatabaseName": "Crashdumps",
                  "DBType": "User",
                  "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
                },
                {
                  "DatabaseName": "fitness_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUIF",
                  "DBType": "DataBase",
                  "CommentString": "None"
                }
              ]
            }
          ],
          "result_of_phase_2": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_readQuery",
                "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  }
                ],
                "row_count": 1
              },
              "results": [
                {
                  "DatabaseName": "fitness_db"
                }
              ]
            }
          ],
          "result_of_phase_3": [
            {
              "status": "success",
              "results": [
                {
                  "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
                }
              ]
            }
          ]
        }
      }
    },
    "result": {
      "status": "success",
      "results": [
        {
          "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
        }
      ]
    }
  }
]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `what's in fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what's in fitness_db?`
-   Workflow History: `[
  {
    "action": {
      "tool_name": "base_databaseList",
      "arguments": {}
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_databaseList",
        "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          },
          {
            "name": "DBType",
            "type": "str"
          },
          {
            "name": "CommentString",
            "type": "str"
          }
        ],
        "row_count": 47
      },
      "results": [
        {
          "DatabaseName": "TD_SYSXML",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "mldb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "gs_tables_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "All",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSGPL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_ANALYTICS_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt2",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "SYSJDBC",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSFNLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "DBC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "demo_user",
          "DBType": "User",
          "CommentString": "Logon ID for the end user to run demonstrations"
        },
        {
          "DatabaseName": "tapidb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "EXTUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SQLJ",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Default",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_DB",
          "DBType": "DataBase",
          "CommentString": "As-A-Service : APIs DB "
        },
        {
          "DatabaseName": "TDaaS_BAR",
          "DBType": "User",
          "CommentString": "As-A-Service : Backup and Restore "
        },
        {
          "DatabaseName": "val",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "PUBLIC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "dbcmngr",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_Monitor",
          "DBType": "User",
          "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
        },
        {
          "DatabaseName": "TDStats",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSBAR",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "External_AP",
          "DBType": "User",
          "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
        },
        {
          "DatabaseName": "TDQCD",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "tdwm",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "LockLogShredder",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "modelops",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Sys_Calendar",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "GLOBAL_FUNCTIONS",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "system",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDMaps",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUDTLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDPUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDBCMgmt",
          "DBType": "DataBase",
          "CommentString": "POG/COG router management database"
        },
        {
          "DatabaseName": "DemoNow_Monitor",
          "DBType": "User",
          "CommentString": "Support logon username for monitoring the platform"
        },
        {
          "DatabaseName": "TDaaS_Support",
          "DBType": "User",
          "CommentString": "As-A-Service Support : Problem and Error Investigation "
        },
        {
          "DatabaseName": "TD_SERVER_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSSPATIAL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SystemFe",
          "DBType": "User",
          "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt1",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "TDaaS_Maint",
          "DBType": "User",
          "CommentString": "As-A-Service Maintenance : Patching and Configuration "
        },
        {
          "DatabaseName": "SysAdmin",
          "DBType": "User",
          "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
        },
        {
          "DatabaseName": "Crashdumps",
          "DBType": "User",
          "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
        },
        {
          "DatabaseName": "fitness_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUIF",
          "DBType": "DataBase",
          "CommentString": "None"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "base_readQuery",
      "arguments": {
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';"
      }
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_readQuery",
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          }
        ],
        "row_count": 1
      },
      "results": [
        {
          "DatabaseName": "fitness_db"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "CoreLLMTask",
      "arguments": {
        "task_description": "\nYou are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.\n\n--- INSTRUCTIONS ---\nYour entire response MUST be formatted in standard markdown and MUST be structured as follows:\n\n1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).\n    - Quantitative Example: `Key Metric: {\"value\": \"21\", \"label\": \"Databases on system\"}`\n    - Qualitative Example: `Key Metric: {\"value\": \"High\", \"label\": \"System Utilization\"}`\n    If there is no single primary value, you MUST omit this line entirely.\n2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.\n3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.\n4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.\n",
        "source_data": [
          "result_of_phase_2"
        ],
        "user_question": "is there a fitness database on the system?",
        "data": {
          "result_of_phase_1": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_databaseList",
                "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  },
                  {
                    "name": "DBType",
                    "type": "str"
                  },
                  {
                    "name": "CommentString",
                    "type": "str"
                  }
                ],
                "row_count": 47
              },
              "results": [
                {
                  "DatabaseName": "TD_SYSXML",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "mldb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "gs_tables_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "All",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSGPL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_ANALYTICS_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt2",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "SYSJDBC",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSFNLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "DBC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "demo_user",
                  "DBType": "User",
                  "CommentString": "Logon ID for the end user to run demonstrations"
                },
                {
                  "DatabaseName": "tapidb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "EXTUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SQLJ",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Default",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_DB",
                  "DBType": "DataBase",
                  "CommentString": "As-A-Service : APIs DB "
                },
                {
                  "DatabaseName": "TDaaS_BAR",
                  "DBType": "User",
                  "CommentString": "As-A-Service : Backup and Restore "
                },
                {
                  "DatabaseName": "val",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "PUBLIC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "dbcmngr",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_Monitor",
                  "DBType": "User",
                  "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
                },
                {
                  "DatabaseName": "TDStats",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSBAR",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "External_AP",
                  "DBType": "User",
                  "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
                },
                {
                  "DatabaseName": "TDQCD",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "tdwm",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "LockLogShredder",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "modelops",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Sys_Calendar",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "GLOBAL_FUNCTIONS",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "system",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDMaps",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUDTLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDPUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDBCMgmt",
                  "DBType": "DataBase",
                  "CommentString": "POG/COG router management database"
                },
                {
                  "DatabaseName": "DemoNow_Monitor",
                  "DBType": "User",
                  "CommentString": "Support logon username for monitoring the platform"
                },
                {
                  "DatabaseName": "TDaaS_Support",
                  "DBType": "User",
                  "CommentString": "As-A-Service Support : Problem and Error Investigation "
                },
                {
                  "DatabaseName": "TD_SERVER_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSSPATIAL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SystemFe",
                  "DBType": "User",
                  "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt1",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "TDaaS_Maint",
                  "DBType": "User",
                  "CommentString": "As-A-Service Maintenance : Patching and Configuration "
                },
                {
                  "DatabaseName": "SysAdmin",
                  "DBType": "User",
                  "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
                },
                {
                  "DatabaseName": "Crashdumps",
                  "DBType": "User",
                  "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
                },
                {
                  "DatabaseName": "fitness_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUIF",
                  "DBType": "DataBase",
                  "CommentString": "None"
                }
              ]
            }
          ],
          "result_of_phase_2": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_readQuery",
                "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  }
                ],
                "row_count": 1
              },
              "results": [
                {
                  "DatabaseName": "fitness_db"
                }
              ]
            }
          ],
          "result_of_phase_3": [
            {
              "status": "success",
              "results": [
                {
                  "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
                }
              ]
            }
          ]
        }
      }
    },
    "result": {
      "status": "success",
      "results": [
        {
          "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
        }
      ]
    }
  }
]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of tables in the fitness_db database.",
    "relevant_tools": [
      "base_tableList"
    ],
    "arguments": {
      "database_name": "fitness_db"
    }
  },
  {
    "phase": 2,
    "goal": "Summarize the contents of the fitness_db database.",
    "relevant_tools": [
      "CoreLLMTask"
    ],
    "arguments": {
      "task_description": "what's in fitness_db?",
      "source_data": [
        "result_of_phase_1"
      ]
    }
  }
]
```
[user]: SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'what's in fitness_db?'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---

You are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.

--- INSTRUCTIONS ---
Your entire response MUST be formatted in standard markdown and MUST be structured as follows:

1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).
    - Quantitative Example: `Key Metric: {"value": "21", "label": "Databases on system"}`
    - Qualitative Example: `Key Metric: {"value": "High", "label": "System Utilization"}`
    If there is no single primary value, you MUST omit this line entirely.
2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.
3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.
4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.


--- RELEVANT DATA (Selected from Previous Phases) ---
{
  "result_of_phase_1": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableList",
        "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
        "columns": [
          {
            "name": "TableName",
            "type": "str"
          }
        ],
        "row_count": 5
      },
      "results": [
        {
          "TableName": "Sales"
        },
        {
          "TableName": "SaleDetails"
        },
        {
          "TableName": "Products"
        },
        {
          "TableName": "ServiceTickets"
        },
        {
          "TableName": "Customers"
        }
      ]
    }
  ]
}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
None

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.
[model]: The fitness_db database contains the following tables: Sales, SaleDetails, Products, ServiceTickets, and Customers.

## Key Observations

*   The database includes tables likely related to sales operations (Sales, SaleDetails, Products), customer management (Customers), and service management (ServiceTickets).
*   The presence of these tables suggests the database is designed to track sales, customer interactions, and service-related activities within a fitness-related business.

[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `what is the business description of Products?`
-   Explicit Parameters: 
-   User's Original Input: `what is the business description of Products?`
-   Workflow History: `[
  {
    "action": {
      "tool_name": "base_tableList",
      "arguments": {
        "database_name": "fitness_db"
      }
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableList",
        "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
        "columns": [
          {
            "name": "TableName",
            "type": "str"
          }
        ],
        "row_count": 5
      },
      "results": [
        {
          "TableName": "Sales"
        },
        {
          "TableName": "SaleDetails"
        },
        {
          "TableName": "Products"
        },
        {
          "TableName": "ServiceTickets"
        },
        {
          "TableName": "Customers"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "CoreLLMTask",
      "arguments": {
        "task_description": "\nYou are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.\n\n--- INSTRUCTIONS ---\nYour entire response MUST be formatted in standard markdown and MUST be structured as follows:\n\n1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).\n    - Quantitative Example: `Key Metric: {\"value\": \"21\", \"label\": \"Databases on system\"}`\n    - Qualitative Example: `Key Metric: {\"value\": \"High\", \"label\": \"System Utilization\"}`\n    If there is no single primary value, you MUST omit this line entirely.\n2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.\n3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.\n4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.\n",
        "source_data": [
          "result_of_phase_1"
        ],
        "user_question": "what's in fitness_db?",
        "data": {
          "result_of_phase_1": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_tableList",
                "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
                "columns": [
                  {
                    "name": "TableName",
                    "type": "str"
                  }
                ],
                "row_count": 5
              },
              "results": [
                {
                  "TableName": "Sales"
                },
                {
                  "TableName": "SaleDetails"
                },
                {
                  "TableName": "Products"
                },
                {
                  "TableName": "ServiceTickets"
                },
                {
                  "TableName": "Customers"
                }
              ]
            }
          ],
          "result_of_phase_2": [
            {
              "status": "success",
              "results": [
                {
                  "response": "The fitness_db database contains the following tables: Sales, SaleDetails, Products, ServiceTickets, and Customers.\n\n## Key Observations\n\n*   The database includes tables likely related to sales operations (Sales, SaleDetails, Products), customer management (Customers), and service management (ServiceTickets).\n*   The presence of these tables suggests the database is designed to track sales, customer interactions, and service-related activities within a fitness-related business."
                }
              ]
            }
          ]
        }
      }
    },
    "result": {
      "status": "success",
      "results": [
        {
          "response": "The fitness_db database contains the following tables: Sales, SaleDetails, Products, ServiceTickets, and Customers.\n\n## Key Observations\n\n*   The database includes tables likely related to sales operations (Sales, SaleDetails, Products), customer management (Customers), and service management (ServiceTickets).\n*   The presence of these tables suggests the database is designed to track sales, customer interactions, and service-related activities within a fitness-related business."
        }
      ]
    }
  }
]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `what is the business description of Products?`
-   Explicit Parameters: 
-   User's Original Input: `what is the business description of Products?`
-   Workflow History: `[
  {
    "action": {
      "tool_name": "base_tableList",
      "arguments": {
        "database_name": "fitness_db"
      }
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableList",
        "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
        "columns": [
          {
            "name": "TableName",
            "type": "str"
          }
        ],
        "row_count": 5
      },
      "results": [
        {
          "TableName": "Sales"
        },
        {
          "TableName": "SaleDetails"
        },
        {
          "TableName": "Products"
        },
        {
          "TableName": "ServiceTickets"
        },
        {
          "TableName": "Customers"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "CoreLLMTask",
      "arguments": {
        "task_description": "\nYou are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.\n\n--- INSTRUCTIONS ---\nYour entire response MUST be formatted in standard markdown and MUST be structured as follows:\n\n1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).\n    - Quantitative Example: `Key Metric: {\"value\": \"21\", \"label\": \"Databases on system\"}`\n    - Qualitative Example: `Key Metric: {\"value\": \"High\", \"label\": \"System Utilization\"}`\n    If there is no single primary value, you MUST omit this line entirely.\n2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.\n3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.\n4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.\n",
        "source_data": [
          "result_of_phase_1"
        ],
        "user_question": "what's in fitness_db?",
        "data": {
          "result_of_phase_1": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_tableList",
                "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
                "columns": [
                  {
                    "name": "TableName",
                    "type": "str"
                  }
                ],
                "row_count": 5
              },
              "results": [
                {
                  "TableName": "Sales"
                },
                {
                  "TableName": "SaleDetails"
                },
                {
                  "TableName": "Products"
                },
                {
                  "TableName": "ServiceTickets"
                },
                {
                  "TableName": "Customers"
                }
              ]
            }
          ],
          "result_of_phase_2": [
            {
              "status": "success",
              "results": [
                {
                  "response": "The fitness_db database contains the following tables: Sales, SaleDetails, Products, ServiceTickets, and Customers.\n\n## Key Observations\n\n*   The database includes tables likely related to sales operations (Sales, SaleDetails, Products), customer management (Customers), and service management (ServiceTickets).\n*   The presence of these tables suggests the database is designed to track sales, customer interactions, and service-related activities within a fitness-related business."
                }
              ]
            }
          ]
        }
      }
    },
    "result": {
      "status": "success",
      "results": [
        {
          "response": "The fitness_db database contains the following tables: Sales, SaleDetails, Products, ServiceTickets, and Customers.\n\n## Key Observations\n\n*   The database includes tables likely related to sales operations (Sales, SaleDetails, Products), customer management (Customers), and service management (ServiceTickets).\n*   The presence of these tables suggests the database is designed to track sales, customer interactions, and service-related activities within a fitness-related business."
        }
      ]
    }
  }
]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get the business description of the Products table in the fitness_db database.",
    "relevant_tools": [
      "base_tableBusinessDesc"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "Products"
    }
  }
]
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `You are a Teradata DBA who is an expert in describing the business use of tables in a database.

## your role will work through the phases
Perform the phases in order, and do not skip any phase.

## Phase 0 - Get the table name and database name
- The table name is Products
- The database name is fitness_db

## Phase 1 - Get the table DDL
- Get the table DDL from the user. The DDL should be a single string, and it should not contain any new lines or special characters. Use the base_tableDDL tool to get the DDL.

## Phase 2 - Describe the table
- Describe the table in a business context. The description should be a single string. 
- The description should include the following: 
    - The purpose of the table
    - The purpose of the columns in the table

## Communication guidelines:
      - Be concise but informative in your explanations
      - Clearly indicate which phase the process is currently in
      - summarize the outcome of the phase before moving to the next phase

## Final output guidelines:
      - return in markdown
      - Example:
      ***Table Name:*** `table_name`

      ***Database Name:*** `database_name`

      ***Description:*** `table_description`

         - ***Column1:*** `column1_descriptions`
         - ***Column2:*** `column2_descriptions`
         - ***Column3:*** `column3_descriptions`
`
-   Explicit Parameters: 
--- EXPLICIT PARAMETERS ---
The following parameters were explicitly provided for this prompt execution:
- database_name: "fitness_db"
- table_name: "Products"

-   User's Original Input: `Get the business description of the Products table in the fitness_db database.`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `1`. Avoid creating identical plans.

- Active Prompt: You are currently executing the 'base_tableBusinessDesc' prompt. Do not call it again.

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `You are a Teradata DBA who is an expert in describing the business use of tables in a database.

## your role will work through the phases
Perform the phases in order, and do not skip any phase.

## Phase 0 - Get the table name and database name
- The table name is Products
- The database name is fitness_db

## Phase 1 - Get the table DDL
- Get the table DDL from the user. The DDL should be a single string, and it should not contain any new lines or special characters. Use the base_tableDDL tool to get the DDL.

## Phase 2 - Describe the table
- Describe the table in a business context. The description should be a single string. 
- The description should include the following: 
    - The purpose of the table
    - The purpose of the columns in the table

## Communication guidelines:
      - Be concise but informative in your explanations
      - Clearly indicate which phase the process is currently in
      - summarize the outcome of the phase before moving to the next phase

## Final output guidelines:
      - return in markdown
      - Example:
      ***Table Name:*** `table_name`

      ***Database Name:*** `database_name`

      ***Description:*** `table_description`

         - ***Column1:*** `column1_descriptions`
         - ***Column2:*** `column2_descriptions`
         - ***Column3:*** `column3_descriptions`
`
-   Explicit Parameters: 
--- EXPLICIT PARAMETERS ---
The following parameters were explicitly provided for this prompt execution:
- database_name: "fitness_db"
- table_name: "Products"

-   User's Original Input: `Get the business description of the Products table in the fitness_db database.`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `1`. Avoid creating identical plans.

- Active Prompt: You are currently executing the 'base_tableBusinessDesc' prompt. Do not call it again.

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.


2025-09-06 01:14:43,298 - --- FULL CONTEXT (Session: 61add44f-af77-4b7c-8ab4-2c3ab96267a7) ---
--- REASON FOR CALL ---
Executing CoreLLMTask: You are a Teradata DBA who is an expert in describing the business use of tables in a database.

## your role will work through the phases
Perform the phases in order, and do not skip any phase.

## Phase 0 - Get the table name and database name
- The table name is Products
- The database name is fitness_db

## Phase 1 - Get the table DDL
- Get the table DDL from the user. The DDL should be a single string, and it should not contain any new lines or special characters. Use the base_tableDDL tool to get the DDL.

## Phase 2 - Describe the table
- Describe the table in a business context. The description should be a single string. 
- The description should include the following: 
    - The purpose of the table
    - The purpose of the columns in the table

## Communication guidelines:
      - Be concise but informative in your explanations
      - Clearly indicate which phase the process is currently in
      - summarize the outcome of the phase before moving to the next phase

## Final output guidelines:
      - return in markdown
      - Example:
      ***Table Name:*** `table_name`

      ***Database Name:*** `database_name`

      ***Description:*** `table_description`

         - ***Column1:*** `column1_descriptions`
         - ***Column2:*** `column2_descriptions`
         - ***Column3:*** `column3_descriptions`


--- History (History Disabled for LLM Call: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of all databases on the system to check for a fitness database.",
    "relevant_tools": [
      "base_databaseList"
    ],
    "arguments": {}
  },
  {
    "phase": 2,
    "goal": "Check if any of the databases in the list from Phase 1 contains the word 'fitness'.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [],
    "executable_prompt": "base_query",
    "arguments": {
      "query": "Is '{{database_name}}' a fitness database?"
    }
  }
]
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONTEXT FOR RE-PLANNING ---
Your previous plan was inefficient because it used a high-level prompt in a multi-step plan. You MUST create a new, more detailed plan that achieves the same goal using ONLY tools.

**CRITICAL ARCHITECTURAL RULE:** Your new tool-only plan must still adhere to all primary directives. This includes the rule that all synthesis or summarization tasks must be consolidated into a single, final `CoreLLMTask` phase. Avoid creating redundant, back-to-back summary steps.

To help you, here is the description of the prompt(s) you previously selected. You must replicate their logic using basic tools:

- Instructions for 'base_query': Help users interact with  Teradata databases effectively.

1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system?`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of all databases on the system.",
    "relevant_tools": [
      "base_databaseList"
    ],
    "arguments": {}
  },
  {
    "phase": 2,
    "goal": "Filter the list of databases to find those that contain 'fitness' in their name.",
    "relevant_tools": [
      "base_readQuery"
    ],
    "arguments": {
      "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';"
    }
  },
  {
    "phase": 3,
    "goal": "Summarize the results and answer whether a fitness database exists.",
    "relevant_tools": [
      "CoreLLMTask"
    ],
    "arguments": {
      "task_description": "is there a fitness database on the system?",
      "source_data": [
        "result_of_phase_2"
      ]
    }
  }
]
```
[user]: SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'is there a fitness database on the system?'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---

You are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.

--- INSTRUCTIONS ---
Your entire response MUST be formatted in standard markdown and MUST be structured as follows:

1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).
    - Quantitative Example: `Key Metric: {"value": "21", "label": "Databases on system"}`
    - Qualitative Example: `Key Metric: {"value": "High", "label": "System Utilization"}`
    If there is no single primary value, you MUST omit this line entirely.
2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.
3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.
4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.


--- RELEVANT DATA (Selected from Previous Phases) ---
{
  "result_of_phase_2": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_readQuery",
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          }
        ],
        "row_count": 1
      },
      "results": [
        {
          "DatabaseName": "fitness_db"
        }
      ]
    }
  ]
}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
None

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.
[model]: Key Metric: {"value": "Yes", "label": "Fitness database exists"}
Yes, there is a fitness database on the system.

## Key Observations
*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.
*   The database 'fitness_db' was found to match the search criteria.
*   The system contains at least one database related to fitness.

[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `what's in fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what's in fitness_db?`
-   Workflow History: `[
  {
    "action": {
      "tool_name": "base_databaseList",
      "arguments": {}
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_databaseList",
        "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          },
          {
            "name": "DBType",
            "type": "str"
          },
          {
            "name": "CommentString",
            "type": "str"
          }
        ],
        "row_count": 47
      },
      "results": [
        {
          "DatabaseName": "TD_SYSXML",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "mldb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "gs_tables_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "All",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSGPL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_ANALYTICS_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt2",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "SYSJDBC",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSFNLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "DBC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "demo_user",
          "DBType": "User",
          "CommentString": "Logon ID for the end user to run demonstrations"
        },
        {
          "DatabaseName": "tapidb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "EXTUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SQLJ",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Default",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_DB",
          "DBType": "DataBase",
          "CommentString": "As-A-Service : APIs DB "
        },
        {
          "DatabaseName": "TDaaS_BAR",
          "DBType": "User",
          "CommentString": "As-A-Service : Backup and Restore "
        },
        {
          "DatabaseName": "val",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "PUBLIC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "dbcmngr",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_Monitor",
          "DBType": "User",
          "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
        },
        {
          "DatabaseName": "TDStats",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSBAR",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "External_AP",
          "DBType": "User",
          "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
        },
        {
          "DatabaseName": "TDQCD",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "tdwm",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "LockLogShredder",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "modelops",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Sys_Calendar",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "GLOBAL_FUNCTIONS",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "system",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDMaps",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUDTLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDPUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDBCMgmt",
          "DBType": "DataBase",
          "CommentString": "POG/COG router management database"
        },
        {
          "DatabaseName": "DemoNow_Monitor",
          "DBType": "User",
          "CommentString": "Support logon username for monitoring the platform"
        },
        {
          "DatabaseName": "TDaaS_Support",
          "DBType": "User",
          "CommentString": "As-A-Service Support : Problem and Error Investigation "
        },
        {
          "DatabaseName": "TD_SERVER_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSSPATIAL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SystemFe",
          "DBType": "User",
          "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt1",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "TDaaS_Maint",
          "DBType": "User",
          "CommentString": "As-A-Service Maintenance : Patching and Configuration "
        },
        {
          "DatabaseName": "SysAdmin",
          "DBType": "User",
          "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
        },
        {
          "DatabaseName": "Crashdumps",
          "DBType": "User",
          "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
        },
        {
          "DatabaseName": "fitness_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUIF",
          "DBType": "DataBase",
          "CommentString": "None"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "base_readQuery",
      "arguments": {
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';"
      }
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_readQuery",
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          }
        ],
        "row_count": 1
      },
      "results": [
        {
          "DatabaseName": "fitness_db"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "CoreLLMTask",
      "arguments": {
        "task_description": "\nYou are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.\n\n--- INSTRUCTIONS ---\nYour entire response MUST be formatted in standard markdown and MUST be structured as follows:\n\n1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).\n    - Quantitative Example: `Key Metric: {\"value\": \"21\", \"label\": \"Databases on system\"}`\n    - Qualitative Example: `Key Metric: {\"value\": \"High\", \"label\": \"System Utilization\"}`\n    If there is no single primary value, you MUST omit this line entirely.\n2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.\n3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.\n4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.\n",
        "source_data": [
          "result_of_phase_2"
        ],
        "user_question": "is there a fitness database on the system?",
        "data": {
          "result_of_phase_1": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_databaseList",
                "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  },
                  {
                    "name": "DBType",
                    "type": "str"
                  },
                  {
                    "name": "CommentString",
                    "type": "str"
                  }
                ],
                "row_count": 47
              },
              "results": [
                {
                  "DatabaseName": "TD_SYSXML",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "mldb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "gs_tables_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "All",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSGPL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_ANALYTICS_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt2",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "SYSJDBC",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSFNLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "DBC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "demo_user",
                  "DBType": "User",
                  "CommentString": "Logon ID for the end user to run demonstrations"
                },
                {
                  "DatabaseName": "tapidb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "EXTUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SQLJ",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Default",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_DB",
                  "DBType": "DataBase",
                  "CommentString": "As-A-Service : APIs DB "
                },
                {
                  "DatabaseName": "TDaaS_BAR",
                  "DBType": "User",
                  "CommentString": "As-A-Service : Backup and Restore "
                },
                {
                  "DatabaseName": "val",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "PUBLIC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "dbcmngr",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_Monitor",
                  "DBType": "User",
                  "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
                },
                {
                  "DatabaseName": "TDStats",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSBAR",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "External_AP",
                  "DBType": "User",
                  "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
                },
                {
                  "DatabaseName": "TDQCD",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "tdwm",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "LockLogShredder",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "modelops",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Sys_Calendar",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "GLOBAL_FUNCTIONS",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "system",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDMaps",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUDTLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDPUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDBCMgmt",
                  "DBType": "DataBase",
                  "CommentString": "POG/COG router management database"
                },
                {
                  "DatabaseName": "DemoNow_Monitor",
                  "DBType": "User",
                  "CommentString": "Support logon username for monitoring the platform"
                },
                {
                  "DatabaseName": "TDaaS_Support",
                  "DBType": "User",
                  "CommentString": "As-A-Service Support : Problem and Error Investigation "
                },
                {
                  "DatabaseName": "TD_SERVER_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSSPATIAL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SystemFe",
                  "DBType": "User",
                  "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt1",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "TDaaS_Maint",
                  "DBType": "User",
                  "CommentString": "As-A-Service Maintenance : Patching and Configuration "
                },
                {
                  "DatabaseName": "SysAdmin",
                  "DBType": "User",
                  "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
                },
                {
                  "DatabaseName": "Crashdumps",
                  "DBType": "User",
                  "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
                },
                {
                  "DatabaseName": "fitness_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUIF",
                  "DBType": "DataBase",
                  "CommentString": "None"
                }
              ]
            }
          ],
          "result_of_phase_2": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_readQuery",
                "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  }
                ],
                "row_count": 1
              },
              "results": [
                {
                  "DatabaseName": "fitness_db"
                }
              ]
            }
          ],
          "result_of_phase_3": [
            {
              "status": "success",
              "results": [
                {
                  "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
                }
              ]
            }
          ]
        }
      }
    },
    "result": {
      "status": "success",
      "results": [
        {
          "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
        }
      ]
    }
  }
]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `what's in fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what's in fitness_db?`
-   Workflow History: `[
  {
    "action": {
      "tool_name": "base_databaseList",
      "arguments": {}
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_databaseList",
        "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          },
          {
            "name": "DBType",
            "type": "str"
          },
          {
            "name": "CommentString",
            "type": "str"
          }
        ],
        "row_count": 47
      },
      "results": [
        {
          "DatabaseName": "TD_SYSXML",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "mldb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "gs_tables_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "All",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSGPL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_ANALYTICS_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt2",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "SYSJDBC",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSFNLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "DBC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "demo_user",
          "DBType": "User",
          "CommentString": "Logon ID for the end user to run demonstrations"
        },
        {
          "DatabaseName": "tapidb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "EXTUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SQLJ",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Default",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_DB",
          "DBType": "DataBase",
          "CommentString": "As-A-Service : APIs DB "
        },
        {
          "DatabaseName": "TDaaS_BAR",
          "DBType": "User",
          "CommentString": "As-A-Service : Backup and Restore "
        },
        {
          "DatabaseName": "val",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "PUBLIC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "dbcmngr",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_Monitor",
          "DBType": "User",
          "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
        },
        {
          "DatabaseName": "TDStats",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSBAR",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "External_AP",
          "DBType": "User",
          "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
        },
        {
          "DatabaseName": "TDQCD",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "tdwm",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "LockLogShredder",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "modelops",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Sys_Calendar",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "GLOBAL_FUNCTIONS",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "system",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDMaps",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUDTLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDPUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDBCMgmt",
          "DBType": "DataBase",
          "CommentString": "POG/COG router management database"
        },
        {
          "DatabaseName": "DemoNow_Monitor",
          "DBType": "User",
          "CommentString": "Support logon username for monitoring the platform"
        },
        {
          "DatabaseName": "TDaaS_Support",
          "DBType": "User",
          "CommentString": "As-A-Service Support : Problem and Error Investigation "
        },
        {
          "DatabaseName": "TD_SERVER_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSSPATIAL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SystemFe",
          "DBType": "User",
          "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt1",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "TDaaS_Maint",
          "DBType": "User",
          "CommentString": "As-A-Service Maintenance : Patching and Configuration "
        },
        {
          "DatabaseName": "SysAdmin",
          "DBType": "User",
          "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
        },
        {
          "DatabaseName": "Crashdumps",
          "DBType": "User",
          "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
        },
        {
          "DatabaseName": "fitness_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUIF",
          "DBType": "DataBase",
          "CommentString": "None"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "base_readQuery",
      "arguments": {
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';"
      }
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_readQuery",
        "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          }
        ],
        "row_count": 1
      },
      "results": [
        {
          "DatabaseName": "fitness_db"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "CoreLLMTask",
      "arguments": {
        "task_description": "\nYou are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.\n\n--- INSTRUCTIONS ---\nYour entire response MUST be formatted in standard markdown and MUST be structured as follows:\n\n1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).\n    - Quantitative Example: `Key Metric: {\"value\": \"21\", \"label\": \"Databases on system\"}`\n    - Qualitative Example: `Key Metric: {\"value\": \"High\", \"label\": \"System Utilization\"}`\n    If there is no single primary value, you MUST omit this line entirely.\n2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.\n3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.\n4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.\n",
        "source_data": [
          "result_of_phase_2"
        ],
        "user_question": "is there a fitness database on the system?",
        "data": {
          "result_of_phase_1": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_databaseList",
                "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  },
                  {
                    "name": "DBType",
                    "type": "str"
                  },
                  {
                    "name": "CommentString",
                    "type": "str"
                  }
                ],
                "row_count": 47
              },
              "results": [
                {
                  "DatabaseName": "TD_SYSXML",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "mldb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "gs_tables_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "All",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSGPL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_ANALYTICS_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt2",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "SYSJDBC",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TD_SYSFNLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "DBC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "demo_user",
                  "DBType": "User",
                  "CommentString": "Logon ID for the end user to run demonstrations"
                },
                {
                  "DatabaseName": "tapidb",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "EXTUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SQLJ",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Default",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_DB",
                  "DBType": "DataBase",
                  "CommentString": "As-A-Service : APIs DB "
                },
                {
                  "DatabaseName": "TDaaS_BAR",
                  "DBType": "User",
                  "CommentString": "As-A-Service : Backup and Restore "
                },
                {
                  "DatabaseName": "val",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "PUBLIC",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "dbcmngr",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDaaS_Monitor",
                  "DBType": "User",
                  "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
                },
                {
                  "DatabaseName": "TDStats",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSBAR",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "External_AP",
                  "DBType": "User",
                  "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
                },
                {
                  "DatabaseName": "TDQCD",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "tdwm",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "LockLogShredder",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "modelops",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "Sys_Calendar",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "GLOBAL_FUNCTIONS",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "system",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDMaps",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUDTLIB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDPUSER",
                  "DBType": "User",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "TDBCMgmt",
                  "DBType": "DataBase",
                  "CommentString": "POG/COG router management database"
                },
                {
                  "DatabaseName": "DemoNow_Monitor",
                  "DBType": "User",
                  "CommentString": "Support logon username for monitoring the platform"
                },
                {
                  "DatabaseName": "TDaaS_Support",
                  "DBType": "User",
                  "CommentString": "As-A-Service Support : Problem and Error Investigation "
                },
                {
                  "DatabaseName": "TD_SERVER_DB",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSSPATIAL",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SystemFe",
                  "DBType": "User",
                  "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
                },
                {
                  "DatabaseName": "TDaaS_TDBCMgmt1",
                  "DBType": "User",
                  "CommentString": "As-A-Service : POG/COG router management user"
                },
                {
                  "DatabaseName": "TDaaS_Maint",
                  "DBType": "User",
                  "CommentString": "As-A-Service Maintenance : Patching and Configuration "
                },
                {
                  "DatabaseName": "SysAdmin",
                  "DBType": "User",
                  "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
                },
                {
                  "DatabaseName": "Crashdumps",
                  "DBType": "User",
                  "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
                },
                {
                  "DatabaseName": "fitness_db",
                  "DBType": "DataBase",
                  "CommentString": "None"
                },
                {
                  "DatabaseName": "SYSUIF",
                  "DBType": "DataBase",
                  "CommentString": "None"
                }
              ]
            }
          ],
          "result_of_phase_2": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_readQuery",
                "sql": "SELECT databasename FROM DBC.DatabasesV WHERE databasename LIKE '%fitness%';",
                "columns": [
                  {
                    "name": "DatabaseName",
                    "type": "str"
                  }
                ],
                "row_count": 1
              },
              "results": [
                {
                  "DatabaseName": "fitness_db"
                }
              ]
            }
          ],
          "result_of_phase_3": [
            {
              "status": "success",
              "results": [
                {
                  "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
                }
              ]
            }
          ]
        }
      }
    },
    "result": {
      "status": "success",
      "results": [
        {
          "response": "Key Metric: {\"value\": \"Yes\", \"label\": \"Fitness database exists\"}\nYes, there is a fitness database on the system.\n\n## Key Observations\n*   The query to the DBC.DatabasesV table filtered for database names containing 'fitness' was successful.\n*   The database 'fitness_db' was found to match the search criteria.\n*   The system contains at least one database related to fitness."
        }
      ]
    }
  }
]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of tables in the fitness_db database.",
    "relevant_tools": [
      "base_tableList"
    ],
    "arguments": {
      "database_name": "fitness_db"
    }
  },
  {
    "phase": 2,
    "goal": "Summarize the contents of the fitness_db database.",
    "relevant_tools": [
      "CoreLLMTask"
    ],
    "arguments": {
      "task_description": "what's in fitness_db?",
      "source_data": [
        "result_of_phase_1"
      ]
    }
  }
]
```
[user]: SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'what's in fitness_db?'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---

You are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.

--- INSTRUCTIONS ---
Your entire response MUST be formatted in standard markdown and MUST be structured as follows:

1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).
    - Quantitative Example: `Key Metric: {"value": "21", "label": "Databases on system"}`
    - Qualitative Example: `Key Metric: {"value": "High", "label": "System Utilization"}`
    If there is no single primary value, you MUST omit this line entirely.
2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.
3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.
4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.


--- RELEVANT DATA (Selected from Previous Phases) ---
{
  "result_of_phase_1": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableList",
        "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
        "columns": [
          {
            "name": "TableName",
            "type": "str"
          }
        ],
        "row_count": 5
      },
      "results": [
        {
          "TableName": "Sales"
        },
        {
          "TableName": "SaleDetails"
        },
        {
          "TableName": "Products"
        },
        {
          "TableName": "ServiceTickets"
        },
        {
          "TableName": "Customers"
        }
      ]
    }
  ]
}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
None

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.
[model]: The fitness_db database contains the following tables: Sales, SaleDetails, Products, ServiceTickets, and Customers.

## Key Observations

*   The database includes tables likely related to sales operations (Sales, SaleDetails, Products), customer management (Customers), and service management (ServiceTickets).
*   The presence of these tables suggests the database is designed to track sales, customer interactions, and service-related activities within a fitness-related business.

[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Testing ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `what is the business description of Products?`
-   Explicit Parameters: 
-   User's Original Input: `what is the business description of Products?`
-   Workflow History: `[
  {
    "action": {
      "tool_name": "base_tableList",
      "arguments": {
        "database_name": "fitness_db"
      }
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableList",
        "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
        "columns": [
          {
            "name": "TableName",
            "type": "str"
          }
        ],
        "row_count": 5
      },
      "results": [
        {
          "TableName": "Sales"
        },
        {
          "TableName": "SaleDetails"
        },
        {
          "TableName": "Products"
        },
        {
          "TableName": "ServiceTickets"
        },
        {
          "TableName": "Customers"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "CoreLLMTask",
      "arguments": {
        "task_description": "\nYou are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.\n\n--- INSTRUCTIONS ---\nYour entire response MUST be formatted in standard markdown and MUST be structured as follows:\n\n1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).\n    - Quantitative Example: `Key Metric: {\"value\": \"21\", \"label\": \"Databases on system\"}`\n    - Qualitative Example: `Key Metric: {\"value\": \"High\", \"label\": \"System Utilization\"}`\n    If there is no single primary value, you MUST omit this line entirely.\n2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.\n3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.\n4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.\n",
        "source_data": [
          "result_of_phase_1"
        ],
        "user_question": "what's in fitness_db?",
        "data": {
          "result_of_phase_1": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_tableList",
                "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
                "columns": [
                  {
                    "name": "TableName",
                    "type": "str"
                  }
                ],
                "row_count": 5
              },
              "results": [
                {
                  "TableName": "Sales"
                },
                {
                  "TableName": "SaleDetails"
                },
                {
                  "TableName": "Products"
                },
                {
                  "TableName": "ServiceTickets"
                },
                {
                  "TableName": "Customers"
                }
              ]
            }
          ],
          "result_of_phase_2": [
            {
              "status": "success",
              "results": [
                {
                  "response": "The fitness_db database contains the following tables: Sales, SaleDetails, Products, ServiceTickets, and Customers.\n\n## Key Observations\n\n*   The database includes tables likely related to sales operations (Sales, SaleDetails, Products), customer management (Customers), and service management (ServiceTickets).\n*   The presence of these tables suggests the database is designed to track sales, customer interactions, and service-related activities within a fitness-related business."
                }
              ]
            }
          ]
        }
      }
    },
    "result": {
      "status": "success",
      "results": [
        {
          "response": "The fitness_db database contains the following tables: Sales, SaleDetails, Products, ServiceTickets, and Customers.\n\n## Key Observations\n\n*   The database includes tables likely related to sales operations (Sales, SaleDetails, Products), customer management (Customers), and service management (ServiceTickets).\n*   The presence of these tables suggests the database is designed to track sales, customer interactions, and service-related activities within a fitness-related business."
        }
      ]
    }
  }
]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `what is the business description of Products?`
-   Explicit Parameters: 
-   User's Original Input: `what is the business description of Products?`
-   Workflow History: `[
  {
    "action": {
      "tool_name": "base_tableList",
      "arguments": {
        "database_name": "fitness_db"
      }
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableList",
        "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
        "columns": [
          {
            "name": "TableName",
            "type": "str"
          }
        ],
        "row_count": 5
      },
      "results": [
        {
          "TableName": "Sales"
        },
        {
          "TableName": "SaleDetails"
        },
        {
          "TableName": "Products"
        },
        {
          "TableName": "ServiceTickets"
        },
        {
          "TableName": "Customers"
        }
      ]
    }
  },
  {
    "action": {
      "tool_name": "CoreLLMTask",
      "arguments": {
        "task_description": "\nYou are an expert data analyst. Your task is to create a final report for the user based on the provided data and their original question.\n\n--- INSTRUCTIONS ---\nYour entire response MUST be formatted in standard markdown and MUST be structured as follows:\n\n1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).\n    - Quantitative Example: `Key Metric: {\"value\": \"21\", \"label\": \"Databases on system\"}`\n    - Qualitative Example: `Key Metric: {\"value\": \"High\", \"label\": \"System Utilization\"}`\n    If there is no single primary value, you MUST omit this line entirely.\n2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.\n3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.\n4.  **CRITICAL RULE (Observations Content):** The 'Key Observations' section is for **textual insights only**. You **MUST NOT** include raw data, code blocks (like SQL), or titles for data that is presented elsewhere (e.g., 'DDL for table_x:'). Your observations should be narrative sentences that describe what the data means.\n",
        "source_data": [
          "result_of_phase_1"
        ],
        "user_question": "what's in fitness_db?",
        "data": {
          "result_of_phase_1": [
            {
              "status": "success",
              "metadata": {
                "tool_name": "base_tableList",
                "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
                "columns": [
                  {
                    "name": "TableName",
                    "type": "str"
                  }
                ],
                "row_count": 5
              },
              "results": [
                {
                  "TableName": "Sales"
                },
                {
                  "TableName": "SaleDetails"
                },
                {
                  "TableName": "Products"
                },
                {
                  "TableName": "ServiceTickets"
                },
                {
                  "TableName": "Customers"
                }
              ]
            }
          ],
          "result_of_phase_2": [
            {
              "status": "success",
              "results": [
                {
                  "response": "The fitness_db database contains the following tables: Sales, SaleDetails, Products, ServiceTickets, and Customers.\n\n## Key Observations\n\n*   The database includes tables likely related to sales operations (Sales, SaleDetails, Products), customer management (Customers), and service management (ServiceTickets).\n*   The presence of these tables suggests the database is designed to track sales, customer interactions, and service-related activities within a fitness-related business."
                }
              ]
            }
          ]
        }
      }
    },
    "result": {
      "status": "success",
      "results": [
        {
          "response": "The fitness_db database contains the following tables: Sales, SaleDetails, Products, ServiceTickets, and Customers.\n\n## Key Observations\n\n*   The database includes tables likely related to sales operations (Sales, SaleDetails, Products), customer management (Customers), and service management (ServiceTickets).\n*   The presence of these tables suggests the database is designed to track sales, customer interactions, and service-related activities within a fitness-related business."
        }
      ]
    }
  }
]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get the business description of the Products table in the fitness_db database.",
    "relevant_tools": [
      "base_tableBusinessDesc"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "Products"
    }
  }
]
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
--- Category: Database Space ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Sales ---
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: User Management ---
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `cust_activeUsers` (tool): Fetch currently active database users
--- Category: Utilities ---
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Category: Visualization ---
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Query ---
- `base_teradata_query` (prompt): A Teradata SQL expert that solves the hardest problems understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.
--- Category: RAG ---
- `rag_guidelines` (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode.
--- Category: Sales ---
- `sales_prompt` (prompt): my prompt description
--- Category: Table Management ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
--- Category: User Management ---
- `cust_promptExample` (prompt): my prompt description


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.



1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `You are a Teradata DBA who is an expert in describing the business use of tables in a database.

## your role will work through the phases
Perform the phases in order, and do not skip any phase.

## Phase 0 - Get the table name and database name
- The table name is Products
- The database name is fitness_db

## Phase 1 - Get the table DDL
- Get the table DDL from the user. The DDL should be a single string, and it should not contain any new lines or special characters. Use the base_tableDDL tool to get the DDL.

## Phase 2 - Describe the table
- Describe the table in a business context. The description should be a single string. 
- The description should include the following: 
    - The purpose of the table
    - The purpose of the columns in the table

## Communication guidelines:
      - Be concise but informative in your explanations
      - Clearly indicate which phase the process is currently in
      - summarize the outcome of the phase before moving to the next phase

## Final output guidelines:
      - return in markdown
      - Example:
      ***Table Name:*** `table_name`

      ***Database Name:*** `database_name`

      ***Description:*** `table_description`

         - ***Column1:*** `column1_descriptions`
         - ***Column2:*** `column2_descriptions`
         - ***Column3:*** `column3_descriptions`
`
-   Explicit Parameters: 
--- EXPLICIT PARAMETERS ---
The following parameters were explicitly provided for this prompt execution:
- database_name: "fitness_db"
- table_name: "Products"

-   User's Original Input: `Get the business description of the Products table in the fitness_db database.`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `1`. Avoid creating identical plans.

- Active Prompt: You are currently executing the 'base_tableBusinessDesc' prompt. Do not call it again.

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `You are a Teradata DBA who is an expert in describing the business use of tables in a database.

## your role will work through the phases
Perform the phases in order, and do not skip any phase.

## Phase 0 - Get the table name and database name
- The table name is Products
- The database name is fitness_db

## Phase 1 - Get the table DDL
- Get the table DDL from the user. The DDL should be a single string, and it should not contain any new lines or special characters. Use the base_tableDDL tool to get the DDL.

## Phase 2 - Describe the table
- Describe the table in a business context. The description should be a single string. 
- The description should include the following: 
    - The purpose of the table
    - The purpose of the columns in the table

## Communication guidelines:
      - Be concise but informative in your explanations
      - Clearly indicate which phase the process is currently in
      - summarize the outcome of the phase before moving to the next phase

## Final output guidelines:
      - return in markdown
      - Example:
      ***Table Name:*** `table_name`

      ***Database Name:*** `database_name`

      ***Description:*** `table_description`

         - ***Column1:*** `column1_descriptions`
         - ***Column2:*** `column2_descriptions`
         - ***Column3:*** `column3_descriptions`
`
-   Explicit Parameters: 
--- EXPLICIT PARAMETERS ---
The following parameters were explicitly provided for this prompt execution:
- database_name: "fitness_db"
- table_name: "Products"

-   User's Original Input: `Get the business description of the Products table in the fitness_db database.`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `1`. Avoid creating identical plans.

- Active Prompt: You are currently executing the 'base_tableBusinessDesc' prompt. Do not call it again.

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get the DDL of the Products table in the fitness_db database.",
    "relevant_tools": [
      "base_tableDDL"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "Products"
    }
  },
  {
    "phase": 2,
    "goal": "Describe the business use of the Products table based on its DDL.",
    "relevant_tools": [
      "CoreLLMTask"
    ],
    "arguments": {
      "task_description": "You are a Teradata DBA who is an expert in describing the business use of tables in a database.\n\n## your role will work through the phases\nPerform the phases in order, and do not skip any phase.\n\n## Phase 0 - Get the table name and database name\n- The table name is Products\n- The database name is fitness_db\n\n## Phase 1 - Get the table DDL\n- Get the table DDL from the user. The DDL should be a single string, and it should not contain any new lines or special characters. Use the base_tableDDL tool to get the DDL.\n\n## Phase 2 - Describe the table\n- Describe the table in a business context. The description should be a single string. \n- The description should include the following: \n    - The purpose of the table\n    - The purpose of the columns in the table\n\n## Communication guidelines:\n      - Be concise but informative in your explanations\n      - Clearly indicate which phase the process is currently in\n      - summarize the outcome of the phase before moving to the next phase\n\n## Final output guidelines:\n      - return in markdown\n      - Example:\n      ***Table Name:*** `table_name`\n\n      ***Database Name:*** `database_name`\n\n      ***Description:*** `table_description`\n\n         - ***Column1:*** `column1_descriptions`\n         - ***Column2:*** `column2_descriptions`\n         - ***Column3:*** `column3_descriptions`\n",
      "source_data": [
        "result_of_phase_1"
      ]
    }
  }
]
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'Get the business description of the Products table in the fitness_db database.'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---
You are a Teradata DBA who is an expert in describing the business use of tables in a database.

## your role will work through the phases
Perform the phases in order, and do not skip any phase.

## Phase 0 - Get the table name and database name
- The table name is Products
- The database name is fitness_db

## Phase 1 - Get the table DDL
- Get the table DDL from the user. The DDL should be a single string, and it should not contain any new lines or special characters. Use the base_tableDDL tool to get the DDL.

## Phase 2 - Describe the table
- Describe the table in a business context. The description should be a single string. 
- The description should include the following: 
    - The purpose of the table
    - The purpose of the columns in the table

## Communication guidelines:
      - Be concise but informative in your explanations
      - Clearly indicate which phase the process is currently in
      - summarize the outcome of the phase before moving to the next phase

## Final output guidelines:
      - return in markdown
      - Example:
      ***Table Name:*** `table_name`

      ***Database Name:*** `database_name`

      ***Description:*** `table_description`

         - ***Column1:*** `column1_descriptions`
         - ***Column2:*** `column2_descriptions`
         - ***Column3:*** `column3_descriptions`


--- RELEVANT DATA (Selected from Previous Phases) ---
{
  "result_of_phase_1": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableDDL",
        "database": "fitness_db",
        "table": "fitness_db.Products",
        "rows": 1
      },
      "results": [
        {
          "Request Text": "CREATE MULTISET TABLE fitness_db.Products ,FALLBACK ,\r     NO BEFORE JOURNAL,\r     NO AFTER JOURNAL,\r     CHECKSUM = DEFAULT,\r     DEFAULT MERGEBLOCKRATIO,\r     MAP = TD_MAP1\r     (\r      ProductID INTEGER NOT NULL,\r      ProductName VARCHAR(100) CHARACTER SET LATIN NOT CASESPECIFIC NOT NULL,\r      ProductType VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC,\r      Brand VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC,\r      Price DECIMAL(10,2) NOT NULL,\r      StockQuantity INTEGER)\rUNIQUE PRIMARY INDEX ( ProductID );"
        }
      ]
    }
  ]
}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
- database_name: fitness_db
- table_name: fitness_db.Products

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.

