2025-09-29 17:25:06,425 - --- FULL CONTEXT (Session: one-off) ---
--- REASON FOR CALL ---
No reason provided.

--- History (History Disabled for LLM Call: False) ---
No history available.

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:
You are an expert assistant that only responds with valid JSON.

USER PROMPT:
You are a helpful assistant that analyzes a list of technical capabilities (tools and prompts) and classifies them. For each capability, you must determine a single user-friendly 'category' for a UI. Example categories might be 'Data Quality', 'Table Management', 'Performance', 'Utilities', 'Database Information', etc. Be concise and consistent.

Your response MUST be a single, valid JSON object. The keys of this object must be the capability names, and the value for each key must be another JSON object containing only the 'category' you determined.

Example format:
{
  "capability_name_1": {"category": "Some Category"},
  "capability_name_2": {"category": "Another Category"}
}

--- Capability List ---
- sec_rolePermissions (tool): Get permissions for a role.
- sec_userDbPermissions (tool): Get permissions for a user.
- sec_userRoles (tool): Get roles assigned to a user.
- qlty_columnSummary (tool): Get the column summary statistics for a table.
- qlty_distinctCategories (tool): Get the destinct categories from column in a table.
- qlty_missingValues (tool): Get the column names that having missing values in a table.
- qlty_negativeValues (tool): Get the column names that having negative values in a table.
- qlty_rowsWithMissingValues (tool): Get the rows with missing values in a table.
- qlty_standardDeviation (tool): Get the standard deviation from column in a table.
- qlty_univariateStatistics (tool): Get the univariate statistics for a table.
- rag_executeWorkflow (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
- rag_executeWorkflow_ivsm (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
- tmpl_nameOfTool (tool): <description of what the tool is for>
- base_columnDescription (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
- base_databaseList (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- base_readQuery (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
- base_tableAffinity (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
- base_tableDDL (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
- base_tableList (tool): Lists all tables in a database.
- base_tablePreview (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
- base_tableUsage (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
- dba_databaseSpace (tool): Get database space if database name is provided, otherwise get all databases space allocations.
- dba_resusageSummary (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
- dba_tableSpace (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
- dba_tableSqlList (tool): Get a list of SQL run against a table in the last number of days.
- dba_tableUsageImpact (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
- dba_userSqlList (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
- sales_top_customers (tool): Get the top 20 customers by lifetime value.
- sales_customer_profile (tool): Get customer profile and metrics.
- get_cube_sales_cube (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
- cust_activeUsers (tool): Fetch currently active database users
- cust_td_serverInfo (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
- get_cube_cust_cube_db_space_metrics (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
- dba_databaseVersion (tool):  Get Teradata database version information.
- dba_flowControl (tool): Get the Teradata flow control metrics for a specified date range.
- dba_featureUsage (tool): Get the user feature usage metrics for a specified date range.
- dba_userDelay (tool): Get the Teradata user delay metrics for a specified date range.
- dba_sessionInfo (tool): Get the Teradata session information for user.
- dba_systemSpace (tool): Get the Teradata total system database space usage.
- TDA_Charting (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
- TDA_CurrentDate (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- TDA_DateRange (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
- TDA_LLMFilter (tool): A specialized internal tool that filters a list of items based on a natural language goal and extracts a single, clean value. This is used as an intermediate step to pass a specific, machine-readable value from one tool to another.
- TDA_LLMTask (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
- TDA_ContextReport (tool): The History First Shortcut. This tool MUST be used for a single-phase plan if, and only if, the user's question can be answered entirely from the existing Workflow History. It bypasses all data gathering. Do NOT use this tool if you need to gather new data.
- TDA_FinalReport (tool): The Data Summarization Tool. This tool MUST be the final phase of a multi-step plan to synthesize the results from all previous data-gathering phases into a final report. Do NOT use this tool in a single-phase plan or as a first step.
- TDA_ComplexPromptReport (tool): A special internal tool used to format and deliver the final, structured report for a pre-defined UI prompt. This tool MUST be called when all data gathering phases for the prompt are complete.
- sales_prompt (prompt): my prompt description
- cust_promptExample (prompt): my prompt description
- dba_tableArchive (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data. (prompt_type: reporting)
- dba_databaseLineage (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database. (prompt_type: context)
  - Arguments:
    - `database_name`
    - `number_days`
- dba_tableDropImpact (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table. (prompt_type: reporting)
  - Arguments:
    - `table_name`
    - `database_name`
    - `number_days`
- dba_databaseHealthAssessment (prompt): You are a Teradata DBA who is an expert in assessing the health of a database. (prompt_type: reporting)
- dba_userActivityAnalysis (prompt): Analyze Teradata user activity patterns for the past 7 days (prompt_type: reporting)
- dba_systemVoice (prompt): Analyze Teradata user activity patterns for the past 7 days (prompt_type: reporting)
- rag_guidelines (prompt): Guidelines for Retrieval-Augmented Generation (RAG) mode. (prompt_type: context)
- qlty_databaseQuality (prompt): Database data quality assessment. (prompt_type: reporting)
  - Arguments:
    - `database_name`
- _testMyServer (prompt): Test all the MCP tools, prompts and resources. (prompt_type: reporting)
  - Arguments:
    - `domain`
- base_teradataQuery (prompt): A Teradata SQL expert that effectively solves problems understanding teradata specific SQL syntax.
  - Arguments:
    - `query`
- base_query (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query`
- base_tableBusinessDesc (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name`
    - `table_name`
- base_databaseBusinessDesc (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name`
- get_glossary (resource): List all glossary terms.
- get_glossary_definitions (resource): Returns all glossary terms with definitions.

2025-09-29 17:25:06,559 - --- ERROR in LLM call ---
An error occurred (ResourceNotFoundException) when calling the InvokeModel operation: Model not found.
--------------------------------------------------

