2025-09-10 12:37:53,769 - --- FULL CONTEXT (Session: 498b1301-76c1-44c3-a70d-ab7d4a45bd23) ---
--- REASON FOR CALL ---
Generating a strategic meta-plan for the goal: 'is there a fitness database on the system and if so, what are the table names of the fitness databas'

--- History (History Disabled for LLM Call: False) ---
[user]: You are a helpful assistant.
[model]: Understood.

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool or prompt call.

-   If the capability is a prompt, you MUST use the key `"prompt_name"`.
-   If the capability is a tool, you MUST use the key `"tool_name"`.
-   Provide all required arguments. Infer values from the conversation history if necessary.
-   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
-   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `TDA_CurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, you should politely explain that you cannot fulfill the request and restate your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so.


# Capabilities
--- Available Tools ---
--- Category: Auditing ---
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `sql_Analyze_Cluster_Stats` (tool): 
**ANALYZE SQL QUERY CLUSTER PERFORMANCE STATISTICS**

This tool analyzes pre-computed cluster statistics to identify optimization opportunities without re-running the clustering pipeline. Perfect for iterative analysis and decision-making on which query clusters to focus optimization efforts.

**ANALYSIS CAPABILITIES:**
- **Performance Ranking**: Sort clusters by any performance metric to identify top resource consumers
- **Resource Impact Assessment**: Compare clusters by CPU usage, I/O volume, and execution complexity
- **Skew Problem Detection**: Identify clusters with CPU or I/O distribution issues
- **Workload Characterization**: Understand query patterns by user, application, and workload type
- **Optimization Prioritization**: Focus on clusters with highest impact potential

**AVAILABLE SORTING METRICS:**
- **avg_cpu**: Average CPU seconds per cluster (primary optimization target)
- **avg_io**: Average logical I/O operations (scan intensity indicator)
- **avg_cpuskw**: Average CPU skew (distribution problem indicator)
- **avg_ioskw**: Average I/O skew (hot spot indicator)
- **avg_pji**: Average Physical-to-Logical I/O ratio (compute intensity)
- **avg_uii**: Average Unit I/O Intensity (I/O efficiency)
- **avg_numsteps**: Average query plan complexity
- **queries**: Number of queries in cluster (frequency indicator)
- **cluster_silhouette_score**: Clustering quality measure

**PERFORMANCE CATEGORIZATION:**
Automatically categorizes clusters using configurable thresholds (from sql_opt_config.yml):
- **HIGH_CPU_USAGE**: Average CPU > config.performance_thresholds.cpu.high
- **HIGH_IO_USAGE**: Average I/O > config.performance_thresholds.io.high
- **HIGH_CPU_SKEW**: CPU skew > config.performance_thresholds.skew.high
- **HIGH_IO_SKEW**: I/O skew > config.performance_thresholds.skew.high
- **NORMAL**: Clusters within configured normal performance ranges

**TYPICAL ANALYSIS WORKFLOW:**
1. Sort by 'avg_cpu' or 'avg_io' to find highest resource consumers
2. Sort by 'avg_cpuskw' or 'avg_ioskw' to find distribution problems
4. Use limit_results to focus on top problematic clusters

**OPTIMIZATION DECISION FRAMEWORK:**
- **High CPU + High Query Count**: Maximum impact optimization candidates
- **High Skew + Moderate CPU**: Distribution/statistics problems
- **High I/O + Low PJI**: Potential indexing opportunities
- **High NumSteps**: Complex query rewriting candidates

**OUTPUT FORMAT:**
Returns detailed cluster statistics with performance rankings, categories, and metadata for LLM analysis and optimization recommendations.

  - Arguments:
    - `sort_by_metric` (string, optional): Sort By Metric
    - `limit_results` (integer, optional): Limit Results
- `sql_Execute_Full_Pipeline` (tool): 
**COMPLETE SQL QUERY CLUSTERING PIPELINE FOR HIGH-USAGE QUERY OPTIMIZATION**

This tool executes the entire SQL query clustering workflow to identify and analyze high CPU usage queries for optimization opportunities. It's designed for database performance analysts and DBAs who need to systematically identify query optimization candidates.

**FULL PIPELINE WORKFLOW:**
1. **Query Log Extraction**: Extracts SQL queries from DBC.DBQLSqlTbl with comprehensive performance metrics
2. **Performance Metrics Calculation**: Computes CPU skew, I/O skew, PJI (Physical to Logical I/O ratio), UII (Unit I/O Intensity)
3. **Query Tokenization**: Tokenizes SQL text using {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')} tokenizer via ivsm.tokenizer_encode
4. **Embedding Generation**: Creates semantic embeddings using ivsm.IVSM_score with ONNX models
5. **Vector Store Creation**: Converts embeddings to vector columns via ivsm.vector_to_columns
6. **K-Means Clustering**: Groups similar queries using TD_KMeans with optimal K from configuration
7. **Silhouette Analysis**: Calculates clustering quality scores using TD_Silhouette
8. **Statistics Generation**: Creates comprehensive cluster statistics with performance aggregations

**PERFORMANCE METRICS EXPLAINED:**
- **AMPCPUTIME**: Total CPU seconds across all AMPs (primary optimization target)
- **CPUSKW/IOSKW**: CPU/I/O skew ratios (>2.0 indicates distribution problems)
- **PJI**: Physical-to-Logical I/O ratio (higher = more CPU-intensive)
- **UII**: Unit I/O Intensity (higher = more I/O-intensive relative to CPU)
- **LogicalIO**: Total logical I/O operations (indicates scan intensity)
- **NumSteps**: Query plan complexity (higher = more complex plans)

**CONFIGURATION (from sql_opt_config.yml):**
- Uses top {default_max_queries} queries by CPU time (configurable)
- Creates {default_optimal_k} clusters by default (configurable via optimal_k parameter)
- Embedding model: {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')}
- Vector dimensions: {sql_clustering_config.get('embedding', {}).get('vector_length', 384)}
- All database and table names are configurable

**OPTIMIZATION WORKFLOW:**
After running this tool, use:
1. sql_Analyze_Cluster_Stats to identify problematic clusters
2. sql_Retrieve_Cluster_Queries to get actual SQL from target clusters
3. LLM analysis to identify patterns and propose specific optimizations

**USE CASES:**
- Identify query families consuming the most system resources
- Find queries with similar patterns but different performance
- Discover optimization opportunities through clustering analysis
- Prioritize DBA effort on highest-impact query improvements
- Understand workload composition and resource distribution

**PREREQUISITES:**
- DBC.DBQLSqlTbl and DBC.DBQLOgTbl must be accessible
- Embedding models and tokenizers must be installed in feature_ext_db
- Sufficient space in feature_ext_db for intermediate and final tables

  - Arguments:
    - `optimal_k` (integer, optional): Optimal K
    - `max_queries` (integer, optional): Max Queries
- `sql_Retrieve_Cluster_Queries` (tool): 
**RETRIEVE ACTUAL SQL QUERIES FROM SPECIFIC CLUSTERS FOR PATTERN ANALYSIS**

This tool extracts the actual SQL query text and performance metrics from selected clusters, enabling detailed pattern analysis and specific optimization recommendations. Essential for moving from cluster-level analysis to actual query optimization.

**DETAILED ANALYSIS CAPABILITIES:**
- **SQL Pattern Recognition**: Analyze actual query structures, joins, predicates, and functions
- **Performance Correlation**: Connect query patterns to specific performance characteristics
- **Optimization Identification**: Identify common anti-patterns, missing indexes, inefficient joins
- **Code Quality Assessment**: Evaluate query construction, complexity, and best practices
- **Workload Understanding**: See actual business logic and data access patterns

**QUERY SELECTION STRATEGIES:**
- **By CPU Impact**: Sort by 'ampcputime' to focus on highest CPU consumers
- **By I/O Volume**: Sort by 'logicalio' to find scan-intensive queries
- **By Skew Problems**: Sort by 'cpuskw' or 'ioskw' for distribution issues
- **By Complexity**: Sort by 'numsteps' for complex execution plans
- **By Response Time**: Sort by 'response_secs' for user experience impact

**AVAILABLE METRICS FOR SORTING:**
- **ampcputime**: Total CPU seconds (primary optimization target)
- **logicalio**: Total logical I/O operations (scan indicator)
- **cpuskw**: CPU skew ratio (distribution problems)
- **ioskw**: I/O skew ratio (hot spot indicators)
- **pji**: Physical-to-Logical I/O ratio (compute intensity)
- **uii**: Unit I/O Intensity (I/O efficiency)
- **numsteps**: Query execution plan steps (complexity)
- **response_secs**: Wall-clock execution time (user impact)
- **delaytime**: Time spent in queue (concurrency issues)

**AUTOMATIC PERFORMANCE CATEGORIZATION:**
Each query is categorized using configurable thresholds (from sql_opt_config.yml):
- **CPU Categories**: VERY_HIGH_CPU (>config.very_high), HIGH_CPU (>config.high), MEDIUM_CPU (>10s), LOW_CPU
- **CPU Skew**: SEVERE_CPU_SKEW (>config.severe), HIGH_CPU_SKEW (>config.high), MODERATE_CPU_SKEW (>config.moderate), NORMAL
- **I/O Skew**: SEVERE_IO_SKEW (>config.severe), HIGH_IO_SKEW (>config.high), MODERATE_IO_SKEW (>config.moderate), NORMAL

Use thresholds set in config file for, CPU - high, very_high, Skew moderate, high, severe

**TYPICAL OPTIMIZATION WORKFLOW:**
1. Start with clusters identified from sql_Analyze_Cluster_Stats
2. Retrieve top queries by impact metric (usually 'ampcputime')
3. Analyze SQL patterns for common issues:
   - Missing WHERE clauses or inefficient predicates
   - Cartesian products or missing JOIN conditions
   - Inefficient GROUP BY or ORDER BY operations
   - Suboptimal table access patterns
   - Missing or outdated statistics
4. Develop specific optimization recommendations

**QUERY LIMIT STRATEGY:**
- Use the query limit set in config file for  pattern recognition and analysis, unless user specifies a different limit

**OUTPUT INCLUDES:**
- Complete SQL query text for each query
- All performance metrics, user, application, and workload context, cluster membership and rankings
- Performance categories for quick filtering        

  - Arguments:
    - `cluster_ids` (array, required): Cluster Ids
    - `metric` (string, optional): Metric
    - `limit_per_cluster` (integer, optional): Limit Per Cluster
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_Execute_Workflow` (tool): 
Execute complete RAG workflow to answer user questions based on document context.
This tool handles the entire RAG pipeline in a single step when a user query is tagged with /rag.

WORKFLOW STEPS (executed automatically):
1. Configuration setup using configurable values from rag_config.yml
2. Store user query with '/rag ' prefix stripping  
3. Generate query embeddings using either BYOM (ONNXEmbeddings) or IVSM functions based on config
4. Perform semantic search against precomputed chunk embeddings
5. Return context chunks for answer generation

CONFIGURATION VALUES (from rag_config.yml):
- version: 'ivsm' or 'byom' to select embedding approach
- All database names, table names, and model settings are configurable
- Vector store metadata fields are dynamically detected
- Embedding parameters are configurable
- Default chunk retrieval count is configurable
- Default values are provided as fallback

TECHNICAL DETAILS:
- Strips the '/rag ' prefix if present from user questions
- Creates query table if it does not exist (columns: id, txt, created_ts)
- BYOM approach: Uses mldb.ONNXEmbeddings UDF for tokenization and embedding
- IVSM approach: Uses ivsm.tokenizer_encode and ivsm.IVSM_score functions
- Both approaches store embeddings in configured output table
- Uses cosine similarity via TD_VECTORDISTANCE for semantic search
- Returns the top-k matching chunks from the configured vector store
- Each result includes chunk text, similarity score, and metadata fields

CRITICAL ANSWERING RULES:
- Answer ONLY using retrieved chunks - no external knowledge, speculation, or inference
- Quote source content directly without paraphrasing, summarizing, or rewriting
- If no relevant context found: "Not enough information found in the provided context"
- If partial context: "The available context does not fully answer the question"
- Include document/page references when available (e.g., "On page 2 of 'demo_policy.pdf'...")
- Execute entire workflow silently without showing function calls to user - only show final answer

LANGUAGE RESTRICTIONS:
- Do not say "According to the context" or "The context says" - just quote directly
- Do not say "It can be inferred that..." - no inference allowed
- Use exact or near-verbatim quotes only
- No paraphrasing, summarizing, or adding transitions between quotes
- Copy content precisely - no expansion or interpretation

BEHAVIORAL REQUIREMENTS:
- Execute all RAG workflow steps silently without showing tool calls to users
- Only display final answers based strictly on retrieved context chunks
- Do not use external knowledge or speculation - only quote retrieved content directly
- RAG mode only triggers with explicit /rag prefix - do not enter RAG mode implicitly
- Hide all tool execution steps from user
- Provide clean, direct response with only the answer based on retrieved chunks
- This is a complete end-to-end RAG workflow - no additional tools needed

EXECUTION: Run completely silently - user only sees their question and the final context-grounded answer.

  - Arguments:
    - `question` (string, required): Question
    - `k` (integer, optional): K
- `TDA_Charting` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `TDA_CurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `TDA_DateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `TDA_CurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `TDA_LLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
- `TDA_FinalReport` (tool): A special internal tool used to format and deliver the final, structured report to the user. This tool MUST be called when you have gathered all necessary information to answer the user's request.
  - Arguments:
    - `direct_answer` (string, required): A direct and concise sentence that factually answers the user's primary question.
    - `key_metric` (dict, optional): The optional, single primary metric summarizing the response.
    - `key_observations` (list[dict], optional): A list of supporting details, findings, and contextual insights.
--- Available Prompts ---
--- Category: Auditing ---
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Information ---
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Performance ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
--- Category: Table Management ---
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
--- Category: Utilities ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
- `base_teradata_query` (prompt): A Teradata SQL expert that executes SQL requests effectively, understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONSTRAINTS ---
You are explicitly forbidden from using the following capabilities in your plan under any circumstances:
- `sales_top_customers` (tool)
- `base_query` (prompt)




1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    **CRITICAL RULE (Grounding):** Your primary objective is to answer the user's `GOAL` using data from the available tools. You **MUST** prioritize using a data-gathering tool if the `Workflow History` does not contain a direct and complete answer to the user's `GOAL`.

2.  **CRITICAL RULE (Answer from History):** If the `Workflow History` contains enough information to fully answer the user's `GOAL`, your response **MUST be a single JSON object** for a one-phase plan. This plan **MUST** call the `TDA_LLMTask` tool. You **MUST** write the complete, final answer text inside the `synthesized_answer` argument within that tool call. **You are acting as a planner; DO NOT use the `FINAL_ANSWER:` format.**

3.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

4.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

5.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * **CRITICAL RULE (Final Reporting):** If the goal requires a final summary or analysis of previously gathered data, the plan **MUST** conclude with a single phase that calls the `TDA_FinalReport` tool. You **MUST NOT** provide any arguments for this tool. Its sole purpose is to signal that the final, LLM-driven summarization is now required.

6.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * Your plan **Must** combine mutiple SQL steps in to a single SQL call if possible.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

7.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

8.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

9.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Final Reporting)
- **User Goal**: "Summarize the errors in the 'DEMO_DB' database."
- **Correct Plan**:
  ```json
  [
    {
      "phase": 1,
      "goal": "Get a list of all tables in the 'DEMO_DB' database.",
      "relevant_tools": ["base_tableList"],
      "arguments": {"database_name": "DEMO_DB"}
    },
    {
      "phase": 2,
      "goal": "Loop over the tables and check for missing values in each one.",
      "type": "loop",
      "loop_over": "result_of_phase_1",
      "relevant_tools": ["qlty_missingValues"]
    },
    {
      "phase": 3,
      "goal": "Generate the final report based on the data gathered.",
      "relevant_tools": ["TDA_FinalReport"],
      "arguments": {}
    }
  ]
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system and if so, what are the table names of the fitness database??`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system and if so, what are the table names of the fitness database??`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.


2025-09-10 12:37:55,728 - --- FULL CONTEXT (Session: 498b1301-76c1-44c3-a70d-ab7d4a45bd23) ---
--- REASON FOR CALL ---
Generic self-correction for failed tool call: base_tableList

--- History (History Disabled for LLM Call: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool or prompt call.

-   If the capability is a prompt, you MUST use the key `"prompt_name"`.
-   If the capability is a tool, you MUST use the key `"tool_name"`.
-   Provide all required arguments. Infer values from the conversation history if necessary.
-   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
-   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `TDA_CurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, you should politely explain that you cannot fulfill the request and restate your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so.


# Capabilities
--- Available Tools ---
--- Category: Auditing ---
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `sql_Analyze_Cluster_Stats` (tool): 
**ANALYZE SQL QUERY CLUSTER PERFORMANCE STATISTICS**

This tool analyzes pre-computed cluster statistics to identify optimization opportunities without re-running the clustering pipeline. Perfect for iterative analysis and decision-making on which query clusters to focus optimization efforts.

**ANALYSIS CAPABILITIES:**
- **Performance Ranking**: Sort clusters by any performance metric to identify top resource consumers
- **Resource Impact Assessment**: Compare clusters by CPU usage, I/O volume, and execution complexity
- **Skew Problem Detection**: Identify clusters with CPU or I/O distribution issues
- **Workload Characterization**: Understand query patterns by user, application, and workload type
- **Optimization Prioritization**: Focus on clusters with highest impact potential

**AVAILABLE SORTING METRICS:**
- **avg_cpu**: Average CPU seconds per cluster (primary optimization target)
- **avg_io**: Average logical I/O operations (scan intensity indicator)
- **avg_cpuskw**: Average CPU skew (distribution problem indicator)
- **avg_ioskw**: Average I/O skew (hot spot indicator)
- **avg_pji**: Average Physical-to-Logical I/O ratio (compute intensity)
- **avg_uii**: Average Unit I/O Intensity (I/O efficiency)
- **avg_numsteps**: Average query plan complexity
- **queries**: Number of queries in cluster (frequency indicator)
- **cluster_silhouette_score**: Clustering quality measure

**PERFORMANCE CATEGORIZATION:**
Automatically categorizes clusters using configurable thresholds (from sql_opt_config.yml):
- **HIGH_CPU_USAGE**: Average CPU > config.performance_thresholds.cpu.high
- **HIGH_IO_USAGE**: Average I/O > config.performance_thresholds.io.high
- **HIGH_CPU_SKEW**: CPU skew > config.performance_thresholds.skew.high
- **HIGH_IO_SKEW**: I/O skew > config.performance_thresholds.skew.high
- **NORMAL**: Clusters within configured normal performance ranges

**TYPICAL ANALYSIS WORKFLOW:**
1. Sort by 'avg_cpu' or 'avg_io' to find highest resource consumers
2. Sort by 'avg_cpuskw' or 'avg_ioskw' to find distribution problems
4. Use limit_results to focus on top problematic clusters

**OPTIMIZATION DECISION FRAMEWORK:**
- **High CPU + High Query Count**: Maximum impact optimization candidates
- **High Skew + Moderate CPU**: Distribution/statistics problems
- **High I/O + Low PJI**: Potential indexing opportunities
- **High NumSteps**: Complex query rewriting candidates

**OUTPUT FORMAT:**
Returns detailed cluster statistics with performance rankings, categories, and metadata for LLM analysis and optimization recommendations.

  - Arguments:
    - `sort_by_metric` (string, optional): Sort By Metric
    - `limit_results` (integer, optional): Limit Results
- `sql_Execute_Full_Pipeline` (tool): 
**COMPLETE SQL QUERY CLUSTERING PIPELINE FOR HIGH-USAGE QUERY OPTIMIZATION**

This tool executes the entire SQL query clustering workflow to identify and analyze high CPU usage queries for optimization opportunities. It's designed for database performance analysts and DBAs who need to systematically identify query optimization candidates.

**FULL PIPELINE WORKFLOW:**
1. **Query Log Extraction**: Extracts SQL queries from DBC.DBQLSqlTbl with comprehensive performance metrics
2. **Performance Metrics Calculation**: Computes CPU skew, I/O skew, PJI (Physical to Logical I/O ratio), UII (Unit I/O Intensity)
3. **Query Tokenization**: Tokenizes SQL text using {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')} tokenizer via ivsm.tokenizer_encode
4. **Embedding Generation**: Creates semantic embeddings using ivsm.IVSM_score with ONNX models
5. **Vector Store Creation**: Converts embeddings to vector columns via ivsm.vector_to_columns
6. **K-Means Clustering**: Groups similar queries using TD_KMeans with optimal K from configuration
7. **Silhouette Analysis**: Calculates clustering quality scores using TD_Silhouette
8. **Statistics Generation**: Creates comprehensive cluster statistics with performance aggregations

**PERFORMANCE METRICS EXPLAINED:**
- **AMPCPUTIME**: Total CPU seconds across all AMPs (primary optimization target)
- **CPUSKW/IOSKW**: CPU/I/O skew ratios (>2.0 indicates distribution problems)
- **PJI**: Physical-to-Logical I/O ratio (higher = more CPU-intensive)
- **UII**: Unit I/O Intensity (higher = more I/O-intensive relative to CPU)
- **LogicalIO**: Total logical I/O operations (indicates scan intensity)
- **NumSteps**: Query plan complexity (higher = more complex plans)

**CONFIGURATION (from sql_opt_config.yml):**
- Uses top {default_max_queries} queries by CPU time (configurable)
- Creates {default_optimal_k} clusters by default (configurable via optimal_k parameter)
- Embedding model: {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')}
- Vector dimensions: {sql_clustering_config.get('embedding', {}).get('vector_length', 384)}
- All database and table names are configurable

**OPTIMIZATION WORKFLOW:**
After running this tool, use:
1. sql_Analyze_Cluster_Stats to identify problematic clusters
2. sql_Retrieve_Cluster_Queries to get actual SQL from target clusters
3. LLM analysis to identify patterns and propose specific optimizations

**USE CASES:**
- Identify query families consuming the most system resources
- Find queries with similar patterns but different performance
- Discover optimization opportunities through clustering analysis
- Prioritize DBA effort on highest-impact query improvements
- Understand workload composition and resource distribution

**PREREQUISITES:**
- DBC.DBQLSqlTbl and DBC.DBQLOgTbl must be accessible
- Embedding models and tokenizers must be installed in feature_ext_db
- Sufficient space in feature_ext_db for intermediate and final tables

  - Arguments:
    - `optimal_k` (integer, optional): Optimal K
    - `max_queries` (integer, optional): Max Queries
- `sql_Retrieve_Cluster_Queries` (tool): 
**RETRIEVE ACTUAL SQL QUERIES FROM SPECIFIC CLUSTERS FOR PATTERN ANALYSIS**

This tool extracts the actual SQL query text and performance metrics from selected clusters, enabling detailed pattern analysis and specific optimization recommendations. Essential for moving from cluster-level analysis to actual query optimization.

**DETAILED ANALYSIS CAPABILITIES:**
- **SQL Pattern Recognition**: Analyze actual query structures, joins, predicates, and functions
- **Performance Correlation**: Connect query patterns to specific performance characteristics
- **Optimization Identification**: Identify common anti-patterns, missing indexes, inefficient joins
- **Code Quality Assessment**: Evaluate query construction, complexity, and best practices
- **Workload Understanding**: See actual business logic and data access patterns

**QUERY SELECTION STRATEGIES:**
- **By CPU Impact**: Sort by 'ampcputime' to focus on highest CPU consumers
- **By I/O Volume**: Sort by 'logicalio' to find scan-intensive queries
- **By Skew Problems**: Sort by 'cpuskw' or 'ioskw' for distribution issues
- **By Complexity**: Sort by 'numsteps' for complex execution plans
- **By Response Time**: Sort by 'response_secs' for user experience impact

**AVAILABLE METRICS FOR SORTING:**
- **ampcputime**: Total CPU seconds (primary optimization target)
- **logicalio**: Total logical I/O operations (scan indicator)
- **cpuskw**: CPU skew ratio (distribution problems)
- **ioskw**: I/O skew ratio (hot spot indicators)
- **pji**: Physical-to-Logical I/O ratio (compute intensity)
- **uii**: Unit I/O Intensity (I/O efficiency)
- **numsteps**: Query execution plan steps (complexity)
- **response_secs**: Wall-clock execution time (user impact)
- **delaytime**: Time spent in queue (concurrency issues)

**AUTOMATIC PERFORMANCE CATEGORIZATION:**
Each query is categorized using configurable thresholds (from sql_opt_config.yml):
- **CPU Categories**: VERY_HIGH_CPU (>config.very_high), HIGH_CPU (>config.high), MEDIUM_CPU (>10s), LOW_CPU
- **CPU Skew**: SEVERE_CPU_SKEW (>config.severe), HIGH_CPU_SKEW (>config.high), MODERATE_CPU_SKEW (>config.moderate), NORMAL
- **I/O Skew**: SEVERE_IO_SKEW (>config.severe), HIGH_IO_SKEW (>config.high), MODERATE_IO_SKEW (>config.moderate), NORMAL

Use thresholds set in config file for, CPU - high, very_high, Skew moderate, high, severe

**TYPICAL OPTIMIZATION WORKFLOW:**
1. Start with clusters identified from sql_Analyze_Cluster_Stats
2. Retrieve top queries by impact metric (usually 'ampcputime')
3. Analyze SQL patterns for common issues:
   - Missing WHERE clauses or inefficient predicates
   - Cartesian products or missing JOIN conditions
   - Inefficient GROUP BY or ORDER BY operations
   - Suboptimal table access patterns
   - Missing or outdated statistics
4. Develop specific optimization recommendations

**QUERY LIMIT STRATEGY:**
- Use the query limit set in config file for  pattern recognition and analysis, unless user specifies a different limit

**OUTPUT INCLUDES:**
- Complete SQL query text for each query
- All performance metrics, user, application, and workload context, cluster membership and rankings
- Performance categories for quick filtering        

  - Arguments:
    - `cluster_ids` (array, required): Cluster Ids
    - `metric` (string, optional): Metric
    - `limit_per_cluster` (integer, optional): Limit Per Cluster
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_Execute_Workflow` (tool): 
Execute complete RAG workflow to answer user questions based on document context.
This tool handles the entire RAG pipeline in a single step when a user query is tagged with /rag.

WORKFLOW STEPS (executed automatically):
1. Configuration setup using configurable values from rag_config.yml
2. Store user query with '/rag ' prefix stripping  
3. Generate query embeddings using either BYOM (ONNXEmbeddings) or IVSM functions based on config
4. Perform semantic search against precomputed chunk embeddings
5. Return context chunks for answer generation

CONFIGURATION VALUES (from rag_config.yml):
- version: 'ivsm' or 'byom' to select embedding approach
- All database names, table names, and model settings are configurable
- Vector store metadata fields are dynamically detected
- Embedding parameters are configurable
- Default chunk retrieval count is configurable
- Default values are provided as fallback

TECHNICAL DETAILS:
- Strips the '/rag ' prefix if present from user questions
- Creates query table if it does not exist (columns: id, txt, created_ts)
- BYOM approach: Uses mldb.ONNXEmbeddings UDF for tokenization and embedding
- IVSM approach: Uses ivsm.tokenizer_encode and ivsm.IVSM_score functions
- Both approaches store embeddings in configured output table
- Uses cosine similarity via TD_VECTORDISTANCE for semantic search
- Returns the top-k matching chunks from the configured vector store
- Each result includes chunk text, similarity score, and metadata fields

CRITICAL ANSWERING RULES:
- Answer ONLY using retrieved chunks - no external knowledge, speculation, or inference
- Quote source content directly without paraphrasing, summarizing, or rewriting
- If no relevant context found: "Not enough information found in the provided context"
- If partial context: "The available context does not fully answer the question"
- Include document/page references when available (e.g., "On page 2 of 'demo_policy.pdf'...")
- Execute entire workflow silently without showing function calls to user - only show final answer

LANGUAGE RESTRICTIONS:
- Do not say "According to the context" or "The context says" - just quote directly
- Do not say "It can be inferred that..." - no inference allowed
- Use exact or near-verbatim quotes only
- No paraphrasing, summarizing, or adding transitions between quotes
- Copy content precisely - no expansion or interpretation

BEHAVIORAL REQUIREMENTS:
- Execute all RAG workflow steps silently without showing tool calls to users
- Only display final answers based strictly on retrieved context chunks
- Do not use external knowledge or speculation - only quote retrieved content directly
- RAG mode only triggers with explicit /rag prefix - do not enter RAG mode implicitly
- Hide all tool execution steps from user
- Provide clean, direct response with only the answer based on retrieved chunks
- This is a complete end-to-end RAG workflow - no additional tools needed

EXECUTION: Run completely silently - user only sees their question and the final context-grounded answer.

  - Arguments:
    - `question` (string, required): Question
    - `k` (integer, optional): K
- `TDA_Charting` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `TDA_CurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `TDA_DateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `TDA_CurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `TDA_LLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
- `TDA_FinalReport` (tool): A special internal tool used to format and deliver the final, structured report to the user. This tool MUST be called when you have gathered all necessary information to answer the user's request.
  - Arguments:
    - `direct_answer` (string, required): A direct and concise sentence that factually answers the user's primary question.
    - `key_metric` (dict, optional): The optional, single primary metric summarizing the response.
    - `key_observations` (list[dict], optional): A list of supporting details, findings, and contextual insights.
--- Available Prompts ---
--- Category: Auditing ---
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Information ---
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Performance ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
--- Category: Table Management ---
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
--- Category: Utilities ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
- `base_teradata_query` (prompt): A Teradata SQL expert that executes SQL requests effectively, understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONSTRAINTS ---
You are explicitly forbidden from using the following capabilities in your plan under any circumstances:
- `sales_top_customers` (tool)
- `base_query` (prompt)




1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    **CRITICAL RULE (Grounding):** Your primary objective is to answer the user's `GOAL` using data from the available tools. You **MUST** prioritize using a data-gathering tool if the `Workflow History` does not contain a direct and complete answer to the user's `GOAL`.

2.  **CRITICAL RULE (Answer from History):** If the `Workflow History` contains enough information to fully answer the user's `GOAL`, your response **MUST be a single JSON object** for a one-phase plan. This plan **MUST** call the `TDA_LLMTask` tool. You **MUST** write the complete, final answer text inside the `synthesized_answer` argument within that tool call. **You are acting as a planner; DO NOT use the `FINAL_ANSWER:` format.**

3.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

4.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

5.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * **CRITICAL RULE (Final Reporting):** If the goal requires a final summary or analysis of previously gathered data, the plan **MUST** conclude with a single phase that calls the `TDA_FinalReport` tool. You **MUST NOT** provide any arguments for this tool. Its sole purpose is to signal that the final, LLM-driven summarization is now required.

6.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * Your plan **Must** combine mutiple SQL steps in to a single SQL call if possible.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

7.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

8.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

9.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Final Reporting)
- **User Goal**: "Summarize the errors in the 'DEMO_DB' database."
- **Correct Plan**:
  ```json
  [
    {
      "phase": 1,
      "goal": "Get a list of all tables in the 'DEMO_DB' database.",
      "relevant_tools": ["base_tableList"],
      "arguments": {"database_name": "DEMO_DB"}
    },
    {
      "phase": 2,
      "goal": "Loop over the tables and check for missing values in each one.",
      "type": "loop",
      "loop_over": "result_of_phase_1",
      "relevant_tools": ["qlty_missingValues"]
    },
    {
      "phase": 3,
      "goal": "Generate the final report based on the data gathered.",
      "relevant_tools": ["TDA_FinalReport"],
      "arguments": {}
    }
  ]
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system and if so, what are the table names of the fitness database??`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system and if so, what are the table names of the fitness database??`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "List all databases in the Teradata System to check for a fitness database.",
    "relevant_tools": [
      "base_databaseList"
    ],
    "arguments": {}
  },
  {
    "phase": 2,
    "goal": "If a fitness database is found, list all tables in that database.",
    "relevant_tools": [
      "base_tableList"
    ],
    "arguments": {
      "database_name": "result_of_phase_1"
    }
  },
  {
    "phase": 3,
    "goal": "Generate the final report based on the data gathered.",
    "relevant_tools": [
      "TDA_FinalReport"
    ],
    "arguments": {}
  }
]
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:
You are a JSON-only responding assistant.

USER PROMPT:

You are an expert at fixing failed tool calls.
Your task is to analyze the provided information about a failed tool call and generate a corrected version.

--- CONTEXT ---
- Tool Definition (this describes the required arguments): {"name": "base_tableList", "description": "Lists all tables in a database.", "args": {"database_name": {"name": "database_name", "type": "string", "required": false, "description": "Database name"}}}
- Failed Command (this is what was attempted): {"tool_name": "base_tableList", "arguments": {"database_name": [{"status": "success", "metadata": {"tool_name": "base_databaseList", "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'", "columns": [{"name": "DatabaseName", "type": "str"}, {"name": "DBType", "type": "str"}, {"name": "CommentString", "type": "str"}], "row_count": 73}, "results": [{"DatabaseName": "dbcmngr", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TD_SYSFNLIB", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_AppOpsS1", "DBType": "User", "CommentString": "As-A-Service : Third Party Applications User"}, {"DatabaseName": "TDBCMgmt", "DBType": "DataBase", "CommentString": "POG/COG router management database"}, {"DatabaseName": "viewpoint", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_FLOW1", "DBType": "User", "CommentString": "As-A-Service : Flow Service user"}, {"DatabaseName": "TDaaS_CloudRouterManaged2", "DBType": "User", "CommentString": "As-A-Service : QueryFabric COG management user"}, {"DatabaseName": "fitness_db", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_CloudAvailabilityS1", "DBType": "User", "CommentString": "As-A-Service : Cloud Availability management user"}, {"DatabaseName": "TDaaS_Upgrade", "DBType": "User", "CommentString": "As-A-Service : Upgrade Service user"}, {"DatabaseName": "TDaaS_TDBCMgmt1", "DBType": "User", "CommentString": "As-A-Service : POG/COG router management user"}, {"DatabaseName": "TDSYSFLOW", "DBType": "DataBase", "CommentString": "Flow Service Repository"}, {"DatabaseName": "PDCRADM", "DBType": "DataBase", "CommentString": "Performance Management Administration Database -- PDCR 20.00"}, {"DatabaseName": "TDStats", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TD_SYSXML", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "SQLJ", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "val", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_CloudRouterManaged1", "DBType": "User", "CommentString": "As-A-Service : QueryFabric COG management user"}, {"DatabaseName": "Crashdumps", "DBType": "User", "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"}, {"DatabaseName": "TD_METRIC_SVC", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_CloudInstallS2", "DBType": "User", "CommentString": "As-A-Service : UDF Installer management user"}, {"DatabaseName": "TD_SERVER_DB", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "LockLogShredder", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "External_AP", "DBType": "User", "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"}, {"DatabaseName": "TDaaS_Maint", "DBType": "User", "CommentString": "As-A-Service Maintenance : Patching and Configuration "}, {"DatabaseName": "TDaaS_DB", "DBType": "DataBase", "CommentString": "As-A-Service : APIs DB "}, {"DatabaseName": "EXTUSER", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "SYSUDTLIB", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_AutoDB1", "DBType": "User", "CommentString": "As-a-Service : Autonomous database user"}, {"DatabaseName": "TDaaS_CloudFederator2", "DBType": "User", "CommentString": "As-A-Service : PMFederator database monitoring user"}, {"DatabaseName": "TDaaS_Support", "DBType": "User", "CommentString": "As-A-Service Support : Problem and Error Investigation "}, {"DatabaseName": "PUBLIC", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_TDBCSync2", "DBType": "User", "CommentString": "As-A-Service : POG router sync user"}, {"DatabaseName": "TDaaS_CloudMonitor2", "DBType": "User", "CommentString": "As-A-Service : Autoscaler management user"}, {"DatabaseName": "TD_SYSGPL", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "SYSBAR", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_Monitor", "DBType": "User", "CommentString": "As-A-Service Monitor : Monitor Resource Usage "}, {"DatabaseName": "SYSSPATIAL", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_CloudMSS2", "DBType": "User", "CommentString": "As-A-Service : Metric Services data management user"}, {"DatabaseName": "TDaaS_AutoDB2", "DBType": "User", "CommentString": "As-a-Service : Autonomous database user"}, {"DatabaseName": "TDaaS_IAM", "DBType": "User", "CommentString": "As-A-Service : Database authentication user"}, {"DatabaseName": "All", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_CloudFederator1", "DBType": "User", "CommentString": "As-A-Service : PMFederator database monitoring user"}, {"DatabaseName": "TDPUSER", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_DSS2", "DBType": "User", "CommentString": "As-A-Service : Data Sharing Service user"}, {"DatabaseName": "TDaaS_BAR", "DBType": "User", "CommentString": "As-A-Service : Backup and Restore "}, {"DatabaseName": "TD_DATASHARING_REPO", "DBType": "DataBase", "CommentString": "Data Sharing Service repository"}, {"DatabaseName": "DBC", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "tdwm", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "console", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_CloudMonitor1", "DBType": "User", "CommentString": "As-A-Service : Autoscaler management user"}, {"DatabaseName": "SYSLIB", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_CloudInstallS1", "DBType": "User", "CommentString": "As-A-Service : UDF Installer management user"}, {"DatabaseName": "SystemFe", "DBType": "User", "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"}, {"DatabaseName": "TDaaS_DSS1", "DBType": "User", "CommentString": "As-A-Service : Data Sharing Service user"}, {"DatabaseName": "SYSUIF", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDQCD", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_FLOW2", "DBType": "User", "CommentString": "As-A-Service : Flow Service user"}, {"DatabaseName": "TD_ANALYTICS_DB", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "Sys_Calendar", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "mcp", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_AppOpsS2", "DBType": "User", "CommentString": "As-A-Service : Third Party Applications User"}, {"DatabaseName": "TDaaS_CloudMSS1", "DBType": "User", "CommentString": "As-A-Service : Metric Services data management user"}, {"DatabaseName": "TDMaps", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_CloudAvailabilityS2", "DBType": "User", "CommentString": "As-A-Service : Cloud Availability management user"}, {"DatabaseName": "TDaaS_TDBCMgmt2", "DBType": "User", "CommentString": "As-A-Service : POG/COG router management user"}, {"DatabaseName": "SysAdmin", "DBType": "User", "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"}, {"DatabaseName": "rgeissen", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "Default", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "SYSJDBC", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "SAS_SYSFNLIB", "DBType": "DataBase", "CommentString": "SAS_SYSFNLIB Repository"}, {"DatabaseName": "mldb", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_TDBCSync1", "DBType": "User", "CommentString": "As-A-Service : POG router sync user"}]}]}}
- Error Message (this is why it failed): "Error executing tool base_tableList: 1 validation error for handle_base_tableListArguments\ndatabase_name\n  Input should be a valid string [type=string_type, input_value=[{'status': 'success', 'm...OG router sync user'}]}], input_type=list]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type"
- Full Conversation History (for more complex cases): [{"role": "user", "content": "is there a fitness database on the system and if so, what are the table names of the fitness database??"}]

--- INSTRUCTIONS ---
1.  **Analyze the Error**: Read the "Error Message" to understand why the tool failed. Common reasons include missing arguments (like `database_name`), incorrect values, or formatting issues.
2.  **Consult the Definition**: Look at the "Tool Definition" to see the correct names and requirements for all arguments.
3.  **Use History**: Use the "Full Conversation History" to find correct values for any missing arguments.
4.  **Generate Correction**: Create a new, valid set of arguments for the tool.

Your response MUST be ONLY a single JSON object containing the corrected `arguments`.
Example format:
```json
{
  "arguments": {
    "database_name": "some_database",
    "table_name": "some_table"
  }
}
```


2025-09-10 12:37:56,532 - --- FULL CONTEXT (Session: 498b1301-76c1-44c3-a70d-ab7d4a45bd23) ---
--- REASON FOR CALL ---
Executing TDA_LLMTask: 
You are an expert data analyst. Your task is to create a final report for the user by analyzing the provided data and their original question.

--- DATA FOR ANALYSIS ---
{
  "result_of_phase_1": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_databaseList",
        "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          },
          {
            "name": "DBType",
            "type": "str"
          },
          {
            "name": "CommentString",
            "type": "str"
          }
        ],
        "row_count": 73
      },
      "results": [
        {
          "DatabaseName": "dbcmngr",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSFNLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_AppOpsS1",
          "DBType": "User",
          "CommentString": "As-A-Service : Third Party Applications User"
        },
        {
          "DatabaseName": "TDBCMgmt",
          "DBType": "DataBase",
          "CommentString": "POG/COG router management database"
        },
        {
          "DatabaseName": "viewpoint",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_FLOW1",
          "DBType": "User",
          "CommentString": "As-A-Service : Flow Service user"
        },
        {
          "DatabaseName": "TDaaS_CloudRouterManaged2",
          "DBType": "User",
          "CommentString": "As-A-Service : QueryFabric COG management user"
        },
        {
          "DatabaseName": "fitness_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_CloudAvailabilityS1",
          "DBType": "User",
          "CommentString": "As-A-Service : Cloud Availability management user"
        },
        {
          "DatabaseName": "TDaaS_Upgrade",
          "DBType": "User",
          "CommentString": "As-A-Service : Upgrade Service user"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt1",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "TDSYSFLOW",
          "DBType": "DataBase",
          "CommentString": "Flow Service Repository"
        },
        {
          "DatabaseName": "PDCRADM",
          "DBType": "DataBase",
          "CommentString": "Performance Management Administration Database -- PDCR 20.00"
        },
        {
          "DatabaseName": "TDStats",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSXML",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SQLJ",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "val",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_CloudRouterManaged1",
          "DBType": "User",
          "CommentString": "As-A-Service : QueryFabric COG management user"
        },
        {
          "DatabaseName": "Crashdumps",
          "DBType": "User",
          "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
        },
        {
          "DatabaseName": "TD_METRIC_SVC",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_CloudInstallS2",
          "DBType": "User",
          "CommentString": "As-A-Service : UDF Installer management user"
        },
        {
          "DatabaseName": "TD_SERVER_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "LockLogShredder",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "External_AP",
          "DBType": "User",
          "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
        },
        {
          "DatabaseName": "TDaaS_Maint",
          "DBType": "User",
          "CommentString": "As-A-Service Maintenance : Patching and Configuration "
        },
        {
          "DatabaseName": "TDaaS_DB",
          "DBType": "DataBase",
          "CommentString": "As-A-Service : APIs DB "
        },
        {
          "DatabaseName": "EXTUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUDTLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_AutoDB1",
          "DBType": "User",
          "CommentString": "As-a-Service : Autonomous database user"
        },
        {
          "DatabaseName": "TDaaS_CloudFederator2",
          "DBType": "User",
          "CommentString": "As-A-Service : PMFederator database monitoring user"
        },
        {
          "DatabaseName": "TDaaS_Support",
          "DBType": "User",
          "CommentString": "As-A-Service Support : Problem and Error Investigation "
        },
        {
          "DatabaseName": "PUBLIC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_TDBCSync2",
          "DBType": "User",
          "CommentString": "As-A-Service : POG router sync user"
        },
        {
          "DatabaseName": "TDaaS_CloudMonitor2",
          "DBType": "User",
          "CommentString": "As-A-Service : Autoscaler management user"
        },
        {
          "DatabaseName": "TD_SYSGPL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSBAR",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_Monitor",
          "DBType": "User",
          "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
        },
        {
          "DatabaseName": "SYSSPATIAL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_CloudMSS2",
          "DBType": "User",
          "CommentString": "As-A-Service : Metric Services data management user"
        },
        {
          "DatabaseName": "TDaaS_AutoDB2",
          "DBType": "User",
          "CommentString": "As-a-Service : Autonomous database user"
        },
        {
          "DatabaseName": "TDaaS_IAM",
          "DBType": "User",
          "CommentString": "As-A-Service : Database authentication user"
        },
        {
          "DatabaseName": "All",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_CloudFederator1",
          "DBType": "User",
          "CommentString": "As-A-Service : PMFederator database monitoring user"
        },
        {
          "DatabaseName": "TDPUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_DSS2",
          "DBType": "User",
          "CommentString": "As-A-Service : Data Sharing Service user"
        },
        {
          "DatabaseName": "TDaaS_BAR",
          "DBType": "User",
          "CommentString": "As-A-Service : Backup and Restore "
        },
        {
          "DatabaseName": "TD_DATASHARING_REPO",
          "DBType": "DataBase",
          "CommentString": "Data Sharing Service repository"
        },
        {
          "DatabaseName": "DBC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "tdwm",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "console",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_CloudMonitor1",
          "DBType": "User",
          "CommentString": "As-A-Service : Autoscaler management user"
        },
        {
          "DatabaseName": "SYSLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_CloudInstallS1",
          "DBType": "User",
          "CommentString": "As-A-Service : UDF Installer management user"
        },
        {
          "DatabaseName": "SystemFe",
          "DBType": "User",
          "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
        },
        {
          "DatabaseName": "TDaaS_DSS1",
          "DBType": "User",
          "CommentString": "As-A-Service : Data Sharing Service user"
        },
        {
          "DatabaseName": "SYSUIF",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDQCD",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_FLOW2",
          "DBType": "User",
          "CommentString": "As-A-Service : Flow Service user"
        },
        {
          "DatabaseName": "TD_ANALYTICS_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Sys_Calendar",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "mcp",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_AppOpsS2",
          "DBType": "User",
          "CommentString": "As-A-Service : Third Party Applications User"
        },
        {
          "DatabaseName": "TDaaS_CloudMSS1",
          "DBType": "User",
          "CommentString": "As-A-Service : Metric Services data management user"
        },
        {
          "DatabaseName": "TDMaps",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_CloudAvailabilityS2",
          "DBType": "User",
          "CommentString": "As-A-Service : Cloud Availability management user"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt2",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "SysAdmin",
          "DBType": "User",
          "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
        },
        {
          "DatabaseName": "rgeissen",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Default",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSJDBC",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SAS_SYSFNLIB",
          "DBType": "DataBase",
          "CommentString": "SAS_SYSFNLIB Repository"
        },
        {
          "DatabaseName": "mldb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_TDBCSync1",
          "DBType": "User",
          "CommentString": "As-A-Service : POG router sync user"
        }
      ]
    }
  ],
  "result_of_phase_2": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableList",
        "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
        "columns": [
          {
            "name": "TableName",
            "type": "str"
          }
        ],
        "row_count": 5
      },
      "results": [
        {
          "TableName": "Products"
        },
        {
          "TableName": "SaleDetails"
        },
        {
          "TableName": "Customers"
        },
        {
          "TableName": "ServiceTickets"
        },
        {
          "TableName": "Sales"
        }
      ]
    }
  ]
}

--- INSTRUCTIONS ---
Your response MUST be a single JSON object that represents a call to the `TDA_FinalReport` tool's arguments.
You are required to populate its arguments based on your analysis of the data provided above.

--- TOOL ARGUMENT GUIDELINES ---

1.  `direct_answer`:
    - This field is REQUIRED.
    - It MUST be a single, concise sentence that directly and factually answers the user's primary question.

2.  `key_metric`:
    - This field is OPTIONAL.
    - Use it ONLY if the answer can be summarized by a single, primary value (e.g., a total count, a status, a percentage).
    - It requires two sub-fields:
        - `value`: The metric's value as a string (e.g., "21", "High").
        - `label`: A short, descriptive label for the metric (e.g., "Databases on system", "System Utilization").
    - If there is no single primary value, you MUST omit this argument entirely.

3.  `key_observations`:
    - This field is OPTIONAL but highly recommended for providing context.
    - It should be a list of objects, where each object has a `text` field.
    - Each `text` field should contain a single, narrative bullet point that describes a supporting detail, finding, or important piece of context.
    - You MUST NOT include raw data, code blocks (like SQL), or titles for data that is presented elsewhere in this field. Your observations should be textual insights only.


--- History (History Disabled for LLM Call: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool or prompt call.

-   If the capability is a prompt, you MUST use the key `"prompt_name"`.
-   If the capability is a tool, you MUST use the key `"tool_name"`.
-   Provide all required arguments. Infer values from the conversation history if necessary.
-   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
-   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `TDA_CurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, you should politely explain that you cannot fulfill the request and restate your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so.


# Capabilities
--- Available Tools ---
--- Category: Auditing ---
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `sql_Analyze_Cluster_Stats` (tool): 
**ANALYZE SQL QUERY CLUSTER PERFORMANCE STATISTICS**

This tool analyzes pre-computed cluster statistics to identify optimization opportunities without re-running the clustering pipeline. Perfect for iterative analysis and decision-making on which query clusters to focus optimization efforts.

**ANALYSIS CAPABILITIES:**
- **Performance Ranking**: Sort clusters by any performance metric to identify top resource consumers
- **Resource Impact Assessment**: Compare clusters by CPU usage, I/O volume, and execution complexity
- **Skew Problem Detection**: Identify clusters with CPU or I/O distribution issues
- **Workload Characterization**: Understand query patterns by user, application, and workload type
- **Optimization Prioritization**: Focus on clusters with highest impact potential

**AVAILABLE SORTING METRICS:**
- **avg_cpu**: Average CPU seconds per cluster (primary optimization target)
- **avg_io**: Average logical I/O operations (scan intensity indicator)
- **avg_cpuskw**: Average CPU skew (distribution problem indicator)
- **avg_ioskw**: Average I/O skew (hot spot indicator)
- **avg_pji**: Average Physical-to-Logical I/O ratio (compute intensity)
- **avg_uii**: Average Unit I/O Intensity (I/O efficiency)
- **avg_numsteps**: Average query plan complexity
- **queries**: Number of queries in cluster (frequency indicator)
- **cluster_silhouette_score**: Clustering quality measure

**PERFORMANCE CATEGORIZATION:**
Automatically categorizes clusters using configurable thresholds (from sql_opt_config.yml):
- **HIGH_CPU_USAGE**: Average CPU > config.performance_thresholds.cpu.high
- **HIGH_IO_USAGE**: Average I/O > config.performance_thresholds.io.high
- **HIGH_CPU_SKEW**: CPU skew > config.performance_thresholds.skew.high
- **HIGH_IO_SKEW**: I/O skew > config.performance_thresholds.skew.high
- **NORMAL**: Clusters within configured normal performance ranges

**TYPICAL ANALYSIS WORKFLOW:**
1. Sort by 'avg_cpu' or 'avg_io' to find highest resource consumers
2. Sort by 'avg_cpuskw' or 'avg_ioskw' to find distribution problems
4. Use limit_results to focus on top problematic clusters

**OPTIMIZATION DECISION FRAMEWORK:**
- **High CPU + High Query Count**: Maximum impact optimization candidates
- **High Skew + Moderate CPU**: Distribution/statistics problems
- **High I/O + Low PJI**: Potential indexing opportunities
- **High NumSteps**: Complex query rewriting candidates

**OUTPUT FORMAT:**
Returns detailed cluster statistics with performance rankings, categories, and metadata for LLM analysis and optimization recommendations.

  - Arguments:
    - `sort_by_metric` (string, optional): Sort By Metric
    - `limit_results` (integer, optional): Limit Results
- `sql_Execute_Full_Pipeline` (tool): 
**COMPLETE SQL QUERY CLUSTERING PIPELINE FOR HIGH-USAGE QUERY OPTIMIZATION**

This tool executes the entire SQL query clustering workflow to identify and analyze high CPU usage queries for optimization opportunities. It's designed for database performance analysts and DBAs who need to systematically identify query optimization candidates.

**FULL PIPELINE WORKFLOW:**
1. **Query Log Extraction**: Extracts SQL queries from DBC.DBQLSqlTbl with comprehensive performance metrics
2. **Performance Metrics Calculation**: Computes CPU skew, I/O skew, PJI (Physical to Logical I/O ratio), UII (Unit I/O Intensity)
3. **Query Tokenization**: Tokenizes SQL text using {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')} tokenizer via ivsm.tokenizer_encode
4. **Embedding Generation**: Creates semantic embeddings using ivsm.IVSM_score with ONNX models
5. **Vector Store Creation**: Converts embeddings to vector columns via ivsm.vector_to_columns
6. **K-Means Clustering**: Groups similar queries using TD_KMeans with optimal K from configuration
7. **Silhouette Analysis**: Calculates clustering quality scores using TD_Silhouette
8. **Statistics Generation**: Creates comprehensive cluster statistics with performance aggregations

**PERFORMANCE METRICS EXPLAINED:**
- **AMPCPUTIME**: Total CPU seconds across all AMPs (primary optimization target)
- **CPUSKW/IOSKW**: CPU/I/O skew ratios (>2.0 indicates distribution problems)
- **PJI**: Physical-to-Logical I/O ratio (higher = more CPU-intensive)
- **UII**: Unit I/O Intensity (higher = more I/O-intensive relative to CPU)
- **LogicalIO**: Total logical I/O operations (indicates scan intensity)
- **NumSteps**: Query plan complexity (higher = more complex plans)

**CONFIGURATION (from sql_opt_config.yml):**
- Uses top {default_max_queries} queries by CPU time (configurable)
- Creates {default_optimal_k} clusters by default (configurable via optimal_k parameter)
- Embedding model: {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')}
- Vector dimensions: {sql_clustering_config.get('embedding', {}).get('vector_length', 384)}
- All database and table names are configurable

**OPTIMIZATION WORKFLOW:**
After running this tool, use:
1. sql_Analyze_Cluster_Stats to identify problematic clusters
2. sql_Retrieve_Cluster_Queries to get actual SQL from target clusters
3. LLM analysis to identify patterns and propose specific optimizations

**USE CASES:**
- Identify query families consuming the most system resources
- Find queries with similar patterns but different performance
- Discover optimization opportunities through clustering analysis
- Prioritize DBA effort on highest-impact query improvements
- Understand workload composition and resource distribution

**PREREQUISITES:**
- DBC.DBQLSqlTbl and DBC.DBQLOgTbl must be accessible
- Embedding models and tokenizers must be installed in feature_ext_db
- Sufficient space in feature_ext_db for intermediate and final tables

  - Arguments:
    - `optimal_k` (integer, optional): Optimal K
    - `max_queries` (integer, optional): Max Queries
- `sql_Retrieve_Cluster_Queries` (tool): 
**RETRIEVE ACTUAL SQL QUERIES FROM SPECIFIC CLUSTERS FOR PATTERN ANALYSIS**

This tool extracts the actual SQL query text and performance metrics from selected clusters, enabling detailed pattern analysis and specific optimization recommendations. Essential for moving from cluster-level analysis to actual query optimization.

**DETAILED ANALYSIS CAPABILITIES:**
- **SQL Pattern Recognition**: Analyze actual query structures, joins, predicates, and functions
- **Performance Correlation**: Connect query patterns to specific performance characteristics
- **Optimization Identification**: Identify common anti-patterns, missing indexes, inefficient joins
- **Code Quality Assessment**: Evaluate query construction, complexity, and best practices
- **Workload Understanding**: See actual business logic and data access patterns

**QUERY SELECTION STRATEGIES:**
- **By CPU Impact**: Sort by 'ampcputime' to focus on highest CPU consumers
- **By I/O Volume**: Sort by 'logicalio' to find scan-intensive queries
- **By Skew Problems**: Sort by 'cpuskw' or 'ioskw' for distribution issues
- **By Complexity**: Sort by 'numsteps' for complex execution plans
- **By Response Time**: Sort by 'response_secs' for user experience impact

**AVAILABLE METRICS FOR SORTING:**
- **ampcputime**: Total CPU seconds (primary optimization target)
- **logicalio**: Total logical I/O operations (scan indicator)
- **cpuskw**: CPU skew ratio (distribution problems)
- **ioskw**: I/O skew ratio (hot spot indicators)
- **pji**: Physical-to-Logical I/O ratio (compute intensity)
- **uii**: Unit I/O Intensity (I/O efficiency)
- **numsteps**: Query execution plan steps (complexity)
- **response_secs**: Wall-clock execution time (user impact)
- **delaytime**: Time spent in queue (concurrency issues)

**AUTOMATIC PERFORMANCE CATEGORIZATION:**
Each query is categorized using configurable thresholds (from sql_opt_config.yml):
- **CPU Categories**: VERY_HIGH_CPU (>config.very_high), HIGH_CPU (>config.high), MEDIUM_CPU (>10s), LOW_CPU
- **CPU Skew**: SEVERE_CPU_SKEW (>config.severe), HIGH_CPU_SKEW (>config.high), MODERATE_CPU_SKEW (>config.moderate), NORMAL
- **I/O Skew**: SEVERE_IO_SKEW (>config.severe), HIGH_IO_SKEW (>config.high), MODERATE_IO_SKEW (>config.moderate), NORMAL

Use thresholds set in config file for, CPU - high, very_high, Skew moderate, high, severe

**TYPICAL OPTIMIZATION WORKFLOW:**
1. Start with clusters identified from sql_Analyze_Cluster_Stats
2. Retrieve top queries by impact metric (usually 'ampcputime')
3. Analyze SQL patterns for common issues:
   - Missing WHERE clauses or inefficient predicates
   - Cartesian products or missing JOIN conditions
   - Inefficient GROUP BY or ORDER BY operations
   - Suboptimal table access patterns
   - Missing or outdated statistics
4. Develop specific optimization recommendations

**QUERY LIMIT STRATEGY:**
- Use the query limit set in config file for  pattern recognition and analysis, unless user specifies a different limit

**OUTPUT INCLUDES:**
- Complete SQL query text for each query
- All performance metrics, user, application, and workload context, cluster membership and rankings
- Performance categories for quick filtering        

  - Arguments:
    - `cluster_ids` (array, required): Cluster Ids
    - `metric` (string, optional): Metric
    - `limit_per_cluster` (integer, optional): Limit Per Cluster
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_Execute_Workflow` (tool): 
Execute complete RAG workflow to answer user questions based on document context.
This tool handles the entire RAG pipeline in a single step when a user query is tagged with /rag.

WORKFLOW STEPS (executed automatically):
1. Configuration setup using configurable values from rag_config.yml
2. Store user query with '/rag ' prefix stripping  
3. Generate query embeddings using either BYOM (ONNXEmbeddings) or IVSM functions based on config
4. Perform semantic search against precomputed chunk embeddings
5. Return context chunks for answer generation

CONFIGURATION VALUES (from rag_config.yml):
- version: 'ivsm' or 'byom' to select embedding approach
- All database names, table names, and model settings are configurable
- Vector store metadata fields are dynamically detected
- Embedding parameters are configurable
- Default chunk retrieval count is configurable
- Default values are provided as fallback

TECHNICAL DETAILS:
- Strips the '/rag ' prefix if present from user questions
- Creates query table if it does not exist (columns: id, txt, created_ts)
- BYOM approach: Uses mldb.ONNXEmbeddings UDF for tokenization and embedding
- IVSM approach: Uses ivsm.tokenizer_encode and ivsm.IVSM_score functions
- Both approaches store embeddings in configured output table
- Uses cosine similarity via TD_VECTORDISTANCE for semantic search
- Returns the top-k matching chunks from the configured vector store
- Each result includes chunk text, similarity score, and metadata fields

CRITICAL ANSWERING RULES:
- Answer ONLY using retrieved chunks - no external knowledge, speculation, or inference
- Quote source content directly without paraphrasing, summarizing, or rewriting
- If no relevant context found: "Not enough information found in the provided context"
- If partial context: "The available context does not fully answer the question"
- Include document/page references when available (e.g., "On page 2 of 'demo_policy.pdf'...")
- Execute entire workflow silently without showing function calls to user - only show final answer

LANGUAGE RESTRICTIONS:
- Do not say "According to the context" or "The context says" - just quote directly
- Do not say "It can be inferred that..." - no inference allowed
- Use exact or near-verbatim quotes only
- No paraphrasing, summarizing, or adding transitions between quotes
- Copy content precisely - no expansion or interpretation

BEHAVIORAL REQUIREMENTS:
- Execute all RAG workflow steps silently without showing tool calls to users
- Only display final answers based strictly on retrieved context chunks
- Do not use external knowledge or speculation - only quote retrieved content directly
- RAG mode only triggers with explicit /rag prefix - do not enter RAG mode implicitly
- Hide all tool execution steps from user
- Provide clean, direct response with only the answer based on retrieved chunks
- This is a complete end-to-end RAG workflow - no additional tools needed

EXECUTION: Run completely silently - user only sees their question and the final context-grounded answer.

  - Arguments:
    - `question` (string, required): Question
    - `k` (integer, optional): K
- `TDA_Charting` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `TDA_CurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `TDA_DateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `TDA_CurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `TDA_LLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
- `TDA_FinalReport` (tool): A special internal tool used to format and deliver the final, structured report to the user. This tool MUST be called when you have gathered all necessary information to answer the user's request.
  - Arguments:
    - `direct_answer` (string, required): A direct and concise sentence that factually answers the user's primary question.
    - `key_metric` (dict, optional): The optional, single primary metric summarizing the response.
    - `key_observations` (list[dict], optional): A list of supporting details, findings, and contextual insights.
--- Available Prompts ---
--- Category: Auditing ---
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Information ---
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Performance ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
--- Category: Table Management ---
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
--- Category: Utilities ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
- `base_teradata_query` (prompt): A Teradata SQL expert that executes SQL requests effectively, understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONSTRAINTS ---
You are explicitly forbidden from using the following capabilities in your plan under any circumstances:
- `sales_top_customers` (tool)
- `base_query` (prompt)




1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    **CRITICAL RULE (Grounding):** Your primary objective is to answer the user's `GOAL` using data from the available tools. You **MUST** prioritize using a data-gathering tool if the `Workflow History` does not contain a direct and complete answer to the user's `GOAL`.

2.  **CRITICAL RULE (Answer from History):** If the `Workflow History` contains enough information to fully answer the user's `GOAL`, your response **MUST be a single JSON object** for a one-phase plan. This plan **MUST** call the `TDA_LLMTask` tool. You **MUST** write the complete, final answer text inside the `synthesized_answer` argument within that tool call. **You are acting as a planner; DO NOT use the `FINAL_ANSWER:` format.**

3.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

4.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

5.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * **CRITICAL RULE (Final Reporting):** If the goal requires a final summary or analysis of previously gathered data, the plan **MUST** conclude with a single phase that calls the `TDA_FinalReport` tool. You **MUST NOT** provide any arguments for this tool. Its sole purpose is to signal that the final, LLM-driven summarization is now required.

6.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * Your plan **Must** combine mutiple SQL steps in to a single SQL call if possible.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

7.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

8.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

9.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Final Reporting)
- **User Goal**: "Summarize the errors in the 'DEMO_DB' database."
- **Correct Plan**:
  ```json
  [
    {
      "phase": 1,
      "goal": "Get a list of all tables in the 'DEMO_DB' database.",
      "relevant_tools": ["base_tableList"],
      "arguments": {"database_name": "DEMO_DB"}
    },
    {
      "phase": 2,
      "goal": "Loop over the tables and check for missing values in each one.",
      "type": "loop",
      "loop_over": "result_of_phase_1",
      "relevant_tools": ["qlty_missingValues"]
    },
    {
      "phase": 3,
      "goal": "Generate the final report based on the data gathered.",
      "relevant_tools": ["TDA_FinalReport"],
      "arguments": {}
    }
  ]
```

---
### Context for this Plan
-   Overall Goal: `is there a fitness database on the system and if so, what are the table names of the fitness database??`
-   Explicit Parameters: 
-   User's Original Input: `is there a fitness database on the system and if so, what are the table names of the fitness database??`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "List all databases in the Teradata System to check for a fitness database.",
    "relevant_tools": [
      "base_databaseList"
    ],
    "arguments": {}
  },
  {
    "phase": 2,
    "goal": "If a fitness database is found, list all tables in that database.",
    "relevant_tools": [
      "base_tableList"
    ],
    "arguments": {
      "database_name": "result_of_phase_1"
    }
  },
  {
    "phase": 3,
    "goal": "Generate the final report based on the data gathered.",
    "relevant_tools": [
      "TDA_FinalReport"
    ],
    "arguments": {}
  }
]
```
[user]: SYSTEM PROMPT:
You are a JSON-only responding assistant.

USER PROMPT:

You are an expert at fixing failed tool calls.
Your task is to analyze the provided information about a failed tool call and generate a corrected version.

--- CONTEXT ---
- Tool Definition (this describes the required arguments): {"name": "base_tableList", "description": "Lists all tables in a database.", "args": {"database_name": {"name": "database_name", "type": "string", "required": false, "description": "Database name"}}}
- Failed Command (this is what was attempted): {"tool_name": "base_tableList", "arguments": {"database_name": [{"status": "success", "metadata": {"tool_name": "base_databaseList", "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'", "columns": [{"name": "DatabaseName", "type": "str"}, {"name": "DBType", "type": "str"}, {"name": "CommentString", "type": "str"}], "row_count": 73}, "results": [{"DatabaseName": "dbcmngr", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TD_SYSFNLIB", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_AppOpsS1", "DBType": "User", "CommentString": "As-A-Service : Third Party Applications User"}, {"DatabaseName": "TDBCMgmt", "DBType": "DataBase", "CommentString": "POG/COG router management database"}, {"DatabaseName": "viewpoint", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_FLOW1", "DBType": "User", "CommentString": "As-A-Service : Flow Service user"}, {"DatabaseName": "TDaaS_CloudRouterManaged2", "DBType": "User", "CommentString": "As-A-Service : QueryFabric COG management user"}, {"DatabaseName": "fitness_db", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_CloudAvailabilityS1", "DBType": "User", "CommentString": "As-A-Service : Cloud Availability management user"}, {"DatabaseName": "TDaaS_Upgrade", "DBType": "User", "CommentString": "As-A-Service : Upgrade Service user"}, {"DatabaseName": "TDaaS_TDBCMgmt1", "DBType": "User", "CommentString": "As-A-Service : POG/COG router management user"}, {"DatabaseName": "TDSYSFLOW", "DBType": "DataBase", "CommentString": "Flow Service Repository"}, {"DatabaseName": "PDCRADM", "DBType": "DataBase", "CommentString": "Performance Management Administration Database -- PDCR 20.00"}, {"DatabaseName": "TDStats", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TD_SYSXML", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "SQLJ", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "val", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_CloudRouterManaged1", "DBType": "User", "CommentString": "As-A-Service : QueryFabric COG management user"}, {"DatabaseName": "Crashdumps", "DBType": "User", "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"}, {"DatabaseName": "TD_METRIC_SVC", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_CloudInstallS2", "DBType": "User", "CommentString": "As-A-Service : UDF Installer management user"}, {"DatabaseName": "TD_SERVER_DB", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "LockLogShredder", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "External_AP", "DBType": "User", "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"}, {"DatabaseName": "TDaaS_Maint", "DBType": "User", "CommentString": "As-A-Service Maintenance : Patching and Configuration "}, {"DatabaseName": "TDaaS_DB", "DBType": "DataBase", "CommentString": "As-A-Service : APIs DB "}, {"DatabaseName": "EXTUSER", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "SYSUDTLIB", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_AutoDB1", "DBType": "User", "CommentString": "As-a-Service : Autonomous database user"}, {"DatabaseName": "TDaaS_CloudFederator2", "DBType": "User", "CommentString": "As-A-Service : PMFederator database monitoring user"}, {"DatabaseName": "TDaaS_Support", "DBType": "User", "CommentString": "As-A-Service Support : Problem and Error Investigation "}, {"DatabaseName": "PUBLIC", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_TDBCSync2", "DBType": "User", "CommentString": "As-A-Service : POG router sync user"}, {"DatabaseName": "TDaaS_CloudMonitor2", "DBType": "User", "CommentString": "As-A-Service : Autoscaler management user"}, {"DatabaseName": "TD_SYSGPL", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "SYSBAR", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_Monitor", "DBType": "User", "CommentString": "As-A-Service Monitor : Monitor Resource Usage "}, {"DatabaseName": "SYSSPATIAL", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_CloudMSS2", "DBType": "User", "CommentString": "As-A-Service : Metric Services data management user"}, {"DatabaseName": "TDaaS_AutoDB2", "DBType": "User", "CommentString": "As-a-Service : Autonomous database user"}, {"DatabaseName": "TDaaS_IAM", "DBType": "User", "CommentString": "As-A-Service : Database authentication user"}, {"DatabaseName": "All", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_CloudFederator1", "DBType": "User", "CommentString": "As-A-Service : PMFederator database monitoring user"}, {"DatabaseName": "TDPUSER", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_DSS2", "DBType": "User", "CommentString": "As-A-Service : Data Sharing Service user"}, {"DatabaseName": "TDaaS_BAR", "DBType": "User", "CommentString": "As-A-Service : Backup and Restore "}, {"DatabaseName": "TD_DATASHARING_REPO", "DBType": "DataBase", "CommentString": "Data Sharing Service repository"}, {"DatabaseName": "DBC", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "tdwm", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "console", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_CloudMonitor1", "DBType": "User", "CommentString": "As-A-Service : Autoscaler management user"}, {"DatabaseName": "SYSLIB", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_CloudInstallS1", "DBType": "User", "CommentString": "As-A-Service : UDF Installer management user"}, {"DatabaseName": "SystemFe", "DBType": "User", "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"}, {"DatabaseName": "TDaaS_DSS1", "DBType": "User", "CommentString": "As-A-Service : Data Sharing Service user"}, {"DatabaseName": "SYSUIF", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDQCD", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_FLOW2", "DBType": "User", "CommentString": "As-A-Service : Flow Service user"}, {"DatabaseName": "TD_ANALYTICS_DB", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "Sys_Calendar", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "mcp", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_AppOpsS2", "DBType": "User", "CommentString": "As-A-Service : Third Party Applications User"}, {"DatabaseName": "TDaaS_CloudMSS1", "DBType": "User", "CommentString": "As-A-Service : Metric Services data management user"}, {"DatabaseName": "TDMaps", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_CloudAvailabilityS2", "DBType": "User", "CommentString": "As-A-Service : Cloud Availability management user"}, {"DatabaseName": "TDaaS_TDBCMgmt2", "DBType": "User", "CommentString": "As-A-Service : POG/COG router management user"}, {"DatabaseName": "SysAdmin", "DBType": "User", "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"}, {"DatabaseName": "rgeissen", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "Default", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "SYSJDBC", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "SAS_SYSFNLIB", "DBType": "DataBase", "CommentString": "SAS_SYSFNLIB Repository"}, {"DatabaseName": "mldb", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_TDBCSync1", "DBType": "User", "CommentString": "As-A-Service : POG router sync user"}]}]}}
- Error Message (this is why it failed): "Error executing tool base_tableList: 1 validation error for handle_base_tableListArguments\ndatabase_name\n  Input should be a valid string [type=string_type, input_value=[{'status': 'success', 'm...OG router sync user'}]}], input_type=list]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type"
- Full Conversation History (for more complex cases): [{"role": "user", "content": "is there a fitness database on the system and if so, what are the table names of the fitness database??"}]

--- INSTRUCTIONS ---
1.  **Analyze the Error**: Read the "Error Message" to understand why the tool failed. Common reasons include missing arguments (like `database_name`), incorrect values, or formatting issues.
2.  **Consult the Definition**: Look at the "Tool Definition" to see the correct names and requirements for all arguments.
3.  **Use History**: Use the "Full Conversation History" to find correct values for any missing arguments.
4.  **Generate Correction**: Create a new, valid set of arguments for the tool.

Your response MUST be ONLY a single JSON object containing the corrected `arguments`.
Example format:
```json
{
  "arguments": {
    "database_name": "some_database",
    "table_name": "some_table"
  }
}
```

[model]: ```json
{
  "arguments": {
    "database_name": "fitness_db"
  }
}
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'is there a fitness database on the system and if so, what are the table names of the fitness database??'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---

You are an expert data analyst. Your task is to create a final report for the user by analyzing the provided data and their original question.

--- DATA FOR ANALYSIS ---
{
  "result_of_phase_1": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_databaseList",
        "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          },
          {
            "name": "DBType",
            "type": "str"
          },
          {
            "name": "CommentString",
            "type": "str"
          }
        ],
        "row_count": 73
      },
      "results": [
        {
          "DatabaseName": "dbcmngr",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSFNLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_AppOpsS1",
          "DBType": "User",
          "CommentString": "As-A-Service : Third Party Applications User"
        },
        {
          "DatabaseName": "TDBCMgmt",
          "DBType": "DataBase",
          "CommentString": "POG/COG router management database"
        },
        {
          "DatabaseName": "viewpoint",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_FLOW1",
          "DBType": "User",
          "CommentString": "As-A-Service : Flow Service user"
        },
        {
          "DatabaseName": "TDaaS_CloudRouterManaged2",
          "DBType": "User",
          "CommentString": "As-A-Service : QueryFabric COG management user"
        },
        {
          "DatabaseName": "fitness_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_CloudAvailabilityS1",
          "DBType": "User",
          "CommentString": "As-A-Service : Cloud Availability management user"
        },
        {
          "DatabaseName": "TDaaS_Upgrade",
          "DBType": "User",
          "CommentString": "As-A-Service : Upgrade Service user"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt1",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "TDSYSFLOW",
          "DBType": "DataBase",
          "CommentString": "Flow Service Repository"
        },
        {
          "DatabaseName": "PDCRADM",
          "DBType": "DataBase",
          "CommentString": "Performance Management Administration Database -- PDCR 20.00"
        },
        {
          "DatabaseName": "TDStats",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSXML",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SQLJ",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "val",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_CloudRouterManaged1",
          "DBType": "User",
          "CommentString": "As-A-Service : QueryFabric COG management user"
        },
        {
          "DatabaseName": "Crashdumps",
          "DBType": "User",
          "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
        },
        {
          "DatabaseName": "TD_METRIC_SVC",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_CloudInstallS2",
          "DBType": "User",
          "CommentString": "As-A-Service : UDF Installer management user"
        },
        {
          "DatabaseName": "TD_SERVER_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "LockLogShredder",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "External_AP",
          "DBType": "User",
          "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
        },
        {
          "DatabaseName": "TDaaS_Maint",
          "DBType": "User",
          "CommentString": "As-A-Service Maintenance : Patching and Configuration "
        },
        {
          "DatabaseName": "TDaaS_DB",
          "DBType": "DataBase",
          "CommentString": "As-A-Service : APIs DB "
        },
        {
          "DatabaseName": "EXTUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSUDTLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_AutoDB1",
          "DBType": "User",
          "CommentString": "As-a-Service : Autonomous database user"
        },
        {
          "DatabaseName": "TDaaS_CloudFederator2",
          "DBType": "User",
          "CommentString": "As-A-Service : PMFederator database monitoring user"
        },
        {
          "DatabaseName": "TDaaS_Support",
          "DBType": "User",
          "CommentString": "As-A-Service Support : Problem and Error Investigation "
        },
        {
          "DatabaseName": "PUBLIC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_TDBCSync2",
          "DBType": "User",
          "CommentString": "As-A-Service : POG router sync user"
        },
        {
          "DatabaseName": "TDaaS_CloudMonitor2",
          "DBType": "User",
          "CommentString": "As-A-Service : Autoscaler management user"
        },
        {
          "DatabaseName": "TD_SYSGPL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSBAR",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_Monitor",
          "DBType": "User",
          "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
        },
        {
          "DatabaseName": "SYSSPATIAL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_CloudMSS2",
          "DBType": "User",
          "CommentString": "As-A-Service : Metric Services data management user"
        },
        {
          "DatabaseName": "TDaaS_AutoDB2",
          "DBType": "User",
          "CommentString": "As-a-Service : Autonomous database user"
        },
        {
          "DatabaseName": "TDaaS_IAM",
          "DBType": "User",
          "CommentString": "As-A-Service : Database authentication user"
        },
        {
          "DatabaseName": "All",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_CloudFederator1",
          "DBType": "User",
          "CommentString": "As-A-Service : PMFederator database monitoring user"
        },
        {
          "DatabaseName": "TDPUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_DSS2",
          "DBType": "User",
          "CommentString": "As-A-Service : Data Sharing Service user"
        },
        {
          "DatabaseName": "TDaaS_BAR",
          "DBType": "User",
          "CommentString": "As-A-Service : Backup and Restore "
        },
        {
          "DatabaseName": "TD_DATASHARING_REPO",
          "DBType": "DataBase",
          "CommentString": "Data Sharing Service repository"
        },
        {
          "DatabaseName": "DBC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "tdwm",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "console",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_CloudMonitor1",
          "DBType": "User",
          "CommentString": "As-A-Service : Autoscaler management user"
        },
        {
          "DatabaseName": "SYSLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_CloudInstallS1",
          "DBType": "User",
          "CommentString": "As-A-Service : UDF Installer management user"
        },
        {
          "DatabaseName": "SystemFe",
          "DBType": "User",
          "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
        },
        {
          "DatabaseName": "TDaaS_DSS1",
          "DBType": "User",
          "CommentString": "As-A-Service : Data Sharing Service user"
        },
        {
          "DatabaseName": "SYSUIF",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDQCD",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_FLOW2",
          "DBType": "User",
          "CommentString": "As-A-Service : Flow Service user"
        },
        {
          "DatabaseName": "TD_ANALYTICS_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Sys_Calendar",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "mcp",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_AppOpsS2",
          "DBType": "User",
          "CommentString": "As-A-Service : Third Party Applications User"
        },
        {
          "DatabaseName": "TDaaS_CloudMSS1",
          "DBType": "User",
          "CommentString": "As-A-Service : Metric Services data management user"
        },
        {
          "DatabaseName": "TDMaps",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_CloudAvailabilityS2",
          "DBType": "User",
          "CommentString": "As-A-Service : Cloud Availability management user"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt2",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "SysAdmin",
          "DBType": "User",
          "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
        },
        {
          "DatabaseName": "rgeissen",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Default",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSJDBC",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SAS_SYSFNLIB",
          "DBType": "DataBase",
          "CommentString": "SAS_SYSFNLIB Repository"
        },
        {
          "DatabaseName": "mldb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_TDBCSync1",
          "DBType": "User",
          "CommentString": "As-A-Service : POG router sync user"
        }
      ]
    }
  ],
  "result_of_phase_2": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableList",
        "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('fitness_db')",
        "columns": [
          {
            "name": "TableName",
            "type": "str"
          }
        ],
        "row_count": 5
      },
      "results": [
        {
          "TableName": "Products"
        },
        {
          "TableName": "SaleDetails"
        },
        {
          "TableName": "Customers"
        },
        {
          "TableName": "ServiceTickets"
        },
        {
          "TableName": "Sales"
        }
      ]
    }
  ]
}

--- INSTRUCTIONS ---
Your response MUST be a single JSON object that represents a call to the `TDA_FinalReport` tool's arguments.
You are required to populate its arguments based on your analysis of the data provided above.

--- TOOL ARGUMENT GUIDELINES ---

1.  `direct_answer`:
    - This field is REQUIRED.
    - It MUST be a single, concise sentence that directly and factually answers the user's primary question.

2.  `key_metric`:
    - This field is OPTIONAL.
    - Use it ONLY if the answer can be summarized by a single, primary value (e.g., a total count, a status, a percentage).
    - It requires two sub-fields:
        - `value`: The metric's value as a string (e.g., "21", "High").
        - `label`: A short, descriptive label for the metric (e.g., "Databases on system", "System Utilization").
    - If there is no single primary value, you MUST omit this argument entirely.

3.  `key_observations`:
    - This field is OPTIONAL but highly recommended for providing context.
    - It should be a list of objects, where each object has a `text` field.
    - Each `text` field should contain a single, narrative bullet point that describes a supporting detail, finding, or important piece of context.
    - You MUST NOT include raw data, code blocks (like SQL), or titles for data that is presented elsewhere in this field. Your observations should be textual insights only.


--- RELEVANT DATA (Selected from Previous Phases) ---
{}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
None

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.

