2025-09-07 21:23:43,990 - --- FULL CONTEXT (Session: 55093c07-efcc-41ba-bb63-15771bf3bf02) ---
--- REASON FOR CALL ---
Generating a strategic meta-plan for the goal: 'what is the quality of database fitness_db?'

--- History (History Disabled for LLM Call: False) ---
[user]: You are a helpful assistant.
[model]: Understood.

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Administration ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Database Information ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `sql_Analyze_Cluster_Stats` (tool): 
**ANALYZE SQL QUERY CLUSTER PERFORMANCE STATISTICS**

This tool analyzes pre-computed cluster statistics to identify optimization opportunities without re-running the clustering pipeline. Perfect for iterative analysis and decision-making on which query clusters to focus optimization efforts.

**ANALYSIS CAPABILITIES:**
- **Performance Ranking**: Sort clusters by any performance metric to identify top resource consumers
- **Resource Impact Assessment**: Compare clusters by CPU usage, I/O volume, and execution complexity
- **Skew Problem Detection**: Identify clusters with CPU or I/O distribution issues
- **Workload Characterization**: Understand query patterns by user, application, and workload type
- **Optimization Prioritization**: Focus on clusters with highest impact potential

**AVAILABLE SORTING METRICS:**
- **avg_cpu**: Average CPU seconds per cluster (primary optimization target)
- **avg_io**: Average logical I/O operations (scan intensity indicator)
- **avg_cpuskw**: Average CPU skew (distribution problem indicator)
- **avg_ioskw**: Average I/O skew (hot spot indicator)
- **avg_pji**: Average Physical-to-Logical I/O ratio (compute intensity)
- **avg_uii**: Average Unit I/O Intensity (I/O efficiency)
- **avg_numsteps**: Average query plan complexity
- **queries**: Number of queries in cluster (frequency indicator)
- **cluster_silhouette_score**: Clustering quality measure

**PERFORMANCE CATEGORIZATION:**
Automatically categorizes clusters using configurable thresholds (from sql_opt_config.yml):
- **HIGH_CPU_USAGE**: Average CPU > config.performance_thresholds.cpu.high
- **HIGH_IO_USAGE**: Average I/O > config.performance_thresholds.io.high
- **HIGH_CPU_SKEW**: CPU skew > config.performance_thresholds.skew.high
- **HIGH_IO_SKEW**: I/O skew > config.performance_thresholds.skew.high
- **NORMAL**: Clusters within configured normal performance ranges

**TYPICAL ANALYSIS WORKFLOW:**
1. Sort by 'avg_cpu' or 'avg_io' to find highest resource consumers
2. Sort by 'avg_cpuskw' or 'avg_ioskw' to find distribution problems
4. Use limit_results to focus on top problematic clusters

**OPTIMIZATION DECISION FRAMEWORK:**
- **High CPU + High Query Count**: Maximum impact optimization candidates
- **High Skew + Moderate CPU**: Distribution/statistics problems
- **High I/O + Low PJI**: Potential indexing opportunities
- **High NumSteps**: Complex query rewriting candidates

**OUTPUT FORMAT:**
Returns detailed cluster statistics with performance rankings, categories, and metadata for LLM analysis and optimization recommendations.

  - Arguments:
    - `sort_by_metric` (string, optional): Sort By Metric
    - `limit_results` (integer, optional): Limit Results
- `sql_Execute_Full_Pipeline` (tool): 
**COMPLETE SQL QUERY CLUSTERING PIPELINE FOR HIGH-USAGE QUERY OPTIMIZATION**

This tool executes the entire SQL query clustering workflow to identify and analyze high CPU usage queries for optimization opportunities. It's designed for database performance analysts and DBAs who need to systematically identify query optimization candidates.

**FULL PIPELINE WORKFLOW:**
1. **Query Log Extraction**: Extracts SQL queries from DBC.DBQLSqlTbl with comprehensive performance metrics
2. **Performance Metrics Calculation**: Computes CPU skew, I/O skew, PJI (Physical to Logical I/O ratio), UII (Unit I/O Intensity)
3. **Query Tokenization**: Tokenizes SQL text using {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')} tokenizer via ivsm.tokenizer_encode
4. **Embedding Generation**: Creates semantic embeddings using ivsm.IVSM_score with ONNX models
5. **Vector Store Creation**: Converts embeddings to vector columns via ivsm.vector_to_columns
6. **K-Means Clustering**: Groups similar queries using TD_KMeans with optimal K from configuration
7. **Silhouette Analysis**: Calculates clustering quality scores using TD_Silhouette
8. **Statistics Generation**: Creates comprehensive cluster statistics with performance aggregations

**PERFORMANCE METRICS EXPLAINED:**
- **AMPCPUTIME**: Total CPU seconds across all AMPs (primary optimization target)
- **CPUSKW/IOSKW**: CPU/I/O skew ratios (>2.0 indicates distribution problems)
- **PJI**: Physical-to-Logical I/O ratio (higher = more CPU-intensive)
- **UII**: Unit I/O Intensity (higher = more I/O-intensive relative to CPU)
- **LogicalIO**: Total logical I/O operations (indicates scan intensity)
- **NumSteps**: Query plan complexity (higher = more complex plans)

**CONFIGURATION (from sql_opt_config.yml):**
- Uses top {default_max_queries} queries by CPU time (configurable)
- Creates {default_optimal_k} clusters by default (configurable via optimal_k parameter)
- Embedding model: {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')}
- Vector dimensions: {sql_clustering_config.get('embedding', {}).get('vector_length', 384)}
- All database and table names are configurable

**OPTIMIZATION WORKFLOW:**
After running this tool, use:
1. sql_Analyze_Cluster_Stats to identify problematic clusters
2. sql_Retrieve_Cluster_Queries to get actual SQL from target clusters
3. LLM analysis to identify patterns and propose specific optimizations

**USE CASES:**
- Identify query families consuming the most system resources
- Find queries with similar patterns but different performance
- Discover optimization opportunities through clustering analysis
- Prioritize DBA effort on highest-impact query improvements
- Understand workload composition and resource distribution

**PREREQUISITES:**
- DBC.DBQLSqlTbl and DBC.DBQLOgTbl must be accessible
- Embedding models and tokenizers must be installed in feature_ext_db
- Sufficient space in feature_ext_db for intermediate and final tables

  - Arguments:
    - `optimal_k` (integer, optional): Optimal K
    - `max_queries` (integer, optional): Max Queries
- `sql_Retrieve_Cluster_Queries` (tool): 
**RETRIEVE ACTUAL SQL QUERIES FROM SPECIFIC CLUSTERS FOR PATTERN ANALYSIS**

This tool extracts the actual SQL query text and performance metrics from selected clusters, enabling detailed pattern analysis and specific optimization recommendations. Essential for moving from cluster-level analysis to actual query optimization.

**DETAILED ANALYSIS CAPABILITIES:**
- **SQL Pattern Recognition**: Analyze actual query structures, joins, predicates, and functions
- **Performance Correlation**: Connect query patterns to specific performance characteristics
- **Optimization Identification**: Identify common anti-patterns, missing indexes, inefficient joins
- **Code Quality Assessment**: Evaluate query construction, complexity, and best practices
- **Workload Understanding**: See actual business logic and data access patterns

**QUERY SELECTION STRATEGIES:**
- **By CPU Impact**: Sort by 'ampcputime' to focus on highest CPU consumers
- **By I/O Volume**: Sort by 'logicalio' to find scan-intensive queries
- **By Skew Problems**: Sort by 'cpuskw' or 'ioskw' for distribution issues
- **By Complexity**: Sort by 'numsteps' for complex execution plans
- **By Response Time**: Sort by 'response_secs' for user experience impact

**AVAILABLE METRICS FOR SORTING:**
- **ampcputime**: Total CPU seconds (primary optimization target)
- **logicalio**: Total logical I/O operations (scan indicator)
- **cpuskw**: CPU skew ratio (distribution problems)
- **ioskw**: I/O skew ratio (hot spot indicators)
- **pji**: Physical-to-Logical I/O ratio (compute intensity)
- **uii**: Unit I/O Intensity (I/O efficiency)
- **numsteps**: Query execution plan steps (complexity)
- **response_secs**: Wall-clock execution time (user impact)
- **delaytime**: Time spent in queue (concurrency issues)

**AUTOMATIC PERFORMANCE CATEGORIZATION:**
Each query is categorized using configurable thresholds (from sql_opt_config.yml):
- **CPU Categories**: VERY_HIGH_CPU (>config.very_high), HIGH_CPU (>config.high), MEDIUM_CPU (>10s), LOW_CPU
- **CPU Skew**: SEVERE_CPU_SKEW (>config.severe), HIGH_CPU_SKEW (>config.high), MODERATE_CPU_SKEW (>config.moderate), NORMAL
- **I/O Skew**: SEVERE_IO_SKEW (>config.severe), HIGH_IO_SKEW (>config.high), MODERATE_IO_SKEW (>config.moderate), NORMAL

Use thresholds set in config file for, CPU - high, very_high, Skew moderate, high, severe

**TYPICAL OPTIMIZATION WORKFLOW:**
1. Start with clusters identified from sql_Analyze_Cluster_Stats
2. Retrieve top queries by impact metric (usually 'ampcputime')
3. Analyze SQL patterns for common issues:
   - Missing WHERE clauses or inefficient predicates
   - Cartesian products or missing JOIN conditions
   - Inefficient GROUP BY or ORDER BY operations
   - Suboptimal table access patterns
   - Missing or outdated statistics
4. Develop specific optimization recommendations

**QUERY LIMIT STRATEGY:**
- Use the query limit set in config file for  pattern recognition and analysis, unless user specifies a different limit

**OUTPUT INCLUDES:**
- Complete SQL query text for each query
- All performance metrics, user, application, and workload context, cluster membership and rankings
- Performance categories for quick filtering        

  - Arguments:
    - `cluster_ids` (array, required): Cluster Ids
    - `metric` (string, optional): Metric
    - `limit_per_cluster` (integer, optional): Limit Per Cluster
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Uncategorized ---
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
--- Category: Utilities ---
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `rag_Execute_Workflow` (tool): 
Execute complete RAG workflow to answer user questions based on document context.
This tool handles the entire RAG pipeline in a single step when a user query is tagged with /rag.

WORKFLOW STEPS (executed automatically):
1. Configuration setup using configurable values from rag_config.yml
2. Store user query with '/rag ' prefix stripping  
3. Generate query embeddings using either BYOM (ONNXEmbeddings) or IVSM functions based on config
4. Perform semantic search against precomputed chunk embeddings
5. Return context chunks for answer generation

CONFIGURATION VALUES (from rag_config.yml):
- version: 'ivsm' or 'byom' to select embedding approach
- All database names, table names, and model settings are configurable
- Vector store metadata fields are dynamically detected
- Embedding parameters are configurable
- Default chunk retrieval count is configurable
- Default values are provided as fallback

TECHNICAL DETAILS:
- Strips the '/rag ' prefix if present from user questions
- Creates query table if it does not exist (columns: id, txt, created_ts)
- BYOM approach: Uses mldb.ONNXEmbeddings UDF for tokenization and embedding
- IVSM approach: Uses ivsm.tokenizer_encode and ivsm.IVSM_score functions
- Both approaches store embeddings in configured output table
- Uses cosine similarity via TD_VECTORDISTANCE for semantic search
- Returns the top-k matching chunks from the configured vector store
- Each result includes chunk text, similarity score, and metadata fields

CRITICAL ANSWERING RULES:
- Answer ONLY using retrieved chunks - no external knowledge, speculation, or inference
- Quote source content directly without paraphrasing, summarizing, or rewriting
- If no relevant context found: "Not enough information found in the provided context"
- If partial context: "The available context does not fully answer the question"
- Include document/page references when available (e.g., "On page 2 of 'demo_policy.pdf'...")
- Execute entire workflow silently without showing function calls to user - only show final answer

LANGUAGE RESTRICTIONS:
- Do not say "According to the context" or "The context says" - just quote directly
- Do not say "It can be inferred that..." - no inference allowed
- Use exact or near-verbatim quotes only
- No paraphrasing, summarizing, or adding transitions between quotes
- Copy content precisely - no expansion or interpretation

BEHAVIORAL REQUIREMENTS:
- Execute all RAG workflow steps silently without showing tool calls to users
- Only display final answers based strictly on retrieved context chunks
- Do not use external knowledge or speculation - only quote retrieved content directly
- RAG mode only triggers with explicit /rag prefix - do not enter RAG mode implicitly
- Hide all tool execution steps from user
- Provide clean, direct response with only the answer based on retrieved chunks
- This is a complete end-to-end RAG workflow - no additional tools needed

EXECUTION: Run completely silently - user only sees their question and the final context-grounded answer.

  - Arguments:
    - `question` (string, required): Question
    - `k` (integer, optional): K
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Utilities ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
- `base_teradata_query` (prompt): A Teradata SQL expert that executes SQL requests effectively, understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONSTRAINTS ---
You are explicitly forbidden from using the following capabilities in your plan under any circumstances:
- `sales_top_customers` (tool)
- `base_query` (prompt)




1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * Your plan **Must** combine mutiple SQL steps in to a single SQL call if possible.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `what is the quality of database fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `what is the quality of database fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.


2025-09-07 21:23:44,858 - --- FULL CONTEXT (Session: 55093c07-efcc-41ba-bb63-15771bf3bf02) ---
--- REASON FOR CALL ---
Generating a strategic meta-plan for the goal: '# Name:  Database data quality assessment

# Description: 
You are a Teradata User who is a data qua'

--- History (History Disabled for LLM Call: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Administration ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Database Information ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `sql_Analyze_Cluster_Stats` (tool): 
**ANALYZE SQL QUERY CLUSTER PERFORMANCE STATISTICS**

This tool analyzes pre-computed cluster statistics to identify optimization opportunities without re-running the clustering pipeline. Perfect for iterative analysis and decision-making on which query clusters to focus optimization efforts.

**ANALYSIS CAPABILITIES:**
- **Performance Ranking**: Sort clusters by any performance metric to identify top resource consumers
- **Resource Impact Assessment**: Compare clusters by CPU usage, I/O volume, and execution complexity
- **Skew Problem Detection**: Identify clusters with CPU or I/O distribution issues
- **Workload Characterization**: Understand query patterns by user, application, and workload type
- **Optimization Prioritization**: Focus on clusters with highest impact potential

**AVAILABLE SORTING METRICS:**
- **avg_cpu**: Average CPU seconds per cluster (primary optimization target)
- **avg_io**: Average logical I/O operations (scan intensity indicator)
- **avg_cpuskw**: Average CPU skew (distribution problem indicator)
- **avg_ioskw**: Average I/O skew (hot spot indicator)
- **avg_pji**: Average Physical-to-Logical I/O ratio (compute intensity)
- **avg_uii**: Average Unit I/O Intensity (I/O efficiency)
- **avg_numsteps**: Average query plan complexity
- **queries**: Number of queries in cluster (frequency indicator)
- **cluster_silhouette_score**: Clustering quality measure

**PERFORMANCE CATEGORIZATION:**
Automatically categorizes clusters using configurable thresholds (from sql_opt_config.yml):
- **HIGH_CPU_USAGE**: Average CPU > config.performance_thresholds.cpu.high
- **HIGH_IO_USAGE**: Average I/O > config.performance_thresholds.io.high
- **HIGH_CPU_SKEW**: CPU skew > config.performance_thresholds.skew.high
- **HIGH_IO_SKEW**: I/O skew > config.performance_thresholds.skew.high
- **NORMAL**: Clusters within configured normal performance ranges

**TYPICAL ANALYSIS WORKFLOW:**
1. Sort by 'avg_cpu' or 'avg_io' to find highest resource consumers
2. Sort by 'avg_cpuskw' or 'avg_ioskw' to find distribution problems
4. Use limit_results to focus on top problematic clusters

**OPTIMIZATION DECISION FRAMEWORK:**
- **High CPU + High Query Count**: Maximum impact optimization candidates
- **High Skew + Moderate CPU**: Distribution/statistics problems
- **High I/O + Low PJI**: Potential indexing opportunities
- **High NumSteps**: Complex query rewriting candidates

**OUTPUT FORMAT:**
Returns detailed cluster statistics with performance rankings, categories, and metadata for LLM analysis and optimization recommendations.

  - Arguments:
    - `sort_by_metric` (string, optional): Sort By Metric
    - `limit_results` (integer, optional): Limit Results
- `sql_Execute_Full_Pipeline` (tool): 
**COMPLETE SQL QUERY CLUSTERING PIPELINE FOR HIGH-USAGE QUERY OPTIMIZATION**

This tool executes the entire SQL query clustering workflow to identify and analyze high CPU usage queries for optimization opportunities. It's designed for database performance analysts and DBAs who need to systematically identify query optimization candidates.

**FULL PIPELINE WORKFLOW:**
1. **Query Log Extraction**: Extracts SQL queries from DBC.DBQLSqlTbl with comprehensive performance metrics
2. **Performance Metrics Calculation**: Computes CPU skew, I/O skew, PJI (Physical to Logical I/O ratio), UII (Unit I/O Intensity)
3. **Query Tokenization**: Tokenizes SQL text using {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')} tokenizer via ivsm.tokenizer_encode
4. **Embedding Generation**: Creates semantic embeddings using ivsm.IVSM_score with ONNX models
5. **Vector Store Creation**: Converts embeddings to vector columns via ivsm.vector_to_columns
6. **K-Means Clustering**: Groups similar queries using TD_KMeans with optimal K from configuration
7. **Silhouette Analysis**: Calculates clustering quality scores using TD_Silhouette
8. **Statistics Generation**: Creates comprehensive cluster statistics with performance aggregations

**PERFORMANCE METRICS EXPLAINED:**
- **AMPCPUTIME**: Total CPU seconds across all AMPs (primary optimization target)
- **CPUSKW/IOSKW**: CPU/I/O skew ratios (>2.0 indicates distribution problems)
- **PJI**: Physical-to-Logical I/O ratio (higher = more CPU-intensive)
- **UII**: Unit I/O Intensity (higher = more I/O-intensive relative to CPU)
- **LogicalIO**: Total logical I/O operations (indicates scan intensity)
- **NumSteps**: Query plan complexity (higher = more complex plans)

**CONFIGURATION (from sql_opt_config.yml):**
- Uses top {default_max_queries} queries by CPU time (configurable)
- Creates {default_optimal_k} clusters by default (configurable via optimal_k parameter)
- Embedding model: {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')}
- Vector dimensions: {sql_clustering_config.get('embedding', {}).get('vector_length', 384)}
- All database and table names are configurable

**OPTIMIZATION WORKFLOW:**
After running this tool, use:
1. sql_Analyze_Cluster_Stats to identify problematic clusters
2. sql_Retrieve_Cluster_Queries to get actual SQL from target clusters
3. LLM analysis to identify patterns and propose specific optimizations

**USE CASES:**
- Identify query families consuming the most system resources
- Find queries with similar patterns but different performance
- Discover optimization opportunities through clustering analysis
- Prioritize DBA effort on highest-impact query improvements
- Understand workload composition and resource distribution

**PREREQUISITES:**
- DBC.DBQLSqlTbl and DBC.DBQLOgTbl must be accessible
- Embedding models and tokenizers must be installed in feature_ext_db
- Sufficient space in feature_ext_db for intermediate and final tables

  - Arguments:
    - `optimal_k` (integer, optional): Optimal K
    - `max_queries` (integer, optional): Max Queries
- `sql_Retrieve_Cluster_Queries` (tool): 
**RETRIEVE ACTUAL SQL QUERIES FROM SPECIFIC CLUSTERS FOR PATTERN ANALYSIS**

This tool extracts the actual SQL query text and performance metrics from selected clusters, enabling detailed pattern analysis and specific optimization recommendations. Essential for moving from cluster-level analysis to actual query optimization.

**DETAILED ANALYSIS CAPABILITIES:**
- **SQL Pattern Recognition**: Analyze actual query structures, joins, predicates, and functions
- **Performance Correlation**: Connect query patterns to specific performance characteristics
- **Optimization Identification**: Identify common anti-patterns, missing indexes, inefficient joins
- **Code Quality Assessment**: Evaluate query construction, complexity, and best practices
- **Workload Understanding**: See actual business logic and data access patterns

**QUERY SELECTION STRATEGIES:**
- **By CPU Impact**: Sort by 'ampcputime' to focus on highest CPU consumers
- **By I/O Volume**: Sort by 'logicalio' to find scan-intensive queries
- **By Skew Problems**: Sort by 'cpuskw' or 'ioskw' for distribution issues
- **By Complexity**: Sort by 'numsteps' for complex execution plans
- **By Response Time**: Sort by 'response_secs' for user experience impact

**AVAILABLE METRICS FOR SORTING:**
- **ampcputime**: Total CPU seconds (primary optimization target)
- **logicalio**: Total logical I/O operations (scan indicator)
- **cpuskw**: CPU skew ratio (distribution problems)
- **ioskw**: I/O skew ratio (hot spot indicators)
- **pji**: Physical-to-Logical I/O ratio (compute intensity)
- **uii**: Unit I/O Intensity (I/O efficiency)
- **numsteps**: Query execution plan steps (complexity)
- **response_secs**: Wall-clock execution time (user impact)
- **delaytime**: Time spent in queue (concurrency issues)

**AUTOMATIC PERFORMANCE CATEGORIZATION:**
Each query is categorized using configurable thresholds (from sql_opt_config.yml):
- **CPU Categories**: VERY_HIGH_CPU (>config.very_high), HIGH_CPU (>config.high), MEDIUM_CPU (>10s), LOW_CPU
- **CPU Skew**: SEVERE_CPU_SKEW (>config.severe), HIGH_CPU_SKEW (>config.high), MODERATE_CPU_SKEW (>config.moderate), NORMAL
- **I/O Skew**: SEVERE_IO_SKEW (>config.severe), HIGH_IO_SKEW (>config.high), MODERATE_IO_SKEW (>config.moderate), NORMAL

Use thresholds set in config file for, CPU - high, very_high, Skew moderate, high, severe

**TYPICAL OPTIMIZATION WORKFLOW:**
1. Start with clusters identified from sql_Analyze_Cluster_Stats
2. Retrieve top queries by impact metric (usually 'ampcputime')
3. Analyze SQL patterns for common issues:
   - Missing WHERE clauses or inefficient predicates
   - Cartesian products or missing JOIN conditions
   - Inefficient GROUP BY or ORDER BY operations
   - Suboptimal table access patterns
   - Missing or outdated statistics
4. Develop specific optimization recommendations

**QUERY LIMIT STRATEGY:**
- Use the query limit set in config file for  pattern recognition and analysis, unless user specifies a different limit

**OUTPUT INCLUDES:**
- Complete SQL query text for each query
- All performance metrics, user, application, and workload context, cluster membership and rankings
- Performance categories for quick filtering        

  - Arguments:
    - `cluster_ids` (array, required): Cluster Ids
    - `metric` (string, optional): Metric
    - `limit_per_cluster` (integer, optional): Limit Per Cluster
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Uncategorized ---
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
--- Category: Utilities ---
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `rag_Execute_Workflow` (tool): 
Execute complete RAG workflow to answer user questions based on document context.
This tool handles the entire RAG pipeline in a single step when a user query is tagged with /rag.

WORKFLOW STEPS (executed automatically):
1. Configuration setup using configurable values from rag_config.yml
2. Store user query with '/rag ' prefix stripping  
3. Generate query embeddings using either BYOM (ONNXEmbeddings) or IVSM functions based on config
4. Perform semantic search against precomputed chunk embeddings
5. Return context chunks for answer generation

CONFIGURATION VALUES (from rag_config.yml):
- version: 'ivsm' or 'byom' to select embedding approach
- All database names, table names, and model settings are configurable
- Vector store metadata fields are dynamically detected
- Embedding parameters are configurable
- Default chunk retrieval count is configurable
- Default values are provided as fallback

TECHNICAL DETAILS:
- Strips the '/rag ' prefix if present from user questions
- Creates query table if it does not exist (columns: id, txt, created_ts)
- BYOM approach: Uses mldb.ONNXEmbeddings UDF for tokenization and embedding
- IVSM approach: Uses ivsm.tokenizer_encode and ivsm.IVSM_score functions
- Both approaches store embeddings in configured output table
- Uses cosine similarity via TD_VECTORDISTANCE for semantic search
- Returns the top-k matching chunks from the configured vector store
- Each result includes chunk text, similarity score, and metadata fields

CRITICAL ANSWERING RULES:
- Answer ONLY using retrieved chunks - no external knowledge, speculation, or inference
- Quote source content directly without paraphrasing, summarizing, or rewriting
- If no relevant context found: "Not enough information found in the provided context"
- If partial context: "The available context does not fully answer the question"
- Include document/page references when available (e.g., "On page 2 of 'demo_policy.pdf'...")
- Execute entire workflow silently without showing function calls to user - only show final answer

LANGUAGE RESTRICTIONS:
- Do not say "According to the context" or "The context says" - just quote directly
- Do not say "It can be inferred that..." - no inference allowed
- Use exact or near-verbatim quotes only
- No paraphrasing, summarizing, or adding transitions between quotes
- Copy content precisely - no expansion or interpretation

BEHAVIORAL REQUIREMENTS:
- Execute all RAG workflow steps silently without showing tool calls to users
- Only display final answers based strictly on retrieved context chunks
- Do not use external knowledge or speculation - only quote retrieved content directly
- RAG mode only triggers with explicit /rag prefix - do not enter RAG mode implicitly
- Hide all tool execution steps from user
- Provide clean, direct response with only the answer based on retrieved chunks
- This is a complete end-to-end RAG workflow - no additional tools needed

EXECUTION: Run completely silently - user only sees their question and the final context-grounded answer.

  - Arguments:
    - `question` (string, required): Question
    - `k` (integer, optional): K
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Utilities ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
- `base_teradata_query` (prompt): A Teradata SQL expert that executes SQL requests effectively, understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONSTRAINTS ---
You are explicitly forbidden from using the following capabilities in your plan under any circumstances:
- `sales_top_customers` (tool)
- `base_query` (prompt)




1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * Your plan **Must** combine mutiple SQL steps in to a single SQL call if possible.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `what is the quality of database fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `what is the quality of database fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Assess the data quality of the database fitness_db.",
    "executable_prompt": "qlty_databaseQuality",
    "arguments": {
      "database_name": "fitness_db"
    }
  }
]
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Administration ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Database Information ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `sql_Analyze_Cluster_Stats` (tool): 
**ANALYZE SQL QUERY CLUSTER PERFORMANCE STATISTICS**

This tool analyzes pre-computed cluster statistics to identify optimization opportunities without re-running the clustering pipeline. Perfect for iterative analysis and decision-making on which query clusters to focus optimization efforts.

**ANALYSIS CAPABILITIES:**
- **Performance Ranking**: Sort clusters by any performance metric to identify top resource consumers
- **Resource Impact Assessment**: Compare clusters by CPU usage, I/O volume, and execution complexity
- **Skew Problem Detection**: Identify clusters with CPU or I/O distribution issues
- **Workload Characterization**: Understand query patterns by user, application, and workload type
- **Optimization Prioritization**: Focus on clusters with highest impact potential

**AVAILABLE SORTING METRICS:**
- **avg_cpu**: Average CPU seconds per cluster (primary optimization target)
- **avg_io**: Average logical I/O operations (scan intensity indicator)
- **avg_cpuskw**: Average CPU skew (distribution problem indicator)
- **avg_ioskw**: Average I/O skew (hot spot indicator)
- **avg_pji**: Average Physical-to-Logical I/O ratio (compute intensity)
- **avg_uii**: Average Unit I/O Intensity (I/O efficiency)
- **avg_numsteps**: Average query plan complexity
- **queries**: Number of queries in cluster (frequency indicator)
- **cluster_silhouette_score**: Clustering quality measure

**PERFORMANCE CATEGORIZATION:**
Automatically categorizes clusters using configurable thresholds (from sql_opt_config.yml):
- **HIGH_CPU_USAGE**: Average CPU > config.performance_thresholds.cpu.high
- **HIGH_IO_USAGE**: Average I/O > config.performance_thresholds.io.high
- **HIGH_CPU_SKEW**: CPU skew > config.performance_thresholds.skew.high
- **HIGH_IO_SKEW**: I/O skew > config.performance_thresholds.skew.high
- **NORMAL**: Clusters within configured normal performance ranges

**TYPICAL ANALYSIS WORKFLOW:**
1. Sort by 'avg_cpu' or 'avg_io' to find highest resource consumers
2. Sort by 'avg_cpuskw' or 'avg_ioskw' to find distribution problems
4. Use limit_results to focus on top problematic clusters

**OPTIMIZATION DECISION FRAMEWORK:**
- **High CPU + High Query Count**: Maximum impact optimization candidates
- **High Skew + Moderate CPU**: Distribution/statistics problems
- **High I/O + Low PJI**: Potential indexing opportunities
- **High NumSteps**: Complex query rewriting candidates

**OUTPUT FORMAT:**
Returns detailed cluster statistics with performance rankings, categories, and metadata for LLM analysis and optimization recommendations.

  - Arguments:
    - `sort_by_metric` (string, optional): Sort By Metric
    - `limit_results` (integer, optional): Limit Results
- `sql_Execute_Full_Pipeline` (tool): 
**COMPLETE SQL QUERY CLUSTERING PIPELINE FOR HIGH-USAGE QUERY OPTIMIZATION**

This tool executes the entire SQL query clustering workflow to identify and analyze high CPU usage queries for optimization opportunities. It's designed for database performance analysts and DBAs who need to systematically identify query optimization candidates.

**FULL PIPELINE WORKFLOW:**
1. **Query Log Extraction**: Extracts SQL queries from DBC.DBQLSqlTbl with comprehensive performance metrics
2. **Performance Metrics Calculation**: Computes CPU skew, I/O skew, PJI (Physical to Logical I/O ratio), UII (Unit I/O Intensity)
3. **Query Tokenization**: Tokenizes SQL text using {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')} tokenizer via ivsm.tokenizer_encode
4. **Embedding Generation**: Creates semantic embeddings using ivsm.IVSM_score with ONNX models
5. **Vector Store Creation**: Converts embeddings to vector columns via ivsm.vector_to_columns
6. **K-Means Clustering**: Groups similar queries using TD_KMeans with optimal K from configuration
7. **Silhouette Analysis**: Calculates clustering quality scores using TD_Silhouette
8. **Statistics Generation**: Creates comprehensive cluster statistics with performance aggregations

**PERFORMANCE METRICS EXPLAINED:**
- **AMPCPUTIME**: Total CPU seconds across all AMPs (primary optimization target)
- **CPUSKW/IOSKW**: CPU/I/O skew ratios (>2.0 indicates distribution problems)
- **PJI**: Physical-to-Logical I/O ratio (higher = more CPU-intensive)
- **UII**: Unit I/O Intensity (higher = more I/O-intensive relative to CPU)
- **LogicalIO**: Total logical I/O operations (indicates scan intensity)
- **NumSteps**: Query plan complexity (higher = more complex plans)

**CONFIGURATION (from sql_opt_config.yml):**
- Uses top {default_max_queries} queries by CPU time (configurable)
- Creates {default_optimal_k} clusters by default (configurable via optimal_k parameter)
- Embedding model: {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')}
- Vector dimensions: {sql_clustering_config.get('embedding', {}).get('vector_length', 384)}
- All database and table names are configurable

**OPTIMIZATION WORKFLOW:**
After running this tool, use:
1. sql_Analyze_Cluster_Stats to identify problematic clusters
2. sql_Retrieve_Cluster_Queries to get actual SQL from target clusters
3. LLM analysis to identify patterns and propose specific optimizations

**USE CASES:**
- Identify query families consuming the most system resources
- Find queries with similar patterns but different performance
- Discover optimization opportunities through clustering analysis
- Prioritize DBA effort on highest-impact query improvements
- Understand workload composition and resource distribution

**PREREQUISITES:**
- DBC.DBQLSqlTbl and DBC.DBQLOgTbl must be accessible
- Embedding models and tokenizers must be installed in feature_ext_db
- Sufficient space in feature_ext_db for intermediate and final tables

  - Arguments:
    - `optimal_k` (integer, optional): Optimal K
    - `max_queries` (integer, optional): Max Queries
- `sql_Retrieve_Cluster_Queries` (tool): 
**RETRIEVE ACTUAL SQL QUERIES FROM SPECIFIC CLUSTERS FOR PATTERN ANALYSIS**

This tool extracts the actual SQL query text and performance metrics from selected clusters, enabling detailed pattern analysis and specific optimization recommendations. Essential for moving from cluster-level analysis to actual query optimization.

**DETAILED ANALYSIS CAPABILITIES:**
- **SQL Pattern Recognition**: Analyze actual query structures, joins, predicates, and functions
- **Performance Correlation**: Connect query patterns to specific performance characteristics
- **Optimization Identification**: Identify common anti-patterns, missing indexes, inefficient joins
- **Code Quality Assessment**: Evaluate query construction, complexity, and best practices
- **Workload Understanding**: See actual business logic and data access patterns

**QUERY SELECTION STRATEGIES:**
- **By CPU Impact**: Sort by 'ampcputime' to focus on highest CPU consumers
- **By I/O Volume**: Sort by 'logicalio' to find scan-intensive queries
- **By Skew Problems**: Sort by 'cpuskw' or 'ioskw' for distribution issues
- **By Complexity**: Sort by 'numsteps' for complex execution plans
- **By Response Time**: Sort by 'response_secs' for user experience impact

**AVAILABLE METRICS FOR SORTING:**
- **ampcputime**: Total CPU seconds (primary optimization target)
- **logicalio**: Total logical I/O operations (scan indicator)
- **cpuskw**: CPU skew ratio (distribution problems)
- **ioskw**: I/O skew ratio (hot spot indicators)
- **pji**: Physical-to-Logical I/O ratio (compute intensity)
- **uii**: Unit I/O Intensity (I/O efficiency)
- **numsteps**: Query execution plan steps (complexity)
- **response_secs**: Wall-clock execution time (user impact)
- **delaytime**: Time spent in queue (concurrency issues)

**AUTOMATIC PERFORMANCE CATEGORIZATION:**
Each query is categorized using configurable thresholds (from sql_opt_config.yml):
- **CPU Categories**: VERY_HIGH_CPU (>config.very_high), HIGH_CPU (>config.high), MEDIUM_CPU (>10s), LOW_CPU
- **CPU Skew**: SEVERE_CPU_SKEW (>config.severe), HIGH_CPU_SKEW (>config.high), MODERATE_CPU_SKEW (>config.moderate), NORMAL
- **I/O Skew**: SEVERE_IO_SKEW (>config.severe), HIGH_IO_SKEW (>config.high), MODERATE_IO_SKEW (>config.moderate), NORMAL

Use thresholds set in config file for, CPU - high, very_high, Skew moderate, high, severe

**TYPICAL OPTIMIZATION WORKFLOW:**
1. Start with clusters identified from sql_Analyze_Cluster_Stats
2. Retrieve top queries by impact metric (usually 'ampcputime')
3. Analyze SQL patterns for common issues:
   - Missing WHERE clauses or inefficient predicates
   - Cartesian products or missing JOIN conditions
   - Inefficient GROUP BY or ORDER BY operations
   - Suboptimal table access patterns
   - Missing or outdated statistics
4. Develop specific optimization recommendations

**QUERY LIMIT STRATEGY:**
- Use the query limit set in config file for  pattern recognition and analysis, unless user specifies a different limit

**OUTPUT INCLUDES:**
- Complete SQL query text for each query
- All performance metrics, user, application, and workload context, cluster membership and rankings
- Performance categories for quick filtering        

  - Arguments:
    - `cluster_ids` (array, required): Cluster Ids
    - `metric` (string, optional): Metric
    - `limit_per_cluster` (integer, optional): Limit Per Cluster
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Uncategorized ---
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
--- Category: Utilities ---
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `rag_Execute_Workflow` (tool): 
Execute complete RAG workflow to answer user questions based on document context.
This tool handles the entire RAG pipeline in a single step when a user query is tagged with /rag.

WORKFLOW STEPS (executed automatically):
1. Configuration setup using configurable values from rag_config.yml
2. Store user query with '/rag ' prefix stripping  
3. Generate query embeddings using either BYOM (ONNXEmbeddings) or IVSM functions based on config
4. Perform semantic search against precomputed chunk embeddings
5. Return context chunks for answer generation

CONFIGURATION VALUES (from rag_config.yml):
- version: 'ivsm' or 'byom' to select embedding approach
- All database names, table names, and model settings are configurable
- Vector store metadata fields are dynamically detected
- Embedding parameters are configurable
- Default chunk retrieval count is configurable
- Default values are provided as fallback

TECHNICAL DETAILS:
- Strips the '/rag ' prefix if present from user questions
- Creates query table if it does not exist (columns: id, txt, created_ts)
- BYOM approach: Uses mldb.ONNXEmbeddings UDF for tokenization and embedding
- IVSM approach: Uses ivsm.tokenizer_encode and ivsm.IVSM_score functions
- Both approaches store embeddings in configured output table
- Uses cosine similarity via TD_VECTORDISTANCE for semantic search
- Returns the top-k matching chunks from the configured vector store
- Each result includes chunk text, similarity score, and metadata fields

CRITICAL ANSWERING RULES:
- Answer ONLY using retrieved chunks - no external knowledge, speculation, or inference
- Quote source content directly without paraphrasing, summarizing, or rewriting
- If no relevant context found: "Not enough information found in the provided context"
- If partial context: "The available context does not fully answer the question"
- Include document/page references when available (e.g., "On page 2 of 'demo_policy.pdf'...")
- Execute entire workflow silently without showing function calls to user - only show final answer

LANGUAGE RESTRICTIONS:
- Do not say "According to the context" or "The context says" - just quote directly
- Do not say "It can be inferred that..." - no inference allowed
- Use exact or near-verbatim quotes only
- No paraphrasing, summarizing, or adding transitions between quotes
- Copy content precisely - no expansion or interpretation

BEHAVIORAL REQUIREMENTS:
- Execute all RAG workflow steps silently without showing tool calls to users
- Only display final answers based strictly on retrieved context chunks
- Do not use external knowledge or speculation - only quote retrieved content directly
- RAG mode only triggers with explicit /rag prefix - do not enter RAG mode implicitly
- Hide all tool execution steps from user
- Provide clean, direct response with only the answer based on retrieved chunks
- This is a complete end-to-end RAG workflow - no additional tools needed

EXECUTION: Run completely silently - user only sees their question and the final context-grounded answer.

  - Arguments:
    - `question` (string, required): Question
    - `k` (integer, optional): K
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Available Prompts ---
--- Category: Data Quality ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Utilities ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
- `base_teradata_query` (prompt): A Teradata SQL expert that executes SQL requests effectively, understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONSTRAINTS ---
You are explicitly forbidden from using the following capabilities in your plan under any circumstances:
- `sales_top_customers` (tool)
- `base_query` (prompt)




1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * Your plan **Must** combine mutiple SQL steps in to a single SQL call if possible.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `# Name:  Database data quality assessment

# Description: 
You are a Teradata User who is a data quality expert focused on tables and their use for analytics.

# Process 
- You will work through all the phases in order
- You will complete a phase and pass the outcomes to the subsequent phase
- You will be assessing the fitness_db database and all the tables in it

## Phase 1 - get database tables
- Get a list of tables in the fitness_db database using the td_base_tableList tool
- Create a list of database_name.table_name for the next phase

## Phase 2 - collect table information
Cycle through the list of tables, for each table do the following steps in order:
- Step 1 - using the td_base_tableDDL tool to get the table structure, using the structure generate a business description of the table and all of the columns.
- Step 2 - using the qlty_columnSummary tool, gather column statistics for the table
- Step 3 - using the qlty_univariateStatistics tool to get the univariate statistics for a table 
- Step 4 - using the qlty_rowsWithMissingValues tool to get rows with missing values in a table

## Phase 3 - Present results as a dashboard
- At the beginning of the dashboard identify the database
- For each table present the results from phase 2 together
- Ensure that each table is presented the same way
- Use color to highlight points of interest

# Communication guidelines
- Be concise but informative in your explanation
- Clearly indicate which phase you are currently in and only focus on the activities of the current phase
- Summarize the outcome of the phase before moving to the next phase

# Final output
A professional data quality dashboard that is easily navigable.
`
-   Explicit Parameters: 
--- EXPLICIT PARAMETERS ---
The following parameters were explicitly provided for this prompt execution:
- database_name: "fitness_db"

-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.

- Active Prompt: You are currently executing the 'qlty_databaseQuality' prompt. Do not call it again.

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `# Name:  Database data quality assessment

# Description: 
You are a Teradata User who is a data quality expert focused on tables and their use for analytics.

# Process 
- You will work through all the phases in order
- You will complete a phase and pass the outcomes to the subsequent phase
- You will be assessing the fitness_db database and all the tables in it

## Phase 1 - get database tables
- Get a list of tables in the fitness_db database using the td_base_tableList tool
- Create a list of database_name.table_name for the next phase

## Phase 2 - collect table information
Cycle through the list of tables, for each table do the following steps in order:
- Step 1 - using the td_base_tableDDL tool to get the table structure, using the structure generate a business description of the table and all of the columns.
- Step 2 - using the qlty_columnSummary tool, gather column statistics for the table
- Step 3 - using the qlty_univariateStatistics tool to get the univariate statistics for a table 
- Step 4 - using the qlty_rowsWithMissingValues tool to get rows with missing values in a table

## Phase 3 - Present results as a dashboard
- At the beginning of the dashboard identify the database
- For each table present the results from phase 2 together
- Ensure that each table is presented the same way
- Use color to highlight points of interest

# Communication guidelines
- Be concise but informative in your explanation
- Clearly indicate which phase you are currently in and only focus on the activities of the current phase
- Summarize the outcome of the phase before moving to the next phase

# Final output
A professional data quality dashboard that is easily navigable.
`
-   Explicit Parameters: 
--- EXPLICIT PARAMETERS ---
The following parameters were explicitly provided for this prompt execution:
- database_name: "fitness_db"

-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.

- Active Prompt: You are currently executing the 'qlty_databaseQuality' prompt. Do not call it again.

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.


2025-09-07 21:23:53,889 - --- FULL CONTEXT (Session: 55093c07-efcc-41ba-bb63-15771bf3bf02) ---
--- REASON FOR CALL ---
Determining tool constraints for column iteration.

--- History (History Disabled for LLM Call: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Administration ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Database Information ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `sql_Analyze_Cluster_Stats` (tool): 
**ANALYZE SQL QUERY CLUSTER PERFORMANCE STATISTICS**

This tool analyzes pre-computed cluster statistics to identify optimization opportunities without re-running the clustering pipeline. Perfect for iterative analysis and decision-making on which query clusters to focus optimization efforts.

**ANALYSIS CAPABILITIES:**
- **Performance Ranking**: Sort clusters by any performance metric to identify top resource consumers
- **Resource Impact Assessment**: Compare clusters by CPU usage, I/O volume, and execution complexity
- **Skew Problem Detection**: Identify clusters with CPU or I/O distribution issues
- **Workload Characterization**: Understand query patterns by user, application, and workload type
- **Optimization Prioritization**: Focus on clusters with highest impact potential

**AVAILABLE SORTING METRICS:**
- **avg_cpu**: Average CPU seconds per cluster (primary optimization target)
- **avg_io**: Average logical I/O operations (scan intensity indicator)
- **avg_cpuskw**: Average CPU skew (distribution problem indicator)
- **avg_ioskw**: Average I/O skew (hot spot indicator)
- **avg_pji**: Average Physical-to-Logical I/O ratio (compute intensity)
- **avg_uii**: Average Unit I/O Intensity (I/O efficiency)
- **avg_numsteps**: Average query plan complexity
- **queries**: Number of queries in cluster (frequency indicator)
- **cluster_silhouette_score**: Clustering quality measure

**PERFORMANCE CATEGORIZATION:**
Automatically categorizes clusters using configurable thresholds (from sql_opt_config.yml):
- **HIGH_CPU_USAGE**: Average CPU > config.performance_thresholds.cpu.high
- **HIGH_IO_USAGE**: Average I/O > config.performance_thresholds.io.high
- **HIGH_CPU_SKEW**: CPU skew > config.performance_thresholds.skew.high
- **HIGH_IO_SKEW**: I/O skew > config.performance_thresholds.skew.high
- **NORMAL**: Clusters within configured normal performance ranges

**TYPICAL ANALYSIS WORKFLOW:**
1. Sort by 'avg_cpu' or 'avg_io' to find highest resource consumers
2. Sort by 'avg_cpuskw' or 'avg_ioskw' to find distribution problems
4. Use limit_results to focus on top problematic clusters

**OPTIMIZATION DECISION FRAMEWORK:**
- **High CPU + High Query Count**: Maximum impact optimization candidates
- **High Skew + Moderate CPU**: Distribution/statistics problems
- **High I/O + Low PJI**: Potential indexing opportunities
- **High NumSteps**: Complex query rewriting candidates

**OUTPUT FORMAT:**
Returns detailed cluster statistics with performance rankings, categories, and metadata for LLM analysis and optimization recommendations.

  - Arguments:
    - `sort_by_metric` (string, optional): Sort By Metric
    - `limit_results` (integer, optional): Limit Results
- `sql_Execute_Full_Pipeline` (tool): 
**COMPLETE SQL QUERY CLUSTERING PIPELINE FOR HIGH-USAGE QUERY OPTIMIZATION**

This tool executes the entire SQL query clustering workflow to identify and analyze high CPU usage queries for optimization opportunities. It's designed for database performance analysts and DBAs who need to systematically identify query optimization candidates.

**FULL PIPELINE WORKFLOW:**
1. **Query Log Extraction**: Extracts SQL queries from DBC.DBQLSqlTbl with comprehensive performance metrics
2. **Performance Metrics Calculation**: Computes CPU skew, I/O skew, PJI (Physical to Logical I/O ratio), UII (Unit I/O Intensity)
3. **Query Tokenization**: Tokenizes SQL text using {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')} tokenizer via ivsm.tokenizer_encode
4. **Embedding Generation**: Creates semantic embeddings using ivsm.IVSM_score with ONNX models
5. **Vector Store Creation**: Converts embeddings to vector columns via ivsm.vector_to_columns
6. **K-Means Clustering**: Groups similar queries using TD_KMeans with optimal K from configuration
7. **Silhouette Analysis**: Calculates clustering quality scores using TD_Silhouette
8. **Statistics Generation**: Creates comprehensive cluster statistics with performance aggregations

**PERFORMANCE METRICS EXPLAINED:**
- **AMPCPUTIME**: Total CPU seconds across all AMPs (primary optimization target)
- **CPUSKW/IOSKW**: CPU/I/O skew ratios (>2.0 indicates distribution problems)
- **PJI**: Physical-to-Logical I/O ratio (higher = more CPU-intensive)
- **UII**: Unit I/O Intensity (higher = more I/O-intensive relative to CPU)
- **LogicalIO**: Total logical I/O operations (indicates scan intensity)
- **NumSteps**: Query plan complexity (higher = more complex plans)

**CONFIGURATION (from sql_opt_config.yml):**
- Uses top {default_max_queries} queries by CPU time (configurable)
- Creates {default_optimal_k} clusters by default (configurable via optimal_k parameter)
- Embedding model: {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')}
- Vector dimensions: {sql_clustering_config.get('embedding', {}).get('vector_length', 384)}
- All database and table names are configurable

**OPTIMIZATION WORKFLOW:**
After running this tool, use:
1. sql_Analyze_Cluster_Stats to identify problematic clusters
2. sql_Retrieve_Cluster_Queries to get actual SQL from target clusters
3. LLM analysis to identify patterns and propose specific optimizations

**USE CASES:**
- Identify query families consuming the most system resources
- Find queries with similar patterns but different performance
- Discover optimization opportunities through clustering analysis
- Prioritize DBA effort on highest-impact query improvements
- Understand workload composition and resource distribution

**PREREQUISITES:**
- DBC.DBQLSqlTbl and DBC.DBQLOgTbl must be accessible
- Embedding models and tokenizers must be installed in feature_ext_db
- Sufficient space in feature_ext_db for intermediate and final tables

  - Arguments:
    - `optimal_k` (integer, optional): Optimal K
    - `max_queries` (integer, optional): Max Queries
- `sql_Retrieve_Cluster_Queries` (tool): 
**RETRIEVE ACTUAL SQL QUERIES FROM SPECIFIC CLUSTERS FOR PATTERN ANALYSIS**

This tool extracts the actual SQL query text and performance metrics from selected clusters, enabling detailed pattern analysis and specific optimization recommendations. Essential for moving from cluster-level analysis to actual query optimization.

**DETAILED ANALYSIS CAPABILITIES:**
- **SQL Pattern Recognition**: Analyze actual query structures, joins, predicates, and functions
- **Performance Correlation**: Connect query patterns to specific performance characteristics
- **Optimization Identification**: Identify common anti-patterns, missing indexes, inefficient joins
- **Code Quality Assessment**: Evaluate query construction, complexity, and best practices
- **Workload Understanding**: See actual business logic and data access patterns

**QUERY SELECTION STRATEGIES:**
- **By CPU Impact**: Sort by 'ampcputime' to focus on highest CPU consumers
- **By I/O Volume**: Sort by 'logicalio' to find scan-intensive queries
- **By Skew Problems**: Sort by 'cpuskw' or 'ioskw' for distribution issues
- **By Complexity**: Sort by 'numsteps' for complex execution plans
- **By Response Time**: Sort by 'response_secs' for user experience impact

**AVAILABLE METRICS FOR SORTING:**
- **ampcputime**: Total CPU seconds (primary optimization target)
- **logicalio**: Total logical I/O operations (scan indicator)
- **cpuskw**: CPU skew ratio (distribution problems)
- **ioskw**: I/O skew ratio (hot spot indicators)
- **pji**: Physical-to-Logical I/O ratio (compute intensity)
- **uii**: Unit I/O Intensity (I/O efficiency)
- **numsteps**: Query execution plan steps (complexity)
- **response_secs**: Wall-clock execution time (user impact)
- **delaytime**: Time spent in queue (concurrency issues)

**AUTOMATIC PERFORMANCE CATEGORIZATION:**
Each query is categorized using configurable thresholds (from sql_opt_config.yml):
- **CPU Categories**: VERY_HIGH_CPU (>config.very_high), HIGH_CPU (>config.high), MEDIUM_CPU (>10s), LOW_CPU
- **CPU Skew**: SEVERE_CPU_SKEW (>config.severe), HIGH_CPU_SKEW (>config.high), MODERATE_CPU_SKEW (>config.moderate), NORMAL
- **I/O Skew**: SEVERE_IO_SKEW (>config.severe), HIGH_IO_SKEW (>config.high), MODERATE_IO_SKEW (>config.moderate), NORMAL

Use thresholds set in config file for, CPU - high, very_high, Skew moderate, high, severe

**TYPICAL OPTIMIZATION WORKFLOW:**
1. Start with clusters identified from sql_Analyze_Cluster_Stats
2. Retrieve top queries by impact metric (usually 'ampcputime')
3. Analyze SQL patterns for common issues:
   - Missing WHERE clauses or inefficient predicates
   - Cartesian products or missing JOIN conditions
   - Inefficient GROUP BY or ORDER BY operations
   - Suboptimal table access patterns
   - Missing or outdated statistics
4. Develop specific optimization recommendations

**QUERY LIMIT STRATEGY:**
- Use the query limit set in config file for  pattern recognition and analysis, unless user specifies a different limit

**OUTPUT INCLUDES:**
- Complete SQL query text for each query
- All performance metrics, user, application, and workload context, cluster membership and rankings
- Performance categories for quick filtering        

  - Arguments:
    - `cluster_ids` (array, required): Cluster Ids
    - `metric` (string, optional): Metric
    - `limit_per_cluster` (integer, optional): Limit Per Cluster
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Uncategorized ---
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
--- Category: Utilities ---
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `rag_Execute_Workflow` (tool): 
Execute complete RAG workflow to answer user questions based on document context.
This tool handles the entire RAG pipeline in a single step when a user query is tagged with /rag.

WORKFLOW STEPS (executed automatically):
1. Configuration setup using configurable values from rag_config.yml
2. Store user query with '/rag ' prefix stripping  
3. Generate query embeddings using either BYOM (ONNXEmbeddings) or IVSM functions based on config
4. Perform semantic search against precomputed chunk embeddings
5. Return context chunks for answer generation

CONFIGURATION VALUES (from rag_config.yml):
- version: 'ivsm' or 'byom' to select embedding approach
- All database names, table names, and model settings are configurable
- Vector store metadata fields are dynamically detected
- Embedding parameters are configurable
- Default chunk retrieval count is configurable
- Default values are provided as fallback

TECHNICAL DETAILS:
- Strips the '/rag ' prefix if present from user questions
- Creates query table if it does not exist (columns: id, txt, created_ts)
- BYOM approach: Uses mldb.ONNXEmbeddings UDF for tokenization and embedding
- IVSM approach: Uses ivsm.tokenizer_encode and ivsm.IVSM_score functions
- Both approaches store embeddings in configured output table
- Uses cosine similarity via TD_VECTORDISTANCE for semantic search
- Returns the top-k matching chunks from the configured vector store
- Each result includes chunk text, similarity score, and metadata fields

CRITICAL ANSWERING RULES:
- Answer ONLY using retrieved chunks - no external knowledge, speculation, or inference
- Quote source content directly without paraphrasing, summarizing, or rewriting
- If no relevant context found: "Not enough information found in the provided context"
- If partial context: "The available context does not fully answer the question"
- Include document/page references when available (e.g., "On page 2 of 'demo_policy.pdf'...")
- Execute entire workflow silently without showing function calls to user - only show final answer

LANGUAGE RESTRICTIONS:
- Do not say "According to the context" or "The context says" - just quote directly
- Do not say "It can be inferred that..." - no inference allowed
- Use exact or near-verbatim quotes only
- No paraphrasing, summarizing, or adding transitions between quotes
- Copy content precisely - no expansion or interpretation

BEHAVIORAL REQUIREMENTS:
- Execute all RAG workflow steps silently without showing tool calls to users
- Only display final answers based strictly on retrieved context chunks
- Do not use external knowledge or speculation - only quote retrieved content directly
- RAG mode only triggers with explicit /rag prefix - do not enter RAG mode implicitly
- Hide all tool execution steps from user
- Provide clean, direct response with only the answer based on retrieved chunks
- This is a complete end-to-end RAG workflow - no additional tools needed

EXECUTION: Run completely silently - user only sees their question and the final context-grounded answer.

  - Arguments:
    - `question` (string, required): Question
    - `k` (integer, optional): K
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Utilities ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
- `base_teradata_query` (prompt): A Teradata SQL expert that executes SQL requests effectively, understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONSTRAINTS ---
You are explicitly forbidden from using the following capabilities in your plan under any circumstances:
- `sales_top_customers` (tool)
- `base_query` (prompt)




1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * Your plan **Must** combine mutiple SQL steps in to a single SQL call if possible.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `what is the quality of database fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `what is the quality of database fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Assess the data quality of the database fitness_db.",
    "executable_prompt": "qlty_databaseQuality",
    "arguments": {
      "database_name": "fitness_db"
    }
  }
]
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Administration ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Database Information ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `sql_Analyze_Cluster_Stats` (tool): 
**ANALYZE SQL QUERY CLUSTER PERFORMANCE STATISTICS**

This tool analyzes pre-computed cluster statistics to identify optimization opportunities without re-running the clustering pipeline. Perfect for iterative analysis and decision-making on which query clusters to focus optimization efforts.

**ANALYSIS CAPABILITIES:**
- **Performance Ranking**: Sort clusters by any performance metric to identify top resource consumers
- **Resource Impact Assessment**: Compare clusters by CPU usage, I/O volume, and execution complexity
- **Skew Problem Detection**: Identify clusters with CPU or I/O distribution issues
- **Workload Characterization**: Understand query patterns by user, application, and workload type
- **Optimization Prioritization**: Focus on clusters with highest impact potential

**AVAILABLE SORTING METRICS:**
- **avg_cpu**: Average CPU seconds per cluster (primary optimization target)
- **avg_io**: Average logical I/O operations (scan intensity indicator)
- **avg_cpuskw**: Average CPU skew (distribution problem indicator)
- **avg_ioskw**: Average I/O skew (hot spot indicator)
- **avg_pji**: Average Physical-to-Logical I/O ratio (compute intensity)
- **avg_uii**: Average Unit I/O Intensity (I/O efficiency)
- **avg_numsteps**: Average query plan complexity
- **queries**: Number of queries in cluster (frequency indicator)
- **cluster_silhouette_score**: Clustering quality measure

**PERFORMANCE CATEGORIZATION:**
Automatically categorizes clusters using configurable thresholds (from sql_opt_config.yml):
- **HIGH_CPU_USAGE**: Average CPU > config.performance_thresholds.cpu.high
- **HIGH_IO_USAGE**: Average I/O > config.performance_thresholds.io.high
- **HIGH_CPU_SKEW**: CPU skew > config.performance_thresholds.skew.high
- **HIGH_IO_SKEW**: I/O skew > config.performance_thresholds.skew.high
- **NORMAL**: Clusters within configured normal performance ranges

**TYPICAL ANALYSIS WORKFLOW:**
1. Sort by 'avg_cpu' or 'avg_io' to find highest resource consumers
2. Sort by 'avg_cpuskw' or 'avg_ioskw' to find distribution problems
4. Use limit_results to focus on top problematic clusters

**OPTIMIZATION DECISION FRAMEWORK:**
- **High CPU + High Query Count**: Maximum impact optimization candidates
- **High Skew + Moderate CPU**: Distribution/statistics problems
- **High I/O + Low PJI**: Potential indexing opportunities
- **High NumSteps**: Complex query rewriting candidates

**OUTPUT FORMAT:**
Returns detailed cluster statistics with performance rankings, categories, and metadata for LLM analysis and optimization recommendations.

  - Arguments:
    - `sort_by_metric` (string, optional): Sort By Metric
    - `limit_results` (integer, optional): Limit Results
- `sql_Execute_Full_Pipeline` (tool): 
**COMPLETE SQL QUERY CLUSTERING PIPELINE FOR HIGH-USAGE QUERY OPTIMIZATION**

This tool executes the entire SQL query clustering workflow to identify and analyze high CPU usage queries for optimization opportunities. It's designed for database performance analysts and DBAs who need to systematically identify query optimization candidates.

**FULL PIPELINE WORKFLOW:**
1. **Query Log Extraction**: Extracts SQL queries from DBC.DBQLSqlTbl with comprehensive performance metrics
2. **Performance Metrics Calculation**: Computes CPU skew, I/O skew, PJI (Physical to Logical I/O ratio), UII (Unit I/O Intensity)
3. **Query Tokenization**: Tokenizes SQL text using {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')} tokenizer via ivsm.tokenizer_encode
4. **Embedding Generation**: Creates semantic embeddings using ivsm.IVSM_score with ONNX models
5. **Vector Store Creation**: Converts embeddings to vector columns via ivsm.vector_to_columns
6. **K-Means Clustering**: Groups similar queries using TD_KMeans with optimal K from configuration
7. **Silhouette Analysis**: Calculates clustering quality scores using TD_Silhouette
8. **Statistics Generation**: Creates comprehensive cluster statistics with performance aggregations

**PERFORMANCE METRICS EXPLAINED:**
- **AMPCPUTIME**: Total CPU seconds across all AMPs (primary optimization target)
- **CPUSKW/IOSKW**: CPU/I/O skew ratios (>2.0 indicates distribution problems)
- **PJI**: Physical-to-Logical I/O ratio (higher = more CPU-intensive)
- **UII**: Unit I/O Intensity (higher = more I/O-intensive relative to CPU)
- **LogicalIO**: Total logical I/O operations (indicates scan intensity)
- **NumSteps**: Query plan complexity (higher = more complex plans)

**CONFIGURATION (from sql_opt_config.yml):**
- Uses top {default_max_queries} queries by CPU time (configurable)
- Creates {default_optimal_k} clusters by default (configurable via optimal_k parameter)
- Embedding model: {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')}
- Vector dimensions: {sql_clustering_config.get('embedding', {}).get('vector_length', 384)}
- All database and table names are configurable

**OPTIMIZATION WORKFLOW:**
After running this tool, use:
1. sql_Analyze_Cluster_Stats to identify problematic clusters
2. sql_Retrieve_Cluster_Queries to get actual SQL from target clusters
3. LLM analysis to identify patterns and propose specific optimizations

**USE CASES:**
- Identify query families consuming the most system resources
- Find queries with similar patterns but different performance
- Discover optimization opportunities through clustering analysis
- Prioritize DBA effort on highest-impact query improvements
- Understand workload composition and resource distribution

**PREREQUISITES:**
- DBC.DBQLSqlTbl and DBC.DBQLOgTbl must be accessible
- Embedding models and tokenizers must be installed in feature_ext_db
- Sufficient space in feature_ext_db for intermediate and final tables

  - Arguments:
    - `optimal_k` (integer, optional): Optimal K
    - `max_queries` (integer, optional): Max Queries
- `sql_Retrieve_Cluster_Queries` (tool): 
**RETRIEVE ACTUAL SQL QUERIES FROM SPECIFIC CLUSTERS FOR PATTERN ANALYSIS**

This tool extracts the actual SQL query text and performance metrics from selected clusters, enabling detailed pattern analysis and specific optimization recommendations. Essential for moving from cluster-level analysis to actual query optimization.

**DETAILED ANALYSIS CAPABILITIES:**
- **SQL Pattern Recognition**: Analyze actual query structures, joins, predicates, and functions
- **Performance Correlation**: Connect query patterns to specific performance characteristics
- **Optimization Identification**: Identify common anti-patterns, missing indexes, inefficient joins
- **Code Quality Assessment**: Evaluate query construction, complexity, and best practices
- **Workload Understanding**: See actual business logic and data access patterns

**QUERY SELECTION STRATEGIES:**
- **By CPU Impact**: Sort by 'ampcputime' to focus on highest CPU consumers
- **By I/O Volume**: Sort by 'logicalio' to find scan-intensive queries
- **By Skew Problems**: Sort by 'cpuskw' or 'ioskw' for distribution issues
- **By Complexity**: Sort by 'numsteps' for complex execution plans
- **By Response Time**: Sort by 'response_secs' for user experience impact

**AVAILABLE METRICS FOR SORTING:**
- **ampcputime**: Total CPU seconds (primary optimization target)
- **logicalio**: Total logical I/O operations (scan indicator)
- **cpuskw**: CPU skew ratio (distribution problems)
- **ioskw**: I/O skew ratio (hot spot indicators)
- **pji**: Physical-to-Logical I/O ratio (compute intensity)
- **uii**: Unit I/O Intensity (I/O efficiency)
- **numsteps**: Query execution plan steps (complexity)
- **response_secs**: Wall-clock execution time (user impact)
- **delaytime**: Time spent in queue (concurrency issues)

**AUTOMATIC PERFORMANCE CATEGORIZATION:**
Each query is categorized using configurable thresholds (from sql_opt_config.yml):
- **CPU Categories**: VERY_HIGH_CPU (>config.very_high), HIGH_CPU (>config.high), MEDIUM_CPU (>10s), LOW_CPU
- **CPU Skew**: SEVERE_CPU_SKEW (>config.severe), HIGH_CPU_SKEW (>config.high), MODERATE_CPU_SKEW (>config.moderate), NORMAL
- **I/O Skew**: SEVERE_IO_SKEW (>config.severe), HIGH_IO_SKEW (>config.high), MODERATE_IO_SKEW (>config.moderate), NORMAL

Use thresholds set in config file for, CPU - high, very_high, Skew moderate, high, severe

**TYPICAL OPTIMIZATION WORKFLOW:**
1. Start with clusters identified from sql_Analyze_Cluster_Stats
2. Retrieve top queries by impact metric (usually 'ampcputime')
3. Analyze SQL patterns for common issues:
   - Missing WHERE clauses or inefficient predicates
   - Cartesian products or missing JOIN conditions
   - Inefficient GROUP BY or ORDER BY operations
   - Suboptimal table access patterns
   - Missing or outdated statistics
4. Develop specific optimization recommendations

**QUERY LIMIT STRATEGY:**
- Use the query limit set in config file for  pattern recognition and analysis, unless user specifies a different limit

**OUTPUT INCLUDES:**
- Complete SQL query text for each query
- All performance metrics, user, application, and workload context, cluster membership and rankings
- Performance categories for quick filtering        

  - Arguments:
    - `cluster_ids` (array, required): Cluster Ids
    - `metric` (string, optional): Metric
    - `limit_per_cluster` (integer, optional): Limit Per Cluster
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Uncategorized ---
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
--- Category: Utilities ---
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `rag_Execute_Workflow` (tool): 
Execute complete RAG workflow to answer user questions based on document context.
This tool handles the entire RAG pipeline in a single step when a user query is tagged with /rag.

WORKFLOW STEPS (executed automatically):
1. Configuration setup using configurable values from rag_config.yml
2. Store user query with '/rag ' prefix stripping  
3. Generate query embeddings using either BYOM (ONNXEmbeddings) or IVSM functions based on config
4. Perform semantic search against precomputed chunk embeddings
5. Return context chunks for answer generation

CONFIGURATION VALUES (from rag_config.yml):
- version: 'ivsm' or 'byom' to select embedding approach
- All database names, table names, and model settings are configurable
- Vector store metadata fields are dynamically detected
- Embedding parameters are configurable
- Default chunk retrieval count is configurable
- Default values are provided as fallback

TECHNICAL DETAILS:
- Strips the '/rag ' prefix if present from user questions
- Creates query table if it does not exist (columns: id, txt, created_ts)
- BYOM approach: Uses mldb.ONNXEmbeddings UDF for tokenization and embedding
- IVSM approach: Uses ivsm.tokenizer_encode and ivsm.IVSM_score functions
- Both approaches store embeddings in configured output table
- Uses cosine similarity via TD_VECTORDISTANCE for semantic search
- Returns the top-k matching chunks from the configured vector store
- Each result includes chunk text, similarity score, and metadata fields

CRITICAL ANSWERING RULES:
- Answer ONLY using retrieved chunks - no external knowledge, speculation, or inference
- Quote source content directly without paraphrasing, summarizing, or rewriting
- If no relevant context found: "Not enough information found in the provided context"
- If partial context: "The available context does not fully answer the question"
- Include document/page references when available (e.g., "On page 2 of 'demo_policy.pdf'...")
- Execute entire workflow silently without showing function calls to user - only show final answer

LANGUAGE RESTRICTIONS:
- Do not say "According to the context" or "The context says" - just quote directly
- Do not say "It can be inferred that..." - no inference allowed
- Use exact or near-verbatim quotes only
- No paraphrasing, summarizing, or adding transitions between quotes
- Copy content precisely - no expansion or interpretation

BEHAVIORAL REQUIREMENTS:
- Execute all RAG workflow steps silently without showing tool calls to users
- Only display final answers based strictly on retrieved context chunks
- Do not use external knowledge or speculation - only quote retrieved content directly
- RAG mode only triggers with explicit /rag prefix - do not enter RAG mode implicitly
- Hide all tool execution steps from user
- Provide clean, direct response with only the answer based on retrieved chunks
- This is a complete end-to-end RAG workflow - no additional tools needed

EXECUTION: Run completely silently - user only sees their question and the final context-grounded answer.

  - Arguments:
    - `question` (string, required): Question
    - `k` (integer, optional): K
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Available Prompts ---
--- Category: Data Quality ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Utilities ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
- `base_teradata_query` (prompt): A Teradata SQL expert that executes SQL requests effectively, understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONSTRAINTS ---
You are explicitly forbidden from using the following capabilities in your plan under any circumstances:
- `sales_top_customers` (tool)
- `base_query` (prompt)




1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * Your plan **Must** combine mutiple SQL steps in to a single SQL call if possible.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `# Name:  Database data quality assessment

# Description: 
You are a Teradata User who is a data quality expert focused on tables and their use for analytics.

# Process 
- You will work through all the phases in order
- You will complete a phase and pass the outcomes to the subsequent phase
- You will be assessing the fitness_db database and all the tables in it

## Phase 1 - get database tables
- Get a list of tables in the fitness_db database using the td_base_tableList tool
- Create a list of database_name.table_name for the next phase

## Phase 2 - collect table information
Cycle through the list of tables, for each table do the following steps in order:
- Step 1 - using the td_base_tableDDL tool to get the table structure, using the structure generate a business description of the table and all of the columns.
- Step 2 - using the qlty_columnSummary tool, gather column statistics for the table
- Step 3 - using the qlty_univariateStatistics tool to get the univariate statistics for a table 
- Step 4 - using the qlty_rowsWithMissingValues tool to get rows with missing values in a table

## Phase 3 - Present results as a dashboard
- At the beginning of the dashboard identify the database
- For each table present the results from phase 2 together
- Ensure that each table is presented the same way
- Use color to highlight points of interest

# Communication guidelines
- Be concise but informative in your explanation
- Clearly indicate which phase you are currently in and only focus on the activities of the current phase
- Summarize the outcome of the phase before moving to the next phase

# Final output
A professional data quality dashboard that is easily navigable.
`
-   Explicit Parameters: 
--- EXPLICIT PARAMETERS ---
The following parameters were explicitly provided for this prompt execution:
- database_name: "fitness_db"

-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.

- Active Prompt: You are currently executing the 'qlty_databaseQuality' prompt. Do not call it again.

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `# Name:  Database data quality assessment

# Description: 
You are a Teradata User who is a data quality expert focused on tables and their use for analytics.

# Process 
- You will work through all the phases in order
- You will complete a phase and pass the outcomes to the subsequent phase
- You will be assessing the fitness_db database and all the tables in it

## Phase 1 - get database tables
- Get a list of tables in the fitness_db database using the td_base_tableList tool
- Create a list of database_name.table_name for the next phase

## Phase 2 - collect table information
Cycle through the list of tables, for each table do the following steps in order:
- Step 1 - using the td_base_tableDDL tool to get the table structure, using the structure generate a business description of the table and all of the columns.
- Step 2 - using the qlty_columnSummary tool, gather column statistics for the table
- Step 3 - using the qlty_univariateStatistics tool to get the univariate statistics for a table 
- Step 4 - using the qlty_rowsWithMissingValues tool to get rows with missing values in a table

## Phase 3 - Present results as a dashboard
- At the beginning of the dashboard identify the database
- For each table present the results from phase 2 together
- Ensure that each table is presented the same way
- Use color to highlight points of interest

# Communication guidelines
- Be concise but informative in your explanation
- Clearly indicate which phase you are currently in and only focus on the activities of the current phase
- Summarize the outcome of the phase before moving to the next phase

# Final output
A professional data quality dashboard that is easily navigable.
`
-   Explicit Parameters: 
--- EXPLICIT PARAMETERS ---
The following parameters were explicitly provided for this prompt execution:
- database_name: "fitness_db"

-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.

- Active Prompt: You are currently executing the 'qlty_databaseQuality' prompt. Do not call it again.

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of tables in the fitness_db database.",
    "relevant_tools": [
      "base_tableList"
    ],
    "arguments": {
      "database_name": "fitness_db"
    }
  },
  {
    "phase": 2,
    "goal": "For each table in the list from Phase 1, get the table DDL, column summary, univariate statistics, and rows with missing values.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [
      "base_tableDDL"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "result_of_phase_1.table_name"
    }
  },
  {
    "phase": 3,
    "goal": "For each table in the list from Phase 1, get the column summary.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [
      "qlty_columnSummary"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "result_of_phase_1.table_name"
    }
  },
  {
    "phase": 4,
    "goal": "For each table in the list from Phase 1, get the univariate statistics.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [
      "qlty_univariateStatistics"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "result_of_phase_1.table_name"
    }
  },
  {
    "phase": 5,
    "goal": "For each table in the list from Phase 1, get the rows with missing values.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [
      "qlty_rowsWithMissingValues"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "result_of_phase_1.table_name",
      "column_name": "result_of_phase_1.column_name"
    }
  },
  {
    "phase": 6,
    "goal": "Present results as a dashboard, identifying the database, presenting results from phase 2-5 together for each table, ensuring consistent presentation, and using color to highlight points of interest.",
    "relevant_tools": [
      "CoreLLMTask"
    ],
    "arguments": {
      "task_description": "# Name:  Database data quality assessment\n\n# Description: \nYou are a Teradata User who is a data quality expert focused on tables and their use for analytics.\n\n# Process \n- You will work through all the phases in order\n- You will complete a phase and pass the outcomes to the subsequent phase\n- You will be assessing the fitness_db database and all the tables in it\n\n## Phase 1 - get database tables\n- Get a list of tables in the fitness_db database using the td_base_tableList tool\n- Create a list of database_name.table_name for the next phase\n\n## Phase 2 - collect table information\nCycle through the list of tables, for each table do the following steps in order:\n- Step 1 - using the td_base_tableDDL tool to get the table structure, using the structure generate a business description of the table and all of the columns.\n- Step 2 - using the qlty_columnSummary tool, gather column statistics for the table\n- Step 3 - using the qlty_univariateStatistics tool to get the univariate statistics for a table \n- Step 4 - using the qlty_rowsWithMissingValues tool to get rows with missing values in a table\n\n## Phase 3 - Present results as a dashboard\n- At the beginning of the dashboard identify the database\n- For each table present the results from phase 2 together\n- Ensure that each table is presented the same way\n- Use color to highlight points of interest\n\n# Communication guidelines\n- Be concise but informative in your explanation\n- Clearly indicate which phase you are currently in and only focus on the activities of the current phase\n- Summarize the outcome of the phase before moving to the next phase\n\n# Final output\nA professional data quality dashboard that is easily navigable.\n",
      "source_data": [
        "result_of_phase_2",
        "result_of_phase_3",
        "result_of_phase_4",
        "result_of_phase_5"
      ]
    }
  }
]
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:
You are a JSON-only responding assistant.

USER PROMPT:
Analyze the tool to determine if its `column_name` argument is for 'numeric', 'character', or 'any' type.
Tool: `qlty_univariateStatistics`
Description: "Get the univariate statistics for a table."
Hint: This tool is for quantitative analysis and requires a 'numeric' data type for `column_name`.
Respond with a single JSON object: {"dataType": "numeric" | "character" | "any"}

2025-09-07 21:24:02,110 - --- FULL CONTEXT (Session: 55093c07-efcc-41ba-bb63-15771bf3bf02) ---
--- REASON FOR CALL ---
Determining tool constraints for column iteration.

--- History (History Disabled for LLM Call: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Administration ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Database Information ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `sql_Analyze_Cluster_Stats` (tool): 
**ANALYZE SQL QUERY CLUSTER PERFORMANCE STATISTICS**

This tool analyzes pre-computed cluster statistics to identify optimization opportunities without re-running the clustering pipeline. Perfect for iterative analysis and decision-making on which query clusters to focus optimization efforts.

**ANALYSIS CAPABILITIES:**
- **Performance Ranking**: Sort clusters by any performance metric to identify top resource consumers
- **Resource Impact Assessment**: Compare clusters by CPU usage, I/O volume, and execution complexity
- **Skew Problem Detection**: Identify clusters with CPU or I/O distribution issues
- **Workload Characterization**: Understand query patterns by user, application, and workload type
- **Optimization Prioritization**: Focus on clusters with highest impact potential

**AVAILABLE SORTING METRICS:**
- **avg_cpu**: Average CPU seconds per cluster (primary optimization target)
- **avg_io**: Average logical I/O operations (scan intensity indicator)
- **avg_cpuskw**: Average CPU skew (distribution problem indicator)
- **avg_ioskw**: Average I/O skew (hot spot indicator)
- **avg_pji**: Average Physical-to-Logical I/O ratio (compute intensity)
- **avg_uii**: Average Unit I/O Intensity (I/O efficiency)
- **avg_numsteps**: Average query plan complexity
- **queries**: Number of queries in cluster (frequency indicator)
- **cluster_silhouette_score**: Clustering quality measure

**PERFORMANCE CATEGORIZATION:**
Automatically categorizes clusters using configurable thresholds (from sql_opt_config.yml):
- **HIGH_CPU_USAGE**: Average CPU > config.performance_thresholds.cpu.high
- **HIGH_IO_USAGE**: Average I/O > config.performance_thresholds.io.high
- **HIGH_CPU_SKEW**: CPU skew > config.performance_thresholds.skew.high
- **HIGH_IO_SKEW**: I/O skew > config.performance_thresholds.skew.high
- **NORMAL**: Clusters within configured normal performance ranges

**TYPICAL ANALYSIS WORKFLOW:**
1. Sort by 'avg_cpu' or 'avg_io' to find highest resource consumers
2. Sort by 'avg_cpuskw' or 'avg_ioskw' to find distribution problems
4. Use limit_results to focus on top problematic clusters

**OPTIMIZATION DECISION FRAMEWORK:**
- **High CPU + High Query Count**: Maximum impact optimization candidates
- **High Skew + Moderate CPU**: Distribution/statistics problems
- **High I/O + Low PJI**: Potential indexing opportunities
- **High NumSteps**: Complex query rewriting candidates

**OUTPUT FORMAT:**
Returns detailed cluster statistics with performance rankings, categories, and metadata for LLM analysis and optimization recommendations.

  - Arguments:
    - `sort_by_metric` (string, optional): Sort By Metric
    - `limit_results` (integer, optional): Limit Results
- `sql_Execute_Full_Pipeline` (tool): 
**COMPLETE SQL QUERY CLUSTERING PIPELINE FOR HIGH-USAGE QUERY OPTIMIZATION**

This tool executes the entire SQL query clustering workflow to identify and analyze high CPU usage queries for optimization opportunities. It's designed for database performance analysts and DBAs who need to systematically identify query optimization candidates.

**FULL PIPELINE WORKFLOW:**
1. **Query Log Extraction**: Extracts SQL queries from DBC.DBQLSqlTbl with comprehensive performance metrics
2. **Performance Metrics Calculation**: Computes CPU skew, I/O skew, PJI (Physical to Logical I/O ratio), UII (Unit I/O Intensity)
3. **Query Tokenization**: Tokenizes SQL text using {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')} tokenizer via ivsm.tokenizer_encode
4. **Embedding Generation**: Creates semantic embeddings using ivsm.IVSM_score with ONNX models
5. **Vector Store Creation**: Converts embeddings to vector columns via ivsm.vector_to_columns
6. **K-Means Clustering**: Groups similar queries using TD_KMeans with optimal K from configuration
7. **Silhouette Analysis**: Calculates clustering quality scores using TD_Silhouette
8. **Statistics Generation**: Creates comprehensive cluster statistics with performance aggregations

**PERFORMANCE METRICS EXPLAINED:**
- **AMPCPUTIME**: Total CPU seconds across all AMPs (primary optimization target)
- **CPUSKW/IOSKW**: CPU/I/O skew ratios (>2.0 indicates distribution problems)
- **PJI**: Physical-to-Logical I/O ratio (higher = more CPU-intensive)
- **UII**: Unit I/O Intensity (higher = more I/O-intensive relative to CPU)
- **LogicalIO**: Total logical I/O operations (indicates scan intensity)
- **NumSteps**: Query plan complexity (higher = more complex plans)

**CONFIGURATION (from sql_opt_config.yml):**
- Uses top {default_max_queries} queries by CPU time (configurable)
- Creates {default_optimal_k} clusters by default (configurable via optimal_k parameter)
- Embedding model: {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')}
- Vector dimensions: {sql_clustering_config.get('embedding', {}).get('vector_length', 384)}
- All database and table names are configurable

**OPTIMIZATION WORKFLOW:**
After running this tool, use:
1. sql_Analyze_Cluster_Stats to identify problematic clusters
2. sql_Retrieve_Cluster_Queries to get actual SQL from target clusters
3. LLM analysis to identify patterns and propose specific optimizations

**USE CASES:**
- Identify query families consuming the most system resources
- Find queries with similar patterns but different performance
- Discover optimization opportunities through clustering analysis
- Prioritize DBA effort on highest-impact query improvements
- Understand workload composition and resource distribution

**PREREQUISITES:**
- DBC.DBQLSqlTbl and DBC.DBQLOgTbl must be accessible
- Embedding models and tokenizers must be installed in feature_ext_db
- Sufficient space in feature_ext_db for intermediate and final tables

  - Arguments:
    - `optimal_k` (integer, optional): Optimal K
    - `max_queries` (integer, optional): Max Queries
- `sql_Retrieve_Cluster_Queries` (tool): 
**RETRIEVE ACTUAL SQL QUERIES FROM SPECIFIC CLUSTERS FOR PATTERN ANALYSIS**

This tool extracts the actual SQL query text and performance metrics from selected clusters, enabling detailed pattern analysis and specific optimization recommendations. Essential for moving from cluster-level analysis to actual query optimization.

**DETAILED ANALYSIS CAPABILITIES:**
- **SQL Pattern Recognition**: Analyze actual query structures, joins, predicates, and functions
- **Performance Correlation**: Connect query patterns to specific performance characteristics
- **Optimization Identification**: Identify common anti-patterns, missing indexes, inefficient joins
- **Code Quality Assessment**: Evaluate query construction, complexity, and best practices
- **Workload Understanding**: See actual business logic and data access patterns

**QUERY SELECTION STRATEGIES:**
- **By CPU Impact**: Sort by 'ampcputime' to focus on highest CPU consumers
- **By I/O Volume**: Sort by 'logicalio' to find scan-intensive queries
- **By Skew Problems**: Sort by 'cpuskw' or 'ioskw' for distribution issues
- **By Complexity**: Sort by 'numsteps' for complex execution plans
- **By Response Time**: Sort by 'response_secs' for user experience impact

**AVAILABLE METRICS FOR SORTING:**
- **ampcputime**: Total CPU seconds (primary optimization target)
- **logicalio**: Total logical I/O operations (scan indicator)
- **cpuskw**: CPU skew ratio (distribution problems)
- **ioskw**: I/O skew ratio (hot spot indicators)
- **pji**: Physical-to-Logical I/O ratio (compute intensity)
- **uii**: Unit I/O Intensity (I/O efficiency)
- **numsteps**: Query execution plan steps (complexity)
- **response_secs**: Wall-clock execution time (user impact)
- **delaytime**: Time spent in queue (concurrency issues)

**AUTOMATIC PERFORMANCE CATEGORIZATION:**
Each query is categorized using configurable thresholds (from sql_opt_config.yml):
- **CPU Categories**: VERY_HIGH_CPU (>config.very_high), HIGH_CPU (>config.high), MEDIUM_CPU (>10s), LOW_CPU
- **CPU Skew**: SEVERE_CPU_SKEW (>config.severe), HIGH_CPU_SKEW (>config.high), MODERATE_CPU_SKEW (>config.moderate), NORMAL
- **I/O Skew**: SEVERE_IO_SKEW (>config.severe), HIGH_IO_SKEW (>config.high), MODERATE_IO_SKEW (>config.moderate), NORMAL

Use thresholds set in config file for, CPU - high, very_high, Skew moderate, high, severe

**TYPICAL OPTIMIZATION WORKFLOW:**
1. Start with clusters identified from sql_Analyze_Cluster_Stats
2. Retrieve top queries by impact metric (usually 'ampcputime')
3. Analyze SQL patterns for common issues:
   - Missing WHERE clauses or inefficient predicates
   - Cartesian products or missing JOIN conditions
   - Inefficient GROUP BY or ORDER BY operations
   - Suboptimal table access patterns
   - Missing or outdated statistics
4. Develop specific optimization recommendations

**QUERY LIMIT STRATEGY:**
- Use the query limit set in config file for  pattern recognition and analysis, unless user specifies a different limit

**OUTPUT INCLUDES:**
- Complete SQL query text for each query
- All performance metrics, user, application, and workload context, cluster membership and rankings
- Performance categories for quick filtering        

  - Arguments:
    - `cluster_ids` (array, required): Cluster Ids
    - `metric` (string, optional): Metric
    - `limit_per_cluster` (integer, optional): Limit Per Cluster
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Uncategorized ---
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
--- Category: Utilities ---
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `rag_Execute_Workflow` (tool): 
Execute complete RAG workflow to answer user questions based on document context.
This tool handles the entire RAG pipeline in a single step when a user query is tagged with /rag.

WORKFLOW STEPS (executed automatically):
1. Configuration setup using configurable values from rag_config.yml
2. Store user query with '/rag ' prefix stripping  
3. Generate query embeddings using either BYOM (ONNXEmbeddings) or IVSM functions based on config
4. Perform semantic search against precomputed chunk embeddings
5. Return context chunks for answer generation

CONFIGURATION VALUES (from rag_config.yml):
- version: 'ivsm' or 'byom' to select embedding approach
- All database names, table names, and model settings are configurable
- Vector store metadata fields are dynamically detected
- Embedding parameters are configurable
- Default chunk retrieval count is configurable
- Default values are provided as fallback

TECHNICAL DETAILS:
- Strips the '/rag ' prefix if present from user questions
- Creates query table if it does not exist (columns: id, txt, created_ts)
- BYOM approach: Uses mldb.ONNXEmbeddings UDF for tokenization and embedding
- IVSM approach: Uses ivsm.tokenizer_encode and ivsm.IVSM_score functions
- Both approaches store embeddings in configured output table
- Uses cosine similarity via TD_VECTORDISTANCE for semantic search
- Returns the top-k matching chunks from the configured vector store
- Each result includes chunk text, similarity score, and metadata fields

CRITICAL ANSWERING RULES:
- Answer ONLY using retrieved chunks - no external knowledge, speculation, or inference
- Quote source content directly without paraphrasing, summarizing, or rewriting
- If no relevant context found: "Not enough information found in the provided context"
- If partial context: "The available context does not fully answer the question"
- Include document/page references when available (e.g., "On page 2 of 'demo_policy.pdf'...")
- Execute entire workflow silently without showing function calls to user - only show final answer

LANGUAGE RESTRICTIONS:
- Do not say "According to the context" or "The context says" - just quote directly
- Do not say "It can be inferred that..." - no inference allowed
- Use exact or near-verbatim quotes only
- No paraphrasing, summarizing, or adding transitions between quotes
- Copy content precisely - no expansion or interpretation

BEHAVIORAL REQUIREMENTS:
- Execute all RAG workflow steps silently without showing tool calls to users
- Only display final answers based strictly on retrieved context chunks
- Do not use external knowledge or speculation - only quote retrieved content directly
- RAG mode only triggers with explicit /rag prefix - do not enter RAG mode implicitly
- Hide all tool execution steps from user
- Provide clean, direct response with only the answer based on retrieved chunks
- This is a complete end-to-end RAG workflow - no additional tools needed

EXECUTION: Run completely silently - user only sees their question and the final context-grounded answer.

  - Arguments:
    - `question` (string, required): Question
    - `k` (integer, optional): K
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Utilities ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
- `base_teradata_query` (prompt): A Teradata SQL expert that executes SQL requests effectively, understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONSTRAINTS ---
You are explicitly forbidden from using the following capabilities in your plan under any circumstances:
- `sales_top_customers` (tool)
- `base_query` (prompt)




1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * Your plan **Must** combine mutiple SQL steps in to a single SQL call if possible.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `what is the quality of database fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `what is the quality of database fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Assess the data quality of the database fitness_db.",
    "executable_prompt": "qlty_databaseQuality",
    "arguments": {
      "database_name": "fitness_db"
    }
  }
]
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Administration ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Database Information ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `sql_Analyze_Cluster_Stats` (tool): 
**ANALYZE SQL QUERY CLUSTER PERFORMANCE STATISTICS**

This tool analyzes pre-computed cluster statistics to identify optimization opportunities without re-running the clustering pipeline. Perfect for iterative analysis and decision-making on which query clusters to focus optimization efforts.

**ANALYSIS CAPABILITIES:**
- **Performance Ranking**: Sort clusters by any performance metric to identify top resource consumers
- **Resource Impact Assessment**: Compare clusters by CPU usage, I/O volume, and execution complexity
- **Skew Problem Detection**: Identify clusters with CPU or I/O distribution issues
- **Workload Characterization**: Understand query patterns by user, application, and workload type
- **Optimization Prioritization**: Focus on clusters with highest impact potential

**AVAILABLE SORTING METRICS:**
- **avg_cpu**: Average CPU seconds per cluster (primary optimization target)
- **avg_io**: Average logical I/O operations (scan intensity indicator)
- **avg_cpuskw**: Average CPU skew (distribution problem indicator)
- **avg_ioskw**: Average I/O skew (hot spot indicator)
- **avg_pji**: Average Physical-to-Logical I/O ratio (compute intensity)
- **avg_uii**: Average Unit I/O Intensity (I/O efficiency)
- **avg_numsteps**: Average query plan complexity
- **queries**: Number of queries in cluster (frequency indicator)
- **cluster_silhouette_score**: Clustering quality measure

**PERFORMANCE CATEGORIZATION:**
Automatically categorizes clusters using configurable thresholds (from sql_opt_config.yml):
- **HIGH_CPU_USAGE**: Average CPU > config.performance_thresholds.cpu.high
- **HIGH_IO_USAGE**: Average I/O > config.performance_thresholds.io.high
- **HIGH_CPU_SKEW**: CPU skew > config.performance_thresholds.skew.high
- **HIGH_IO_SKEW**: I/O skew > config.performance_thresholds.skew.high
- **NORMAL**: Clusters within configured normal performance ranges

**TYPICAL ANALYSIS WORKFLOW:**
1. Sort by 'avg_cpu' or 'avg_io' to find highest resource consumers
2. Sort by 'avg_cpuskw' or 'avg_ioskw' to find distribution problems
4. Use limit_results to focus on top problematic clusters

**OPTIMIZATION DECISION FRAMEWORK:**
- **High CPU + High Query Count**: Maximum impact optimization candidates
- **High Skew + Moderate CPU**: Distribution/statistics problems
- **High I/O + Low PJI**: Potential indexing opportunities
- **High NumSteps**: Complex query rewriting candidates

**OUTPUT FORMAT:**
Returns detailed cluster statistics with performance rankings, categories, and metadata for LLM analysis and optimization recommendations.

  - Arguments:
    - `sort_by_metric` (string, optional): Sort By Metric
    - `limit_results` (integer, optional): Limit Results
- `sql_Execute_Full_Pipeline` (tool): 
**COMPLETE SQL QUERY CLUSTERING PIPELINE FOR HIGH-USAGE QUERY OPTIMIZATION**

This tool executes the entire SQL query clustering workflow to identify and analyze high CPU usage queries for optimization opportunities. It's designed for database performance analysts and DBAs who need to systematically identify query optimization candidates.

**FULL PIPELINE WORKFLOW:**
1. **Query Log Extraction**: Extracts SQL queries from DBC.DBQLSqlTbl with comprehensive performance metrics
2. **Performance Metrics Calculation**: Computes CPU skew, I/O skew, PJI (Physical to Logical I/O ratio), UII (Unit I/O Intensity)
3. **Query Tokenization**: Tokenizes SQL text using {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')} tokenizer via ivsm.tokenizer_encode
4. **Embedding Generation**: Creates semantic embeddings using ivsm.IVSM_score with ONNX models
5. **Vector Store Creation**: Converts embeddings to vector columns via ivsm.vector_to_columns
6. **K-Means Clustering**: Groups similar queries using TD_KMeans with optimal K from configuration
7. **Silhouette Analysis**: Calculates clustering quality scores using TD_Silhouette
8. **Statistics Generation**: Creates comprehensive cluster statistics with performance aggregations

**PERFORMANCE METRICS EXPLAINED:**
- **AMPCPUTIME**: Total CPU seconds across all AMPs (primary optimization target)
- **CPUSKW/IOSKW**: CPU/I/O skew ratios (>2.0 indicates distribution problems)
- **PJI**: Physical-to-Logical I/O ratio (higher = more CPU-intensive)
- **UII**: Unit I/O Intensity (higher = more I/O-intensive relative to CPU)
- **LogicalIO**: Total logical I/O operations (indicates scan intensity)
- **NumSteps**: Query plan complexity (higher = more complex plans)

**CONFIGURATION (from sql_opt_config.yml):**
- Uses top {default_max_queries} queries by CPU time (configurable)
- Creates {default_optimal_k} clusters by default (configurable via optimal_k parameter)
- Embedding model: {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')}
- Vector dimensions: {sql_clustering_config.get('embedding', {}).get('vector_length', 384)}
- All database and table names are configurable

**OPTIMIZATION WORKFLOW:**
After running this tool, use:
1. sql_Analyze_Cluster_Stats to identify problematic clusters
2. sql_Retrieve_Cluster_Queries to get actual SQL from target clusters
3. LLM analysis to identify patterns and propose specific optimizations

**USE CASES:**
- Identify query families consuming the most system resources
- Find queries with similar patterns but different performance
- Discover optimization opportunities through clustering analysis
- Prioritize DBA effort on highest-impact query improvements
- Understand workload composition and resource distribution

**PREREQUISITES:**
- DBC.DBQLSqlTbl and DBC.DBQLOgTbl must be accessible
- Embedding models and tokenizers must be installed in feature_ext_db
- Sufficient space in feature_ext_db for intermediate and final tables

  - Arguments:
    - `optimal_k` (integer, optional): Optimal K
    - `max_queries` (integer, optional): Max Queries
- `sql_Retrieve_Cluster_Queries` (tool): 
**RETRIEVE ACTUAL SQL QUERIES FROM SPECIFIC CLUSTERS FOR PATTERN ANALYSIS**

This tool extracts the actual SQL query text and performance metrics from selected clusters, enabling detailed pattern analysis and specific optimization recommendations. Essential for moving from cluster-level analysis to actual query optimization.

**DETAILED ANALYSIS CAPABILITIES:**
- **SQL Pattern Recognition**: Analyze actual query structures, joins, predicates, and functions
- **Performance Correlation**: Connect query patterns to specific performance characteristics
- **Optimization Identification**: Identify common anti-patterns, missing indexes, inefficient joins
- **Code Quality Assessment**: Evaluate query construction, complexity, and best practices
- **Workload Understanding**: See actual business logic and data access patterns

**QUERY SELECTION STRATEGIES:**
- **By CPU Impact**: Sort by 'ampcputime' to focus on highest CPU consumers
- **By I/O Volume**: Sort by 'logicalio' to find scan-intensive queries
- **By Skew Problems**: Sort by 'cpuskw' or 'ioskw' for distribution issues
- **By Complexity**: Sort by 'numsteps' for complex execution plans
- **By Response Time**: Sort by 'response_secs' for user experience impact

**AVAILABLE METRICS FOR SORTING:**
- **ampcputime**: Total CPU seconds (primary optimization target)
- **logicalio**: Total logical I/O operations (scan indicator)
- **cpuskw**: CPU skew ratio (distribution problems)
- **ioskw**: I/O skew ratio (hot spot indicators)
- **pji**: Physical-to-Logical I/O ratio (compute intensity)
- **uii**: Unit I/O Intensity (I/O efficiency)
- **numsteps**: Query execution plan steps (complexity)
- **response_secs**: Wall-clock execution time (user impact)
- **delaytime**: Time spent in queue (concurrency issues)

**AUTOMATIC PERFORMANCE CATEGORIZATION:**
Each query is categorized using configurable thresholds (from sql_opt_config.yml):
- **CPU Categories**: VERY_HIGH_CPU (>config.very_high), HIGH_CPU (>config.high), MEDIUM_CPU (>10s), LOW_CPU
- **CPU Skew**: SEVERE_CPU_SKEW (>config.severe), HIGH_CPU_SKEW (>config.high), MODERATE_CPU_SKEW (>config.moderate), NORMAL
- **I/O Skew**: SEVERE_IO_SKEW (>config.severe), HIGH_IO_SKEW (>config.high), MODERATE_IO_SKEW (>config.moderate), NORMAL

Use thresholds set in config file for, CPU - high, very_high, Skew moderate, high, severe

**TYPICAL OPTIMIZATION WORKFLOW:**
1. Start with clusters identified from sql_Analyze_Cluster_Stats
2. Retrieve top queries by impact metric (usually 'ampcputime')
3. Analyze SQL patterns for common issues:
   - Missing WHERE clauses or inefficient predicates
   - Cartesian products or missing JOIN conditions
   - Inefficient GROUP BY or ORDER BY operations
   - Suboptimal table access patterns
   - Missing or outdated statistics
4. Develop specific optimization recommendations

**QUERY LIMIT STRATEGY:**
- Use the query limit set in config file for  pattern recognition and analysis, unless user specifies a different limit

**OUTPUT INCLUDES:**
- Complete SQL query text for each query
- All performance metrics, user, application, and workload context, cluster membership and rankings
- Performance categories for quick filtering        

  - Arguments:
    - `cluster_ids` (array, required): Cluster Ids
    - `metric` (string, optional): Metric
    - `limit_per_cluster` (integer, optional): Limit Per Cluster
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Uncategorized ---
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
--- Category: Utilities ---
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `rag_Execute_Workflow` (tool): 
Execute complete RAG workflow to answer user questions based on document context.
This tool handles the entire RAG pipeline in a single step when a user query is tagged with /rag.

WORKFLOW STEPS (executed automatically):
1. Configuration setup using configurable values from rag_config.yml
2. Store user query with '/rag ' prefix stripping  
3. Generate query embeddings using either BYOM (ONNXEmbeddings) or IVSM functions based on config
4. Perform semantic search against precomputed chunk embeddings
5. Return context chunks for answer generation

CONFIGURATION VALUES (from rag_config.yml):
- version: 'ivsm' or 'byom' to select embedding approach
- All database names, table names, and model settings are configurable
- Vector store metadata fields are dynamically detected
- Embedding parameters are configurable
- Default chunk retrieval count is configurable
- Default values are provided as fallback

TECHNICAL DETAILS:
- Strips the '/rag ' prefix if present from user questions
- Creates query table if it does not exist (columns: id, txt, created_ts)
- BYOM approach: Uses mldb.ONNXEmbeddings UDF for tokenization and embedding
- IVSM approach: Uses ivsm.tokenizer_encode and ivsm.IVSM_score functions
- Both approaches store embeddings in configured output table
- Uses cosine similarity via TD_VECTORDISTANCE for semantic search
- Returns the top-k matching chunks from the configured vector store
- Each result includes chunk text, similarity score, and metadata fields

CRITICAL ANSWERING RULES:
- Answer ONLY using retrieved chunks - no external knowledge, speculation, or inference
- Quote source content directly without paraphrasing, summarizing, or rewriting
- If no relevant context found: "Not enough information found in the provided context"
- If partial context: "The available context does not fully answer the question"
- Include document/page references when available (e.g., "On page 2 of 'demo_policy.pdf'...")
- Execute entire workflow silently without showing function calls to user - only show final answer

LANGUAGE RESTRICTIONS:
- Do not say "According to the context" or "The context says" - just quote directly
- Do not say "It can be inferred that..." - no inference allowed
- Use exact or near-verbatim quotes only
- No paraphrasing, summarizing, or adding transitions between quotes
- Copy content precisely - no expansion or interpretation

BEHAVIORAL REQUIREMENTS:
- Execute all RAG workflow steps silently without showing tool calls to users
- Only display final answers based strictly on retrieved context chunks
- Do not use external knowledge or speculation - only quote retrieved content directly
- RAG mode only triggers with explicit /rag prefix - do not enter RAG mode implicitly
- Hide all tool execution steps from user
- Provide clean, direct response with only the answer based on retrieved chunks
- This is a complete end-to-end RAG workflow - no additional tools needed

EXECUTION: Run completely silently - user only sees their question and the final context-grounded answer.

  - Arguments:
    - `question` (string, required): Question
    - `k` (integer, optional): K
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Available Prompts ---
--- Category: Data Quality ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Utilities ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
- `base_teradata_query` (prompt): A Teradata SQL expert that executes SQL requests effectively, understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONSTRAINTS ---
You are explicitly forbidden from using the following capabilities in your plan under any circumstances:
- `sales_top_customers` (tool)
- `base_query` (prompt)




1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * Your plan **Must** combine mutiple SQL steps in to a single SQL call if possible.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `# Name:  Database data quality assessment

# Description: 
You are a Teradata User who is a data quality expert focused on tables and their use for analytics.

# Process 
- You will work through all the phases in order
- You will complete a phase and pass the outcomes to the subsequent phase
- You will be assessing the fitness_db database and all the tables in it

## Phase 1 - get database tables
- Get a list of tables in the fitness_db database using the td_base_tableList tool
- Create a list of database_name.table_name for the next phase

## Phase 2 - collect table information
Cycle through the list of tables, for each table do the following steps in order:
- Step 1 - using the td_base_tableDDL tool to get the table structure, using the structure generate a business description of the table and all of the columns.
- Step 2 - using the qlty_columnSummary tool, gather column statistics for the table
- Step 3 - using the qlty_univariateStatistics tool to get the univariate statistics for a table 
- Step 4 - using the qlty_rowsWithMissingValues tool to get rows with missing values in a table

## Phase 3 - Present results as a dashboard
- At the beginning of the dashboard identify the database
- For each table present the results from phase 2 together
- Ensure that each table is presented the same way
- Use color to highlight points of interest

# Communication guidelines
- Be concise but informative in your explanation
- Clearly indicate which phase you are currently in and only focus on the activities of the current phase
- Summarize the outcome of the phase before moving to the next phase

# Final output
A professional data quality dashboard that is easily navigable.
`
-   Explicit Parameters: 
--- EXPLICIT PARAMETERS ---
The following parameters were explicitly provided for this prompt execution:
- database_name: "fitness_db"

-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.

- Active Prompt: You are currently executing the 'qlty_databaseQuality' prompt. Do not call it again.

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `# Name:  Database data quality assessment

# Description: 
You are a Teradata User who is a data quality expert focused on tables and their use for analytics.

# Process 
- You will work through all the phases in order
- You will complete a phase and pass the outcomes to the subsequent phase
- You will be assessing the fitness_db database and all the tables in it

## Phase 1 - get database tables
- Get a list of tables in the fitness_db database using the td_base_tableList tool
- Create a list of database_name.table_name for the next phase

## Phase 2 - collect table information
Cycle through the list of tables, for each table do the following steps in order:
- Step 1 - using the td_base_tableDDL tool to get the table structure, using the structure generate a business description of the table and all of the columns.
- Step 2 - using the qlty_columnSummary tool, gather column statistics for the table
- Step 3 - using the qlty_univariateStatistics tool to get the univariate statistics for a table 
- Step 4 - using the qlty_rowsWithMissingValues tool to get rows with missing values in a table

## Phase 3 - Present results as a dashboard
- At the beginning of the dashboard identify the database
- For each table present the results from phase 2 together
- Ensure that each table is presented the same way
- Use color to highlight points of interest

# Communication guidelines
- Be concise but informative in your explanation
- Clearly indicate which phase you are currently in and only focus on the activities of the current phase
- Summarize the outcome of the phase before moving to the next phase

# Final output
A professional data quality dashboard that is easily navigable.
`
-   Explicit Parameters: 
--- EXPLICIT PARAMETERS ---
The following parameters were explicitly provided for this prompt execution:
- database_name: "fitness_db"

-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.

- Active Prompt: You are currently executing the 'qlty_databaseQuality' prompt. Do not call it again.

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of tables in the fitness_db database.",
    "relevant_tools": [
      "base_tableList"
    ],
    "arguments": {
      "database_name": "fitness_db"
    }
  },
  {
    "phase": 2,
    "goal": "For each table in the list from Phase 1, get the table DDL, column summary, univariate statistics, and rows with missing values.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [
      "base_tableDDL"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "result_of_phase_1.table_name"
    }
  },
  {
    "phase": 3,
    "goal": "For each table in the list from Phase 1, get the column summary.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [
      "qlty_columnSummary"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "result_of_phase_1.table_name"
    }
  },
  {
    "phase": 4,
    "goal": "For each table in the list from Phase 1, get the univariate statistics.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [
      "qlty_univariateStatistics"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "result_of_phase_1.table_name"
    }
  },
  {
    "phase": 5,
    "goal": "For each table in the list from Phase 1, get the rows with missing values.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [
      "qlty_rowsWithMissingValues"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "result_of_phase_1.table_name",
      "column_name": "result_of_phase_1.column_name"
    }
  },
  {
    "phase": 6,
    "goal": "Present results as a dashboard, identifying the database, presenting results from phase 2-5 together for each table, ensuring consistent presentation, and using color to highlight points of interest.",
    "relevant_tools": [
      "CoreLLMTask"
    ],
    "arguments": {
      "task_description": "# Name:  Database data quality assessment\n\n# Description: \nYou are a Teradata User who is a data quality expert focused on tables and their use for analytics.\n\n# Process \n- You will work through all the phases in order\n- You will complete a phase and pass the outcomes to the subsequent phase\n- You will be assessing the fitness_db database and all the tables in it\n\n## Phase 1 - get database tables\n- Get a list of tables in the fitness_db database using the td_base_tableList tool\n- Create a list of database_name.table_name for the next phase\n\n## Phase 2 - collect table information\nCycle through the list of tables, for each table do the following steps in order:\n- Step 1 - using the td_base_tableDDL tool to get the table structure, using the structure generate a business description of the table and all of the columns.\n- Step 2 - using the qlty_columnSummary tool, gather column statistics for the table\n- Step 3 - using the qlty_univariateStatistics tool to get the univariate statistics for a table \n- Step 4 - using the qlty_rowsWithMissingValues tool to get rows with missing values in a table\n\n## Phase 3 - Present results as a dashboard\n- At the beginning of the dashboard identify the database\n- For each table present the results from phase 2 together\n- Ensure that each table is presented the same way\n- Use color to highlight points of interest\n\n# Communication guidelines\n- Be concise but informative in your explanation\n- Clearly indicate which phase you are currently in and only focus on the activities of the current phase\n- Summarize the outcome of the phase before moving to the next phase\n\n# Final output\nA professional data quality dashboard that is easily navigable.\n",
      "source_data": [
        "result_of_phase_2",
        "result_of_phase_3",
        "result_of_phase_4",
        "result_of_phase_5"
      ]
    }
  }
]
```
[user]: SYSTEM PROMPT:
You are a JSON-only responding assistant.

USER PROMPT:
Analyze the tool to determine if its `column_name` argument is for 'numeric', 'character', or 'any' type.
Tool: `qlty_univariateStatistics`
Description: "Get the univariate statistics for a table."
Hint: This tool is for quantitative analysis and requires a 'numeric' data type for `column_name`.
Respond with a single JSON object: {"dataType": "numeric" | "character" | "any"}
[model]: ```json
{"dataType": "numeric"}
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:
You are a JSON-only responding assistant.

USER PROMPT:
Analyze the tool to determine if its `column_name` argument is for 'numeric', 'character', or 'any' type.
Tool: `qlty_rowsWithMissingValues`
Description: "Get the rows with missing values in a table."
Hint: 
Respond with a single JSON object: {"dataType": "numeric" | "character" | "any"}

2025-09-07 21:24:13,420 - --- FULL CONTEXT (Session: 55093c07-efcc-41ba-bb63-15771bf3bf02) ---
--- REASON FOR CALL ---
Executing CoreLLMTask: Analyze the voluminous raw data from the previous loops. Your task is to distill this information. For each item (e.g., table) processed, produce a concise, one-paragraph summary of the most critical findings. Your output MUST be a clean list of these summary objects, each containing the item's name and the summary text.

--- History (History Disabled for LLM Call: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Administration ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Database Information ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `sql_Analyze_Cluster_Stats` (tool): 
**ANALYZE SQL QUERY CLUSTER PERFORMANCE STATISTICS**

This tool analyzes pre-computed cluster statistics to identify optimization opportunities without re-running the clustering pipeline. Perfect for iterative analysis and decision-making on which query clusters to focus optimization efforts.

**ANALYSIS CAPABILITIES:**
- **Performance Ranking**: Sort clusters by any performance metric to identify top resource consumers
- **Resource Impact Assessment**: Compare clusters by CPU usage, I/O volume, and execution complexity
- **Skew Problem Detection**: Identify clusters with CPU or I/O distribution issues
- **Workload Characterization**: Understand query patterns by user, application, and workload type
- **Optimization Prioritization**: Focus on clusters with highest impact potential

**AVAILABLE SORTING METRICS:**
- **avg_cpu**: Average CPU seconds per cluster (primary optimization target)
- **avg_io**: Average logical I/O operations (scan intensity indicator)
- **avg_cpuskw**: Average CPU skew (distribution problem indicator)
- **avg_ioskw**: Average I/O skew (hot spot indicator)
- **avg_pji**: Average Physical-to-Logical I/O ratio (compute intensity)
- **avg_uii**: Average Unit I/O Intensity (I/O efficiency)
- **avg_numsteps**: Average query plan complexity
- **queries**: Number of queries in cluster (frequency indicator)
- **cluster_silhouette_score**: Clustering quality measure

**PERFORMANCE CATEGORIZATION:**
Automatically categorizes clusters using configurable thresholds (from sql_opt_config.yml):
- **HIGH_CPU_USAGE**: Average CPU > config.performance_thresholds.cpu.high
- **HIGH_IO_USAGE**: Average I/O > config.performance_thresholds.io.high
- **HIGH_CPU_SKEW**: CPU skew > config.performance_thresholds.skew.high
- **HIGH_IO_SKEW**: I/O skew > config.performance_thresholds.skew.high
- **NORMAL**: Clusters within configured normal performance ranges

**TYPICAL ANALYSIS WORKFLOW:**
1. Sort by 'avg_cpu' or 'avg_io' to find highest resource consumers
2. Sort by 'avg_cpuskw' or 'avg_ioskw' to find distribution problems
4. Use limit_results to focus on top problematic clusters

**OPTIMIZATION DECISION FRAMEWORK:**
- **High CPU + High Query Count**: Maximum impact optimization candidates
- **High Skew + Moderate CPU**: Distribution/statistics problems
- **High I/O + Low PJI**: Potential indexing opportunities
- **High NumSteps**: Complex query rewriting candidates

**OUTPUT FORMAT:**
Returns detailed cluster statistics with performance rankings, categories, and metadata for LLM analysis and optimization recommendations.

  - Arguments:
    - `sort_by_metric` (string, optional): Sort By Metric
    - `limit_results` (integer, optional): Limit Results
- `sql_Execute_Full_Pipeline` (tool): 
**COMPLETE SQL QUERY CLUSTERING PIPELINE FOR HIGH-USAGE QUERY OPTIMIZATION**

This tool executes the entire SQL query clustering workflow to identify and analyze high CPU usage queries for optimization opportunities. It's designed for database performance analysts and DBAs who need to systematically identify query optimization candidates.

**FULL PIPELINE WORKFLOW:**
1. **Query Log Extraction**: Extracts SQL queries from DBC.DBQLSqlTbl with comprehensive performance metrics
2. **Performance Metrics Calculation**: Computes CPU skew, I/O skew, PJI (Physical to Logical I/O ratio), UII (Unit I/O Intensity)
3. **Query Tokenization**: Tokenizes SQL text using {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')} tokenizer via ivsm.tokenizer_encode
4. **Embedding Generation**: Creates semantic embeddings using ivsm.IVSM_score with ONNX models
5. **Vector Store Creation**: Converts embeddings to vector columns via ivsm.vector_to_columns
6. **K-Means Clustering**: Groups similar queries using TD_KMeans with optimal K from configuration
7. **Silhouette Analysis**: Calculates clustering quality scores using TD_Silhouette
8. **Statistics Generation**: Creates comprehensive cluster statistics with performance aggregations

**PERFORMANCE METRICS EXPLAINED:**
- **AMPCPUTIME**: Total CPU seconds across all AMPs (primary optimization target)
- **CPUSKW/IOSKW**: CPU/I/O skew ratios (>2.0 indicates distribution problems)
- **PJI**: Physical-to-Logical I/O ratio (higher = more CPU-intensive)
- **UII**: Unit I/O Intensity (higher = more I/O-intensive relative to CPU)
- **LogicalIO**: Total logical I/O operations (indicates scan intensity)
- **NumSteps**: Query plan complexity (higher = more complex plans)

**CONFIGURATION (from sql_opt_config.yml):**
- Uses top {default_max_queries} queries by CPU time (configurable)
- Creates {default_optimal_k} clusters by default (configurable via optimal_k parameter)
- Embedding model: {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')}
- Vector dimensions: {sql_clustering_config.get('embedding', {}).get('vector_length', 384)}
- All database and table names are configurable

**OPTIMIZATION WORKFLOW:**
After running this tool, use:
1. sql_Analyze_Cluster_Stats to identify problematic clusters
2. sql_Retrieve_Cluster_Queries to get actual SQL from target clusters
3. LLM analysis to identify patterns and propose specific optimizations

**USE CASES:**
- Identify query families consuming the most system resources
- Find queries with similar patterns but different performance
- Discover optimization opportunities through clustering analysis
- Prioritize DBA effort on highest-impact query improvements
- Understand workload composition and resource distribution

**PREREQUISITES:**
- DBC.DBQLSqlTbl and DBC.DBQLOgTbl must be accessible
- Embedding models and tokenizers must be installed in feature_ext_db
- Sufficient space in feature_ext_db for intermediate and final tables

  - Arguments:
    - `optimal_k` (integer, optional): Optimal K
    - `max_queries` (integer, optional): Max Queries
- `sql_Retrieve_Cluster_Queries` (tool): 
**RETRIEVE ACTUAL SQL QUERIES FROM SPECIFIC CLUSTERS FOR PATTERN ANALYSIS**

This tool extracts the actual SQL query text and performance metrics from selected clusters, enabling detailed pattern analysis and specific optimization recommendations. Essential for moving from cluster-level analysis to actual query optimization.

**DETAILED ANALYSIS CAPABILITIES:**
- **SQL Pattern Recognition**: Analyze actual query structures, joins, predicates, and functions
- **Performance Correlation**: Connect query patterns to specific performance characteristics
- **Optimization Identification**: Identify common anti-patterns, missing indexes, inefficient joins
- **Code Quality Assessment**: Evaluate query construction, complexity, and best practices
- **Workload Understanding**: See actual business logic and data access patterns

**QUERY SELECTION STRATEGIES:**
- **By CPU Impact**: Sort by 'ampcputime' to focus on highest CPU consumers
- **By I/O Volume**: Sort by 'logicalio' to find scan-intensive queries
- **By Skew Problems**: Sort by 'cpuskw' or 'ioskw' for distribution issues
- **By Complexity**: Sort by 'numsteps' for complex execution plans
- **By Response Time**: Sort by 'response_secs' for user experience impact

**AVAILABLE METRICS FOR SORTING:**
- **ampcputime**: Total CPU seconds (primary optimization target)
- **logicalio**: Total logical I/O operations (scan indicator)
- **cpuskw**: CPU skew ratio (distribution problems)
- **ioskw**: I/O skew ratio (hot spot indicators)
- **pji**: Physical-to-Logical I/O ratio (compute intensity)
- **uii**: Unit I/O Intensity (I/O efficiency)
- **numsteps**: Query execution plan steps (complexity)
- **response_secs**: Wall-clock execution time (user impact)
- **delaytime**: Time spent in queue (concurrency issues)

**AUTOMATIC PERFORMANCE CATEGORIZATION:**
Each query is categorized using configurable thresholds (from sql_opt_config.yml):
- **CPU Categories**: VERY_HIGH_CPU (>config.very_high), HIGH_CPU (>config.high), MEDIUM_CPU (>10s), LOW_CPU
- **CPU Skew**: SEVERE_CPU_SKEW (>config.severe), HIGH_CPU_SKEW (>config.high), MODERATE_CPU_SKEW (>config.moderate), NORMAL
- **I/O Skew**: SEVERE_IO_SKEW (>config.severe), HIGH_IO_SKEW (>config.high), MODERATE_IO_SKEW (>config.moderate), NORMAL

Use thresholds set in config file for, CPU - high, very_high, Skew moderate, high, severe

**TYPICAL OPTIMIZATION WORKFLOW:**
1. Start with clusters identified from sql_Analyze_Cluster_Stats
2. Retrieve top queries by impact metric (usually 'ampcputime')
3. Analyze SQL patterns for common issues:
   - Missing WHERE clauses or inefficient predicates
   - Cartesian products or missing JOIN conditions
   - Inefficient GROUP BY or ORDER BY operations
   - Suboptimal table access patterns
   - Missing or outdated statistics
4. Develop specific optimization recommendations

**QUERY LIMIT STRATEGY:**
- Use the query limit set in config file for  pattern recognition and analysis, unless user specifies a different limit

**OUTPUT INCLUDES:**
- Complete SQL query text for each query
- All performance metrics, user, application, and workload context, cluster membership and rankings
- Performance categories for quick filtering        

  - Arguments:
    - `cluster_ids` (array, required): Cluster Ids
    - `metric` (string, optional): Metric
    - `limit_per_cluster` (integer, optional): Limit Per Cluster
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Uncategorized ---
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
--- Category: Utilities ---
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `rag_Execute_Workflow` (tool): 
Execute complete RAG workflow to answer user questions based on document context.
This tool handles the entire RAG pipeline in a single step when a user query is tagged with /rag.

WORKFLOW STEPS (executed automatically):
1. Configuration setup using configurable values from rag_config.yml
2. Store user query with '/rag ' prefix stripping  
3. Generate query embeddings using either BYOM (ONNXEmbeddings) or IVSM functions based on config
4. Perform semantic search against precomputed chunk embeddings
5. Return context chunks for answer generation

CONFIGURATION VALUES (from rag_config.yml):
- version: 'ivsm' or 'byom' to select embedding approach
- All database names, table names, and model settings are configurable
- Vector store metadata fields are dynamically detected
- Embedding parameters are configurable
- Default chunk retrieval count is configurable
- Default values are provided as fallback

TECHNICAL DETAILS:
- Strips the '/rag ' prefix if present from user questions
- Creates query table if it does not exist (columns: id, txt, created_ts)
- BYOM approach: Uses mldb.ONNXEmbeddings UDF for tokenization and embedding
- IVSM approach: Uses ivsm.tokenizer_encode and ivsm.IVSM_score functions
- Both approaches store embeddings in configured output table
- Uses cosine similarity via TD_VECTORDISTANCE for semantic search
- Returns the top-k matching chunks from the configured vector store
- Each result includes chunk text, similarity score, and metadata fields

CRITICAL ANSWERING RULES:
- Answer ONLY using retrieved chunks - no external knowledge, speculation, or inference
- Quote source content directly without paraphrasing, summarizing, or rewriting
- If no relevant context found: "Not enough information found in the provided context"
- If partial context: "The available context does not fully answer the question"
- Include document/page references when available (e.g., "On page 2 of 'demo_policy.pdf'...")
- Execute entire workflow silently without showing function calls to user - only show final answer

LANGUAGE RESTRICTIONS:
- Do not say "According to the context" or "The context says" - just quote directly
- Do not say "It can be inferred that..." - no inference allowed
- Use exact or near-verbatim quotes only
- No paraphrasing, summarizing, or adding transitions between quotes
- Copy content precisely - no expansion or interpretation

BEHAVIORAL REQUIREMENTS:
- Execute all RAG workflow steps silently without showing tool calls to users
- Only display final answers based strictly on retrieved context chunks
- Do not use external knowledge or speculation - only quote retrieved content directly
- RAG mode only triggers with explicit /rag prefix - do not enter RAG mode implicitly
- Hide all tool execution steps from user
- Provide clean, direct response with only the answer based on retrieved chunks
- This is a complete end-to-end RAG workflow - no additional tools needed

EXECUTION: Run completely silently - user only sees their question and the final context-grounded answer.

  - Arguments:
    - `question` (string, required): Question
    - `k` (integer, optional): K
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Utilities ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
- `base_teradata_query` (prompt): A Teradata SQL expert that executes SQL requests effectively, understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONSTRAINTS ---
You are explicitly forbidden from using the following capabilities in your plan under any circumstances:
- `sales_top_customers` (tool)
- `base_query` (prompt)




1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * Your plan **Must** combine mutiple SQL steps in to a single SQL call if possible.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `what is the quality of database fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `what is the quality of database fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Assess the data quality of the database fitness_db.",
    "executable_prompt": "qlty_databaseQuality",
    "arguments": {
      "database_name": "fitness_db"
    }
  }
]
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Administration ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Database Information ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `sql_Analyze_Cluster_Stats` (tool): 
**ANALYZE SQL QUERY CLUSTER PERFORMANCE STATISTICS**

This tool analyzes pre-computed cluster statistics to identify optimization opportunities without re-running the clustering pipeline. Perfect for iterative analysis and decision-making on which query clusters to focus optimization efforts.

**ANALYSIS CAPABILITIES:**
- **Performance Ranking**: Sort clusters by any performance metric to identify top resource consumers
- **Resource Impact Assessment**: Compare clusters by CPU usage, I/O volume, and execution complexity
- **Skew Problem Detection**: Identify clusters with CPU or I/O distribution issues
- **Workload Characterization**: Understand query patterns by user, application, and workload type
- **Optimization Prioritization**: Focus on clusters with highest impact potential

**AVAILABLE SORTING METRICS:**
- **avg_cpu**: Average CPU seconds per cluster (primary optimization target)
- **avg_io**: Average logical I/O operations (scan intensity indicator)
- **avg_cpuskw**: Average CPU skew (distribution problem indicator)
- **avg_ioskw**: Average I/O skew (hot spot indicator)
- **avg_pji**: Average Physical-to-Logical I/O ratio (compute intensity)
- **avg_uii**: Average Unit I/O Intensity (I/O efficiency)
- **avg_numsteps**: Average query plan complexity
- **queries**: Number of queries in cluster (frequency indicator)
- **cluster_silhouette_score**: Clustering quality measure

**PERFORMANCE CATEGORIZATION:**
Automatically categorizes clusters using configurable thresholds (from sql_opt_config.yml):
- **HIGH_CPU_USAGE**: Average CPU > config.performance_thresholds.cpu.high
- **HIGH_IO_USAGE**: Average I/O > config.performance_thresholds.io.high
- **HIGH_CPU_SKEW**: CPU skew > config.performance_thresholds.skew.high
- **HIGH_IO_SKEW**: I/O skew > config.performance_thresholds.skew.high
- **NORMAL**: Clusters within configured normal performance ranges

**TYPICAL ANALYSIS WORKFLOW:**
1. Sort by 'avg_cpu' or 'avg_io' to find highest resource consumers
2. Sort by 'avg_cpuskw' or 'avg_ioskw' to find distribution problems
4. Use limit_results to focus on top problematic clusters

**OPTIMIZATION DECISION FRAMEWORK:**
- **High CPU + High Query Count**: Maximum impact optimization candidates
- **High Skew + Moderate CPU**: Distribution/statistics problems
- **High I/O + Low PJI**: Potential indexing opportunities
- **High NumSteps**: Complex query rewriting candidates

**OUTPUT FORMAT:**
Returns detailed cluster statistics with performance rankings, categories, and metadata for LLM analysis and optimization recommendations.

  - Arguments:
    - `sort_by_metric` (string, optional): Sort By Metric
    - `limit_results` (integer, optional): Limit Results
- `sql_Execute_Full_Pipeline` (tool): 
**COMPLETE SQL QUERY CLUSTERING PIPELINE FOR HIGH-USAGE QUERY OPTIMIZATION**

This tool executes the entire SQL query clustering workflow to identify and analyze high CPU usage queries for optimization opportunities. It's designed for database performance analysts and DBAs who need to systematically identify query optimization candidates.

**FULL PIPELINE WORKFLOW:**
1. **Query Log Extraction**: Extracts SQL queries from DBC.DBQLSqlTbl with comprehensive performance metrics
2. **Performance Metrics Calculation**: Computes CPU skew, I/O skew, PJI (Physical to Logical I/O ratio), UII (Unit I/O Intensity)
3. **Query Tokenization**: Tokenizes SQL text using {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')} tokenizer via ivsm.tokenizer_encode
4. **Embedding Generation**: Creates semantic embeddings using ivsm.IVSM_score with ONNX models
5. **Vector Store Creation**: Converts embeddings to vector columns via ivsm.vector_to_columns
6. **K-Means Clustering**: Groups similar queries using TD_KMeans with optimal K from configuration
7. **Silhouette Analysis**: Calculates clustering quality scores using TD_Silhouette
8. **Statistics Generation**: Creates comprehensive cluster statistics with performance aggregations

**PERFORMANCE METRICS EXPLAINED:**
- **AMPCPUTIME**: Total CPU seconds across all AMPs (primary optimization target)
- **CPUSKW/IOSKW**: CPU/I/O skew ratios (>2.0 indicates distribution problems)
- **PJI**: Physical-to-Logical I/O ratio (higher = more CPU-intensive)
- **UII**: Unit I/O Intensity (higher = more I/O-intensive relative to CPU)
- **LogicalIO**: Total logical I/O operations (indicates scan intensity)
- **NumSteps**: Query plan complexity (higher = more complex plans)

**CONFIGURATION (from sql_opt_config.yml):**
- Uses top {default_max_queries} queries by CPU time (configurable)
- Creates {default_optimal_k} clusters by default (configurable via optimal_k parameter)
- Embedding model: {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')}
- Vector dimensions: {sql_clustering_config.get('embedding', {}).get('vector_length', 384)}
- All database and table names are configurable

**OPTIMIZATION WORKFLOW:**
After running this tool, use:
1. sql_Analyze_Cluster_Stats to identify problematic clusters
2. sql_Retrieve_Cluster_Queries to get actual SQL from target clusters
3. LLM analysis to identify patterns and propose specific optimizations

**USE CASES:**
- Identify query families consuming the most system resources
- Find queries with similar patterns but different performance
- Discover optimization opportunities through clustering analysis
- Prioritize DBA effort on highest-impact query improvements
- Understand workload composition and resource distribution

**PREREQUISITES:**
- DBC.DBQLSqlTbl and DBC.DBQLOgTbl must be accessible
- Embedding models and tokenizers must be installed in feature_ext_db
- Sufficient space in feature_ext_db for intermediate and final tables

  - Arguments:
    - `optimal_k` (integer, optional): Optimal K
    - `max_queries` (integer, optional): Max Queries
- `sql_Retrieve_Cluster_Queries` (tool): 
**RETRIEVE ACTUAL SQL QUERIES FROM SPECIFIC CLUSTERS FOR PATTERN ANALYSIS**

This tool extracts the actual SQL query text and performance metrics from selected clusters, enabling detailed pattern analysis and specific optimization recommendations. Essential for moving from cluster-level analysis to actual query optimization.

**DETAILED ANALYSIS CAPABILITIES:**
- **SQL Pattern Recognition**: Analyze actual query structures, joins, predicates, and functions
- **Performance Correlation**: Connect query patterns to specific performance characteristics
- **Optimization Identification**: Identify common anti-patterns, missing indexes, inefficient joins
- **Code Quality Assessment**: Evaluate query construction, complexity, and best practices
- **Workload Understanding**: See actual business logic and data access patterns

**QUERY SELECTION STRATEGIES:**
- **By CPU Impact**: Sort by 'ampcputime' to focus on highest CPU consumers
- **By I/O Volume**: Sort by 'logicalio' to find scan-intensive queries
- **By Skew Problems**: Sort by 'cpuskw' or 'ioskw' for distribution issues
- **By Complexity**: Sort by 'numsteps' for complex execution plans
- **By Response Time**: Sort by 'response_secs' for user experience impact

**AVAILABLE METRICS FOR SORTING:**
- **ampcputime**: Total CPU seconds (primary optimization target)
- **logicalio**: Total logical I/O operations (scan indicator)
- **cpuskw**: CPU skew ratio (distribution problems)
- **ioskw**: I/O skew ratio (hot spot indicators)
- **pji**: Physical-to-Logical I/O ratio (compute intensity)
- **uii**: Unit I/O Intensity (I/O efficiency)
- **numsteps**: Query execution plan steps (complexity)
- **response_secs**: Wall-clock execution time (user impact)
- **delaytime**: Time spent in queue (concurrency issues)

**AUTOMATIC PERFORMANCE CATEGORIZATION:**
Each query is categorized using configurable thresholds (from sql_opt_config.yml):
- **CPU Categories**: VERY_HIGH_CPU (>config.very_high), HIGH_CPU (>config.high), MEDIUM_CPU (>10s), LOW_CPU
- **CPU Skew**: SEVERE_CPU_SKEW (>config.severe), HIGH_CPU_SKEW (>config.high), MODERATE_CPU_SKEW (>config.moderate), NORMAL
- **I/O Skew**: SEVERE_IO_SKEW (>config.severe), HIGH_IO_SKEW (>config.high), MODERATE_IO_SKEW (>config.moderate), NORMAL

Use thresholds set in config file for, CPU - high, very_high, Skew moderate, high, severe

**TYPICAL OPTIMIZATION WORKFLOW:**
1. Start with clusters identified from sql_Analyze_Cluster_Stats
2. Retrieve top queries by impact metric (usually 'ampcputime')
3. Analyze SQL patterns for common issues:
   - Missing WHERE clauses or inefficient predicates
   - Cartesian products or missing JOIN conditions
   - Inefficient GROUP BY or ORDER BY operations
   - Suboptimal table access patterns
   - Missing or outdated statistics
4. Develop specific optimization recommendations

**QUERY LIMIT STRATEGY:**
- Use the query limit set in config file for  pattern recognition and analysis, unless user specifies a different limit

**OUTPUT INCLUDES:**
- Complete SQL query text for each query
- All performance metrics, user, application, and workload context, cluster membership and rankings
- Performance categories for quick filtering        

  - Arguments:
    - `cluster_ids` (array, required): Cluster Ids
    - `metric` (string, optional): Metric
    - `limit_per_cluster` (integer, optional): Limit Per Cluster
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Uncategorized ---
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
--- Category: Utilities ---
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `rag_Execute_Workflow` (tool): 
Execute complete RAG workflow to answer user questions based on document context.
This tool handles the entire RAG pipeline in a single step when a user query is tagged with /rag.

WORKFLOW STEPS (executed automatically):
1. Configuration setup using configurable values from rag_config.yml
2. Store user query with '/rag ' prefix stripping  
3. Generate query embeddings using either BYOM (ONNXEmbeddings) or IVSM functions based on config
4. Perform semantic search against precomputed chunk embeddings
5. Return context chunks for answer generation

CONFIGURATION VALUES (from rag_config.yml):
- version: 'ivsm' or 'byom' to select embedding approach
- All database names, table names, and model settings are configurable
- Vector store metadata fields are dynamically detected
- Embedding parameters are configurable
- Default chunk retrieval count is configurable
- Default values are provided as fallback

TECHNICAL DETAILS:
- Strips the '/rag ' prefix if present from user questions
- Creates query table if it does not exist (columns: id, txt, created_ts)
- BYOM approach: Uses mldb.ONNXEmbeddings UDF for tokenization and embedding
- IVSM approach: Uses ivsm.tokenizer_encode and ivsm.IVSM_score functions
- Both approaches store embeddings in configured output table
- Uses cosine similarity via TD_VECTORDISTANCE for semantic search
- Returns the top-k matching chunks from the configured vector store
- Each result includes chunk text, similarity score, and metadata fields

CRITICAL ANSWERING RULES:
- Answer ONLY using retrieved chunks - no external knowledge, speculation, or inference
- Quote source content directly without paraphrasing, summarizing, or rewriting
- If no relevant context found: "Not enough information found in the provided context"
- If partial context: "The available context does not fully answer the question"
- Include document/page references when available (e.g., "On page 2 of 'demo_policy.pdf'...")
- Execute entire workflow silently without showing function calls to user - only show final answer

LANGUAGE RESTRICTIONS:
- Do not say "According to the context" or "The context says" - just quote directly
- Do not say "It can be inferred that..." - no inference allowed
- Use exact or near-verbatim quotes only
- No paraphrasing, summarizing, or adding transitions between quotes
- Copy content precisely - no expansion or interpretation

BEHAVIORAL REQUIREMENTS:
- Execute all RAG workflow steps silently without showing tool calls to users
- Only display final answers based strictly on retrieved context chunks
- Do not use external knowledge or speculation - only quote retrieved content directly
- RAG mode only triggers with explicit /rag prefix - do not enter RAG mode implicitly
- Hide all tool execution steps from user
- Provide clean, direct response with only the answer based on retrieved chunks
- This is a complete end-to-end RAG workflow - no additional tools needed

EXECUTION: Run completely silently - user only sees their question and the final context-grounded answer.

  - Arguments:
    - `question` (string, required): Question
    - `k` (integer, optional): K
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Available Prompts ---
--- Category: Data Quality ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Utilities ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
- `base_teradata_query` (prompt): A Teradata SQL expert that executes SQL requests effectively, understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONSTRAINTS ---
You are explicitly forbidden from using the following capabilities in your plan under any circumstances:
- `sales_top_customers` (tool)
- `base_query` (prompt)




1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * Your plan **Must** combine mutiple SQL steps in to a single SQL call if possible.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `# Name:  Database data quality assessment

# Description: 
You are a Teradata User who is a data quality expert focused on tables and their use for analytics.

# Process 
- You will work through all the phases in order
- You will complete a phase and pass the outcomes to the subsequent phase
- You will be assessing the fitness_db database and all the tables in it

## Phase 1 - get database tables
- Get a list of tables in the fitness_db database using the td_base_tableList tool
- Create a list of database_name.table_name for the next phase

## Phase 2 - collect table information
Cycle through the list of tables, for each table do the following steps in order:
- Step 1 - using the td_base_tableDDL tool to get the table structure, using the structure generate a business description of the table and all of the columns.
- Step 2 - using the qlty_columnSummary tool, gather column statistics for the table
- Step 3 - using the qlty_univariateStatistics tool to get the univariate statistics for a table 
- Step 4 - using the qlty_rowsWithMissingValues tool to get rows with missing values in a table

## Phase 3 - Present results as a dashboard
- At the beginning of the dashboard identify the database
- For each table present the results from phase 2 together
- Ensure that each table is presented the same way
- Use color to highlight points of interest

# Communication guidelines
- Be concise but informative in your explanation
- Clearly indicate which phase you are currently in and only focus on the activities of the current phase
- Summarize the outcome of the phase before moving to the next phase

# Final output
A professional data quality dashboard that is easily navigable.
`
-   Explicit Parameters: 
--- EXPLICIT PARAMETERS ---
The following parameters were explicitly provided for this prompt execution:
- database_name: "fitness_db"

-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.

- Active Prompt: You are currently executing the 'qlty_databaseQuality' prompt. Do not call it again.

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `# Name:  Database data quality assessment

# Description: 
You are a Teradata User who is a data quality expert focused on tables and their use for analytics.

# Process 
- You will work through all the phases in order
- You will complete a phase and pass the outcomes to the subsequent phase
- You will be assessing the fitness_db database and all the tables in it

## Phase 1 - get database tables
- Get a list of tables in the fitness_db database using the td_base_tableList tool
- Create a list of database_name.table_name for the next phase

## Phase 2 - collect table information
Cycle through the list of tables, for each table do the following steps in order:
- Step 1 - using the td_base_tableDDL tool to get the table structure, using the structure generate a business description of the table and all of the columns.
- Step 2 - using the qlty_columnSummary tool, gather column statistics for the table
- Step 3 - using the qlty_univariateStatistics tool to get the univariate statistics for a table 
- Step 4 - using the qlty_rowsWithMissingValues tool to get rows with missing values in a table

## Phase 3 - Present results as a dashboard
- At the beginning of the dashboard identify the database
- For each table present the results from phase 2 together
- Ensure that each table is presented the same way
- Use color to highlight points of interest

# Communication guidelines
- Be concise but informative in your explanation
- Clearly indicate which phase you are currently in and only focus on the activities of the current phase
- Summarize the outcome of the phase before moving to the next phase

# Final output
A professional data quality dashboard that is easily navigable.
`
-   Explicit Parameters: 
--- EXPLICIT PARAMETERS ---
The following parameters were explicitly provided for this prompt execution:
- database_name: "fitness_db"

-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.

- Active Prompt: You are currently executing the 'qlty_databaseQuality' prompt. Do not call it again.

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of tables in the fitness_db database.",
    "relevant_tools": [
      "base_tableList"
    ],
    "arguments": {
      "database_name": "fitness_db"
    }
  },
  {
    "phase": 2,
    "goal": "For each table in the list from Phase 1, get the table DDL, column summary, univariate statistics, and rows with missing values.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [
      "base_tableDDL"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "result_of_phase_1.table_name"
    }
  },
  {
    "phase": 3,
    "goal": "For each table in the list from Phase 1, get the column summary.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [
      "qlty_columnSummary"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "result_of_phase_1.table_name"
    }
  },
  {
    "phase": 4,
    "goal": "For each table in the list from Phase 1, get the univariate statistics.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [
      "qlty_univariateStatistics"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "result_of_phase_1.table_name"
    }
  },
  {
    "phase": 5,
    "goal": "For each table in the list from Phase 1, get the rows with missing values.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [
      "qlty_rowsWithMissingValues"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "result_of_phase_1.table_name",
      "column_name": "result_of_phase_1.column_name"
    }
  },
  {
    "phase": 6,
    "goal": "Present results as a dashboard, identifying the database, presenting results from phase 2-5 together for each table, ensuring consistent presentation, and using color to highlight points of interest.",
    "relevant_tools": [
      "CoreLLMTask"
    ],
    "arguments": {
      "task_description": "# Name:  Database data quality assessment\n\n# Description: \nYou are a Teradata User who is a data quality expert focused on tables and their use for analytics.\n\n# Process \n- You will work through all the phases in order\n- You will complete a phase and pass the outcomes to the subsequent phase\n- You will be assessing the fitness_db database and all the tables in it\n\n## Phase 1 - get database tables\n- Get a list of tables in the fitness_db database using the td_base_tableList tool\n- Create a list of database_name.table_name for the next phase\n\n## Phase 2 - collect table information\nCycle through the list of tables, for each table do the following steps in order:\n- Step 1 - using the td_base_tableDDL tool to get the table structure, using the structure generate a business description of the table and all of the columns.\n- Step 2 - using the qlty_columnSummary tool, gather column statistics for the table\n- Step 3 - using the qlty_univariateStatistics tool to get the univariate statistics for a table \n- Step 4 - using the qlty_rowsWithMissingValues tool to get rows with missing values in a table\n\n## Phase 3 - Present results as a dashboard\n- At the beginning of the dashboard identify the database\n- For each table present the results from phase 2 together\n- Ensure that each table is presented the same way\n- Use color to highlight points of interest\n\n# Communication guidelines\n- Be concise but informative in your explanation\n- Clearly indicate which phase you are currently in and only focus on the activities of the current phase\n- Summarize the outcome of the phase before moving to the next phase\n\n# Final output\nA professional data quality dashboard that is easily navigable.\n",
      "source_data": [
        "result_of_phase_2",
        "result_of_phase_3",
        "result_of_phase_4",
        "result_of_phase_5"
      ]
    }
  }
]
```
[user]: SYSTEM PROMPT:
You are a JSON-only responding assistant.

USER PROMPT:
Analyze the tool to determine if its `column_name` argument is for 'numeric', 'character', or 'any' type.
Tool: `qlty_univariateStatistics`
Description: "Get the univariate statistics for a table."
Hint: This tool is for quantitative analysis and requires a 'numeric' data type for `column_name`.
Respond with a single JSON object: {"dataType": "numeric" | "character" | "any"}
[model]: ```json
{"dataType": "numeric"}
```
[user]: SYSTEM PROMPT:
You are a JSON-only responding assistant.

USER PROMPT:
Analyze the tool to determine if its `column_name` argument is for 'numeric', 'character', or 'any' type.
Tool: `qlty_rowsWithMissingValues`
Description: "Get the rows with missing values in a table."
Hint: 
Respond with a single JSON object: {"dataType": "numeric" | "character" | "any"}
[model]: ```json
{"dataType": "any"}
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'No user question provided.'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---
Analyze the voluminous raw data from the previous loops. Your task is to distill this information. For each item (e.g., table) processed, produce a concise, one-paragraph summary of the most critical findings. Your output MUST be a clean list of these summary objects, each containing the item's name and the summary text.

--- RELEVANT DATA (Selected from Previous Phases) ---
{
  "result_of_phase_2": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableDDL",
        "database": "fitness_db",
        "table": "fitness_db.SaleDetails",
        "rows": 1
      },
      "results": [
        {
          "Request Text": "CREATE MULTISET TABLE fitness_db.SaleDetails ,FALLBACK ,\r     NO BEFORE JOURNAL,\r     NO AFTER JOURNAL,\r     CHECKSUM = DEFAULT,\r     DEFAULT MERGEBLOCKRATIO,\r     MAP = TD_MAP1\r     (\r      SaleDetailID INTEGER NOT NULL,\r      SaleID INTEGER NOT NULL,\r      ProductID INTEGER NOT NULL,\r      Quantity INTEGER NOT NULL,\r      UnitPrice DECIMAL(10,2) NOT NULL, \rFOREIGN KEY ( SaleID ) REFERENCES fitness_db.Sales ( SaleID ),\rFOREIGN KEY ( ProductID ) REFERENCES fitness_db.Products ( ProductID ))\rUNIQUE PRIMARY INDEX ( SaleDetailID );",
          "TableName": "SaleDetails"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableDDL",
        "database": "fitness_db",
        "table": "fitness_db.Products",
        "rows": 1
      },
      "results": [
        {
          "Request Text": "CREATE MULTISET TABLE fitness_db.Products ,FALLBACK ,\r     NO BEFORE JOURNAL,\r     NO AFTER JOURNAL,\r     CHECKSUM = DEFAULT,\r     DEFAULT MERGEBLOCKRATIO,\r     MAP = TD_MAP1\r     (\r      ProductID INTEGER NOT NULL,\r      ProductName VARCHAR(100) CHARACTER SET LATIN NOT CASESPECIFIC NOT NULL,\r      ProductType VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC,\r      Brand VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC,\r      Price DECIMAL(10,2) NOT NULL,\r      StockQuantity INTEGER)\rUNIQUE PRIMARY INDEX ( ProductID );",
          "TableName": "Products"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableDDL",
        "database": "fitness_db",
        "table": "fitness_db.Customers",
        "rows": 1
      },
      "results": [
        {
          "Request Text": "CREATE MULTISET TABLE fitness_db.Customers ,FALLBACK ,\r     NO BEFORE JOURNAL,\r     NO AFTER JOURNAL,\r     CHECKSUM = DEFAULT,\r     DEFAULT MERGEBLOCKRATIO,\r     MAP = TD_MAP1\r     (\r      CustomerID INTEGER NOT NULL,\r      FirstName VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC,\r      LastName VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC,\r      Email VARCHAR(100) CHARACTER SET LATIN NOT CASESPECIFIC,\r      Phone VARCHAR(20) CHARACTER SET LATIN NOT CASESPECIFIC,\r      Address VARCHAR(255) CHARACTER SET LATIN NOT CASESPECIFIC,\r      City VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC,\r      State VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC,\r      ZipCode VARCHAR(10) CHARACTER SET LATIN NOT CASESPECIFIC,\r      RegistrationDate DATE FORMAT 'YYYY-MM-DD')\rUNIQUE PRIMARY INDEX ( CustomerID );",
          "TableName": "Customers"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableDDL",
        "database": "fitness_db",
        "table": "fitness_db.ServiceTickets",
        "rows": 1
      },
      "results": [
        {
          "Request Text": "CREATE MULTISET TABLE fitness_db.ServiceTickets ,FALLBACK ,\r     NO BEFORE JOURNAL,\r     NO AFTER JOURNAL,\r     CHECKSUM = DEFAULT,\r     DEFAULT MERGEBLOCKRATIO,\r     MAP = TD_MAP1\r     (\r      TicketID INTEGER NOT NULL,\r      CustomerID INTEGER NOT NULL,\r      ProductID INTEGER NOT NULL,\r      TicketDate DATE FORMAT 'YYYY-MM-DD' NOT NULL,\r      IssueDescription VARCHAR(1000) CHARACTER SET LATIN NOT CASESPECIFIC,\r      Status VARCHAR(20) CHARACTER SET LATIN NOT CASESPECIFIC,\r      ResolutionDate DATE FORMAT 'YYYY-MM-DD', \rFOREIGN KEY ( CustomerID ) REFERENCES fitness_db.Customers ( CustomerID ),\rFOREIGN KEY ( ProductID ) REFERENCES fitness_db.Products ( ProductID ))\rUNIQUE PRIMARY INDEX ( TicketID );",
          "TableName": "ServiceTickets"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableDDL",
        "database": "fitness_db",
        "table": "fitness_db.Sales",
        "rows": 1
      },
      "results": [
        {
          "Request Text": "CREATE MULTISET TABLE fitness_db.Sales ,FALLBACK ,\r     NO BEFORE JOURNAL,\r     NO AFTER JOURNAL,\r     CHECKSUM = DEFAULT,\r     DEFAULT MERGEBLOCKRATIO,\r     MAP = TD_MAP1\r     (\r      SaleID INTEGER NOT NULL,\r      CustomerID INTEGER NOT NULL,\r      SaleDate TIMESTAMP(6) NOT NULL,\r      TotalAmount DECIMAL(12,2) NOT NULL,\r      SalesPersonID INTEGER, \rCONSTRAINT pk_sales PRIMARY KEY ( SaleID ), \rFOREIGN KEY ( CustomerID ) REFERENCES fitness_db.Customers ( CustomerID ))\r;",
          "TableName": "Sales"
        }
      ]
    }
  ],
  "result_of_phase_3": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_columnSummary",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "rows": 5
      },
      "results": [
        {
          "ColumnName": "SaleID",
          "Datatype": "INTEGER",
          "NonNullCount": "103",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "103",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "SaleDetails"
        },
        {
          "ColumnName": "UnitPrice",
          "Datatype": "DECIMAL(10,2)",
          "NonNullCount": "103",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "103",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "SaleDetails"
        },
        {
          "ColumnName": "SaleDetailID",
          "Datatype": "INTEGER",
          "NonNullCount": "103",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "103",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "SaleDetails"
        },
        {
          "ColumnName": "ProductID",
          "Datatype": "INTEGER",
          "NonNullCount": "103",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "103",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "SaleDetails"
        },
        {
          "ColumnName": "Quantity",
          "Datatype": "INTEGER",
          "NonNullCount": "103",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "103",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "SaleDetails"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_columnSummary",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "rows": 6
      },
      "results": [
        {
          "ColumnName": "ProductName",
          "Datatype": "VARCHAR(100) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Products"
        },
        {
          "ColumnName": "Price",
          "Datatype": "DECIMAL(10,2)",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Products"
        },
        {
          "ColumnName": "ProductID",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Products"
        },
        {
          "ColumnName": "ProductType",
          "Datatype": "VARCHAR(50) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Products"
        },
        {
          "ColumnName": "Brand",
          "Datatype": "VARCHAR(50) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Products"
        },
        {
          "ColumnName": "StockQuantity",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Products"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_columnSummary",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "rows": 10
      },
      "results": [
        {
          "ColumnName": "FirstName",
          "Datatype": "VARCHAR(50) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "RegistrationDate",
          "Datatype": "DATE",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "Phone",
          "Datatype": "VARCHAR(20) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "CustomerID",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "LastName",
          "Datatype": "VARCHAR(50) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "State",
          "Datatype": "VARCHAR(50) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "City",
          "Datatype": "VARCHAR(50) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "Email",
          "Datatype": "VARCHAR(100) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "Address",
          "Datatype": "VARCHAR(255) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "ZipCode",
          "Datatype": "VARCHAR(10) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_columnSummary",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "rows": 7
      },
      "results": [
        {
          "ColumnName": "CustomerID",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "ServiceTickets"
        },
        {
          "ColumnName": "IssueDescription",
          "Datatype": "VARCHAR(1000) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "ServiceTickets"
        },
        {
          "ColumnName": "TicketID",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "ServiceTickets"
        },
        {
          "ColumnName": "ProductID",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "ServiceTickets"
        },
        {
          "ColumnName": "ResolutionDate",
          "Datatype": "DATE",
          "NonNullCount": "41",
          "NullCount": "59",
          "BlankCount": "None",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "59.0",
          "NonNullPercentage": "41.0",
          "TableName": "ServiceTickets"
        },
        {
          "ColumnName": "TicketDate",
          "Datatype": "DATE",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "ServiceTickets"
        },
        {
          "ColumnName": "Status",
          "Datatype": "VARCHAR(20) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "ServiceTickets"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_columnSummary",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "rows": 5
      },
      "results": [
        {
          "ColumnName": "CustomerID",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Sales"
        },
        {
          "ColumnName": "SalesPersonID",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Sales"
        },
        {
          "ColumnName": "SaleID",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Sales"
        },
        {
          "ColumnName": "SaleDate",
          "Datatype": "TIMESTAMP(6)",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Sales"
        },
        {
          "ColumnName": "TotalAmount",
          "Datatype": "DECIMAL(12,2)",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Sales"
        }
      ]
    }
  ],
  "result_of_phase_4": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "ProductID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "101.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "102.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "104.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "105.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.19115253773938612",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "84118.4077669903",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "147.4517299088383",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "144.6398614736261",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "48.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.1605186898125281",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MAXIMUM",
          "StatValue": "200.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MEAN",
          "StatValue": "150.23300970873785",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MEDIAN",
          "StatValue": "150.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MINIMUM",
          "StatValue": "101.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MODE",
          "StatValue": "107.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "102.02",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "110.4",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "126.5",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "106.1",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "150.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "174.5",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "189.8",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "194.89999999999998",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "198.98000000000002",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "SKEWNESS",
          "StatValue": "0.016878670555318467",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "28.717421058051073",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.8296115761869536",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "SUM",
          "StatValue": "15474.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(1)",
          "StatValue": "200.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(2)",
          "StatValue": "199.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(3)",
          "StatValue": "198.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(4)",
          "StatValue": "197.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(5)",
          "StatValue": "196.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "150.12698412698413",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "2408824.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "99.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "VARIANCE",
          "StatValue": "824.6902722253951",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "UnitPrice",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "BOTTOM5(1)",
          "StatValue": "10.99",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "BOTTOM5(2)",
          "StatValue": "14.99",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "BOTTOM5(3)",
          "StatValue": "19.99",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "BOTTOM5(4)",
          "StatValue": "21.95",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "BOTTOM5(5)",
          "StatValue": "24.99",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "1.4638173753383297",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "169531443.32416508",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "354.5317210125803",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "HARMONIC MEAN",
          "StatValue": "111.70062060591341",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "850.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "KURTOSIS",
          "StatValue": "9.671599116013837",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "MAXIMUM",
          "StatValue": "6999.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "MEAN",
          "StatValue": "880.7205825242719",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "MEDIAN",
          "StatValue": "399.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "MINIMUM",
          "StatValue": "10.99",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "MODE",
          "StatValue": "999.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(1)",
          "StatValue": "11.07",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(10)",
          "StatValue": "35.982000000000006",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(25)",
          "StatValue": "149.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(5)",
          "StatValue": "22.254",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(50)",
          "StatValue": "399.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(75)",
          "StatValue": "999.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(90)",
          "StatValue": "2178.2",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(95)",
          "StatValue": "2948.599999999996",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(99)",
          "StatValue": "6485.099800000002",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "RANGE",
          "StatValue": "6988.01",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "SKEWNESS",
          "StatValue": "2.9053409914875012",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "1289.2140915171244",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "STANDARD ERROR",
          "StatValue": "127.03003901938033",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "SUM",
          "StatValue": "90714.22",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "TOP5(1)",
          "StatValue": "6999.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "TOP5(2)",
          "StatValue": "6495.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "TOP5(3)",
          "StatValue": "5999.99",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "TOP5(4)",
          "StatValue": "4599.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "TOP5(5)",
          "StatValue": "3499.99",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "TRIMMED MEAN",
          "StatValue": "494.9150793650794",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "249425324.0058",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "77.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "VARIANCE",
          "StatValue": "1662072.9737663243",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "Quantity",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 38
      },
      "results": [
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "BOTTOM5(1)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "BOTTOM5(2)",
          "StatValue": "2.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.1642000513375526",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "2.9126213592233006",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "1.0203939240935582",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "HARMONIC MEAN",
          "StatValue": "1.0147783251231528",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "KURTOSIS",
          "StatValue": "30.900815841584166",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "MAXIMUM",
          "StatValue": "2.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "MEAN",
          "StatValue": "1.029126213592233",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "MEDIAN",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "MINIMUM",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "MODE",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(1)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(10)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(25)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(5)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(50)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(75)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(90)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(95)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(99)",
          "StatValue": "2.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "RANGE",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "SKEWNESS",
          "StatValue": "5.683402727424986",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "0.1689825771046658",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "STANDARD ERROR",
          "StatValue": "0.016650348072088237",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "SUM",
          "StatValue": "106.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "TOP5(1)",
          "StatValue": "2.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "TOP5(2)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "TRIMMED MEAN",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "112.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "2.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "VARIANCE",
          "StatValue": "0.02855511136493432",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "SaleID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "1001.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "1002.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "1003.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "1004.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "1005.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.02802273760929229",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "88192.05825242716",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "inf",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "1048.4951637518795",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "51.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2379360835637412",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MAXIMUM",
          "StatValue": "1100.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MEAN",
          "StatValue": "1049.3106796116506",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MEDIAN",
          "StatValue": "1049.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MINIMUM",
          "StatValue": "1001.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MODE",
          "StatValue": "1011.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "1002.02",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "1010.2",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "1023.5",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "1006.1",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "1049.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "1074.5",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "1089.8",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "1094.9",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "1098.98",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "SKEWNESS",
          "StatValue": "0.04296934205804725",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.40455784538545",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.897317175653385",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "SUM",
          "StatValue": "108079.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(1)",
          "StatValue": "1100.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(2)",
          "StatValue": "1099.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(3)",
          "StatValue": "1098.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(4)",
          "StatValue": "1097.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(5)",
          "StatValue": "1096.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "1049.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "113496641.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "100.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "VARIANCE",
          "StatValue": "864.6280220826192",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "SaleDetailID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "5001.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "5002.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "5003.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "5004.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "5005.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.005913999957850768",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "91052.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "inf",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "5051.825014946784",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "51.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "MAXIMUM",
          "StatValue": "5103.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "MEAN",
          "StatValue": "5052.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "MEDIAN",
          "StatValue": "5052.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "MINIMUM",
          "StatValue": "5001.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "MODE",
          "StatValue": "5001.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "5002.02",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "5011.2",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "5026.5",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "5006.1",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "5052.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "5077.5",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "5092.8",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "5097.9",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "5101.98",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "RANGE",
          "StatValue": "102.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "SKEWNESS",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.87752778706208",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.943920288775949",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "SUM",
          "StatValue": "520356.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "TOP5(1)",
          "StatValue": "5103.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "TOP5(2)",
          "StatValue": "5102.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "TOP5(3)",
          "StatValue": "5101.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "TOP5(4)",
          "StatValue": "5100.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "TOP5(5)",
          "StatValue": "5099.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "5052.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "2628929564.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "VARIANCE",
          "StatValue": "892.6666666666666",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "Price",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "Price",
          "StatName": "BOTTOM5(1)",
          "StatValue": "10.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "BOTTOM5(2)",
          "StatValue": "14.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "BOTTOM5(3)",
          "StatValue": "19.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "BOTTOM5(4)",
          "StatValue": "21.95",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "BOTTOM5(5)",
          "StatValue": "24.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "1.4369493252515202",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "167468492.11521596",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "380.45298776794465",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "HARMONIC MEAN",
          "StatValue": "128.39179187587052",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "849.02",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "KURTOSIS",
          "StatValue": "9.391651780204356",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "MAXIMUM",
          "StatValue": "6999.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "MEAN",
          "StatValue": "905.1228",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "MEDIAN",
          "StatValue": "399.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "MINIMUM",
          "StatValue": "10.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "MODE",
          "StatValue": "999.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(1)",
          "StatValue": "14.95",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(10)",
          "StatValue": "39.986000000000004",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(25)",
          "StatValue": "149.98000000000002",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(5)",
          "StatValue": "27.84",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(50)",
          "StatValue": "399.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(75)",
          "StatValue": "999.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(90)",
          "StatValue": "2208.600000000001",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(95)",
          "StatValue": "3024.0494999999987",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(99)",
          "StatValue": "6500.040000000003",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "RANGE",
          "StatValue": "6988.01",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "SKEWNESS",
          "StatValue": "2.8674067833803587",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "1300.6155967297666",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "STANDARD ERROR",
          "StatValue": "130.06155967297667",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "SUM",
          "StatValue": "90512.28",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "TOP5(1)",
          "StatValue": "6999.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "TOP5(2)",
          "StatValue": "6495.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "TOP5(3)",
          "StatValue": "5999.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "TOP5(4)",
          "StatValue": "4599.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "TOP5(5)",
          "StatValue": "3499.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "TRIMMED MEAN",
          "StatValue": "512.595",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "249393220.4232",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "78.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "VARIANCE",
          "StatValue": "1691600.9304567268",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "Price"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "StockQuantity",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "BOTTOM5(1)",
          "StatValue": "7.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "BOTTOM5(2)",
          "StatValue": "8.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "BOTTOM5(3)",
          "StatValue": "9.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "BOTTOM5(4)",
          "StatValue": "10.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "BOTTOM5(5)",
          "StatValue": "11.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "1.0931726699424213",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "2004323.44",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "74.09644779665638",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "HARMONIC MEAN",
          "StatValue": "42.040324122694265",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "145.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "KURTOSIS",
          "StatValue": "1.889626534338205",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "MAXIMUM",
          "StatValue": "600.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "MEAN",
          "StatValue": "130.16",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "MEDIAN",
          "StatValue": "70.5",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "MINIMUM",
          "StatValue": "7.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "MODE",
          "StatValue": "35.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(1)",
          "StatValue": "7.99",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(10)",
          "StatValue": "17.8",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(25)",
          "StatValue": "35.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(5)",
          "StatValue": "11.95",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(50)",
          "StatValue": "70.5",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(75)",
          "StatValue": "180.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(90)",
          "StatValue": "353.0000000000002",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(95)",
          "StatValue": "451.4999999999999",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(99)",
          "StatValue": "550.5000000000002",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "RANGE",
          "StatValue": "593.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "SKEWNESS",
          "StatValue": "1.6296619279942401",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "142.28735471970555",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "STANDARD ERROR",
          "StatValue": "14.228735471970555",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "SUM",
          "StatValue": "13016.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "TOP5(1)",
          "StatValue": "600.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "TOP5(2)",
          "StatValue": "550.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "TOP5(3)",
          "StatValue": "500.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "TOP5(4)",
          "StatValue": "480.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "TOP5(5)",
          "StatValue": "450.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "TRIMMED MEAN",
          "StatValue": "84.9",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "3698486.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "90.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "VARIANCE",
          "StatValue": "20245.691313131312",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "ProductID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "101.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "102.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "103.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "104.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "105.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.19276738854406655",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "83325.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "147.66203517302964",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "144.79041960341308",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "49.5",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MAXIMUM",
          "StatValue": "200.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MEAN",
          "StatValue": "150.5",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MEDIAN",
          "StatValue": "150.5",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MINIMUM",
          "StatValue": "101.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MODE",
          "StatValue": "101.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "101.99",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "110.9",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "125.75",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "105.95",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "150.5",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "175.25",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "190.10000000000002",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "195.05",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "199.01",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "SKEWNESS",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.011491975882016",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.9011491975882016",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "SUM",
          "StatValue": "15050.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(1)",
          "StatValue": "200.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(2)",
          "StatValue": "199.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(3)",
          "StatValue": "198.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(4)",
          "StatValue": "197.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(5)",
          "StatValue": "196.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "150.5",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "2348350.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "100.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "VARIANCE",
          "StatValue": "841.6666666666666",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "CustomerID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "1.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "2.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "3.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "4.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "5.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.574484989621426",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "83325.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "37.9926893448343",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "19.277563597396004",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "49.5",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MAXIMUM",
          "StatValue": "100.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MEAN",
          "StatValue": "50.5",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MEDIAN",
          "StatValue": "50.5",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MINIMUM",
          "StatValue": "1.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MODE",
          "StatValue": "1.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "1.99",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "10.9",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "25.75",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "5.95",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "50.5",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "75.25",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "90.10000000000001",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "95.05",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "99.01",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "SKEWNESS",
          "StatValue": "0.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.011491975882016",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.9011491975882016",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "SUM",
          "StatValue": "5050.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(1)",
          "StatValue": "100.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(2)",
          "StatValue": "99.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(3)",
          "StatValue": "98.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(4)",
          "StatValue": "97.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(5)",
          "StatValue": "96.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "50.5",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "338350.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "100.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "VARIANCE",
          "StatValue": "841.6666666666666",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "ProductID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "101.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "102.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "103.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "104.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "105.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.19276738854406655",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "83325.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "147.66203517302964",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "144.79041960341308",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "49.5",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MAXIMUM",
          "StatValue": "200.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MEAN",
          "StatValue": "150.5",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MEDIAN",
          "StatValue": "150.5",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MINIMUM",
          "StatValue": "101.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MODE",
          "StatValue": "101.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "101.99",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "110.9",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "125.75",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "105.95",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "150.5",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "175.25",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "190.10000000000002",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "195.05",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "199.01",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "SKEWNESS",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.011491975882016",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.9011491975882016",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "SUM",
          "StatValue": "15050.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(1)",
          "StatValue": "200.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(2)",
          "StatValue": "199.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(3)",
          "StatValue": "198.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(4)",
          "StatValue": "197.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(5)",
          "StatValue": "196.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "150.5",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "2348350.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "VARIANCE",
          "StatValue": "841.6666666666666",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "CustomerID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "1.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "2.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "3.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "4.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "5.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.574484989621426",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "83325.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "37.9926893448343",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "19.277563597396004",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "49.5",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MAXIMUM",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MEAN",
          "StatValue": "50.5",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MEDIAN",
          "StatValue": "50.5",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MINIMUM",
          "StatValue": "1.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MODE",
          "StatValue": "1.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "1.99",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "10.9",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "25.75",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "5.95",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "50.5",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "75.25",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "90.10000000000001",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "95.05",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "99.01",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "SKEWNESS",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.011491975882016",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.9011491975882016",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "SUM",
          "StatValue": "5050.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(1)",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(2)",
          "StatValue": "99.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(3)",
          "StatValue": "98.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(4)",
          "StatValue": "97.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(5)",
          "StatValue": "96.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "50.5",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "338350.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "VARIANCE",
          "StatValue": "841.6666666666666",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "TicketID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "9001.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "9002.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "9003.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "9004.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "9005.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.003205512620947132",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "83325.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "inf",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "9050.407932514327",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "49.5",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "MAXIMUM",
          "StatValue": "9100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "MEAN",
          "StatValue": "9050.5",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "MEDIAN",
          "StatValue": "9050.5",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "MINIMUM",
          "StatValue": "9001.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "MODE",
          "StatValue": "9001.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "9001.99",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "9010.9",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "9025.75",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "9005.95",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "9050.5",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "9075.25",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "9090.1",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "9095.05",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "9099.01",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "SKEWNESS",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.011491975882016",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.9011491975882016",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "SUM",
          "StatValue": "905050.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "TOP5(1)",
          "StatValue": "9100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "TOP5(2)",
          "StatValue": "9099.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "TOP5(3)",
          "StatValue": "9098.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "TOP5(4)",
          "StatValue": "9097.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "TOP5(5)",
          "StatValue": "9096.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "9050.5",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "8191238350.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "VARIANCE",
          "StatValue": "841.6666666666666",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "SalesPersonID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 40
      },
      "results": [
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "10.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "11.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "12.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.07545825324943571",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "67.95999999999994",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "10.94902558107801",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "10.918114143920594",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "2.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.544350016404825",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "MAXIMUM",
          "StatValue": "12.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "MEAN",
          "StatValue": "10.98",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "MEDIAN",
          "StatValue": "11.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "MINIMUM",
          "StatValue": "10.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "MODE",
          "StatValue": "10.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "10.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "10.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "10.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "10.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "11.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "12.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "12.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "12.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "12.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "RANGE",
          "StatValue": "2.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "SKEWNESS",
          "StatValue": "0.037665227942409514",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "0.8285316206788041",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "STANDARD ERROR",
          "StatValue": "0.08285316206788042",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "SUM",
          "StatValue": "1098.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "TOP5(1)",
          "StatValue": "12.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "TOP5(2)",
          "StatValue": "11.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "TOP5(3)",
          "StatValue": "10.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "10.966666666666667",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "12124.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "3.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "VARIANCE",
          "StatValue": "0.6864646464646458",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "TotalAmount",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "BOTTOM5(1)",
          "StatValue": "10.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "BOTTOM5(2)",
          "StatValue": "14.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "BOTTOM5(3)",
          "StatValue": "19.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "BOTTOM5(4)",
          "StatValue": "21.95",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "BOTTOM5(5)",
          "StatValue": "24.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "1.4306165918632576",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "167056895.92067498",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "389.5932632366347",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "HARMONIC MEAN",
          "StatValue": "134.52441406134025",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "849.02",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "KURTOSIS",
          "StatValue": "9.424963916266076",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "MAXIMUM",
          "StatValue": "6999.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "MEAN",
          "StatValue": "908.0115000000001",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "MEDIAN",
          "StatValue": "399.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "MINIMUM",
          "StatValue": "10.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "MODE",
          "StatValue": "999.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(1)",
          "StatValue": "14.95",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(10)",
          "StatValue": "45.39",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(25)",
          "StatValue": "149.98000000000002",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(5)",
          "StatValue": "27.84",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(50)",
          "StatValue": "399.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(75)",
          "StatValue": "999.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(90)",
          "StatValue": "2208.600000000001",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(95)",
          "StatValue": "3024.0494999999987",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(99)",
          "StatValue": "6500.040000000003",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "RANGE",
          "StatValue": "6988.01",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "SKEWNESS",
          "StatValue": "2.873294957931939",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "1299.0163175026444",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "STANDARD ERROR",
          "StatValue": "129.90163175026444",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "SUM",
          "StatValue": "90801.15000000001",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "TOP5(1)",
          "StatValue": "6999.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "TOP5(2)",
          "StatValue": "6495.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "TOP5(3)",
          "StatValue": "5999.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "TOP5(4)",
          "StatValue": "4599.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "TOP5(5)",
          "StatValue": "3499.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "TRIMMED MEAN",
          "StatValue": "516.3265",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "249505384.3339",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "79.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "VARIANCE",
          "StatValue": "1687443.3931381311",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "CustomerID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "1.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "2.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "3.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "4.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "5.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.574484989621426",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "83325.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "37.9926893448343",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "19.277563597396004",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "49.5",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MAXIMUM",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MEAN",
          "StatValue": "50.5",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MEDIAN",
          "StatValue": "50.5",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MINIMUM",
          "StatValue": "1.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MODE",
          "StatValue": "1.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "1.99",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "10.9",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "25.75",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "5.95",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "50.5",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "75.25",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "90.10000000000001",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "95.05",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "99.01",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "SKEWNESS",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.011491975882016",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.9011491975882016",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "SUM",
          "StatValue": "5050.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(1)",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(2)",
          "StatValue": "99.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(3)",
          "StatValue": "98.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(4)",
          "StatValue": "97.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(5)",
          "StatValue": "96.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "50.5",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "338350.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "VARIANCE",
          "StatValue": "841.6666666666666",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "SaleID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "1001.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "1002.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "1003.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "1004.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "1005.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.027616841481087118",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "83325.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "1050.1032083326036",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "1049.7063267286171",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "49.5",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MAXIMUM",
          "StatValue": "1100.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MEAN",
          "StatValue": "1050.5",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MEDIAN",
          "StatValue": "1050.5",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MINIMUM",
          "StatValue": "1001.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MODE",
          "StatValue": "1001.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "1001.99",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "1010.9",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "1025.75",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "1005.95",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "1050.5",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "1075.25",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "1090.1",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "1095.05",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "1099.01",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "SKEWNESS",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.011491975882016",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.9011491975882016",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "SUM",
          "StatValue": "105050.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(1)",
          "StatValue": "1100.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(2)",
          "StatValue": "1099.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(3)",
          "StatValue": "1098.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(4)",
          "StatValue": "1097.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(5)",
          "StatValue": "1096.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "1050.5",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "110438350.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "VARIANCE",
          "StatValue": "841.6666666666666",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        }
      ]
    }
  ],
  "result_of_phase_5": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "ProductID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "UnitPrice",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "Quantity",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "SaleID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "SaleDetailID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "ProductType",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "Price",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "StockQuantity",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "Brand",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "ProductName",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "ProductID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "LastName",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "Phone",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "Address",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "City",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "ZipCode",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "RegistrationDate",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "State",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "Email",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "FirstName",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "CustomerID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "ProductID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "IssueDescription",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "Status",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "row_count": 59,
        "columns": [
          "TicketID",
          "CustomerID",
          "ProductID",
          "TicketDate",
          "IssueDescription",
          "Status",
          "ResolutionDate",
          "TableName",
          "ColumnName"
        ],
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "ResolutionDate",
        "rows_with_missing_values": 59
      },
      "comment": "Full data is too large for context. This is a summary."
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "TicketDate",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "CustomerID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "TicketID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "SaleDate",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "SalesPersonID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "TotalAmount",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "CustomerID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "SaleID",
        "rows_with_missing_values": 0
      },
      "results": []
    }
  ]
}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
- database_name: fitness_db
- table_name: fitness_db.SaleDetails

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.

2025-09-07 21:24:16,258 - --- FULL CONTEXT (Session: 55093c07-efcc-41ba-bb63-15771bf3bf02) ---
--- REASON FOR CALL ---
Executing CoreLLMTask: # Name:  Database data quality assessment

# Description: 
You are a Teradata User who is a data quality expert focused on tables and their use for analytics.

# Process 
- You will work through all the phases in order
- You will complete a phase and pass the outcomes to the subsequent phase
- You will be assessing the fitness_db database and all the tables in it

## Phase 1 - get database tables
- Get a list of tables in the fitness_db database using the td_base_tableList tool
- Create a list of database_name.table_name for the next phase

## Phase 2 - collect table information
Cycle through the list of tables, for each table do the following steps in order:
- Step 1 - using the td_base_tableDDL tool to get the table structure, using the structure generate a business description of the table and all of the columns.
- Step 2 - using the qlty_columnSummary tool, gather column statistics for the table
- Step 3 - using the qlty_univariateStatistics tool to get the univariate statistics for a table 
- Step 4 - using the qlty_rowsWithMissingValues tool to get rows with missing values in a table

## Phase 3 - Present results as a dashboard
- At the beginning of the dashboard identify the database
- For each table present the results from phase 2 together
- Ensure that each table is presented the same way
- Use color to highlight points of interest

# Communication guidelines
- Be concise but informative in your explanation
- Clearly indicate which phase you are currently in and only focus on the activities of the current phase
- Summarize the outcome of the phase before moving to the next phase

# Final output
A professional data quality dashboard that is easily navigable.


--- History (History Disabled for LLM Call: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Administration ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Database Information ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `sql_Analyze_Cluster_Stats` (tool): 
**ANALYZE SQL QUERY CLUSTER PERFORMANCE STATISTICS**

This tool analyzes pre-computed cluster statistics to identify optimization opportunities without re-running the clustering pipeline. Perfect for iterative analysis and decision-making on which query clusters to focus optimization efforts.

**ANALYSIS CAPABILITIES:**
- **Performance Ranking**: Sort clusters by any performance metric to identify top resource consumers
- **Resource Impact Assessment**: Compare clusters by CPU usage, I/O volume, and execution complexity
- **Skew Problem Detection**: Identify clusters with CPU or I/O distribution issues
- **Workload Characterization**: Understand query patterns by user, application, and workload type
- **Optimization Prioritization**: Focus on clusters with highest impact potential

**AVAILABLE SORTING METRICS:**
- **avg_cpu**: Average CPU seconds per cluster (primary optimization target)
- **avg_io**: Average logical I/O operations (scan intensity indicator)
- **avg_cpuskw**: Average CPU skew (distribution problem indicator)
- **avg_ioskw**: Average I/O skew (hot spot indicator)
- **avg_pji**: Average Physical-to-Logical I/O ratio (compute intensity)
- **avg_uii**: Average Unit I/O Intensity (I/O efficiency)
- **avg_numsteps**: Average query plan complexity
- **queries**: Number of queries in cluster (frequency indicator)
- **cluster_silhouette_score**: Clustering quality measure

**PERFORMANCE CATEGORIZATION:**
Automatically categorizes clusters using configurable thresholds (from sql_opt_config.yml):
- **HIGH_CPU_USAGE**: Average CPU > config.performance_thresholds.cpu.high
- **HIGH_IO_USAGE**: Average I/O > config.performance_thresholds.io.high
- **HIGH_CPU_SKEW**: CPU skew > config.performance_thresholds.skew.high
- **HIGH_IO_SKEW**: I/O skew > config.performance_thresholds.skew.high
- **NORMAL**: Clusters within configured normal performance ranges

**TYPICAL ANALYSIS WORKFLOW:**
1. Sort by 'avg_cpu' or 'avg_io' to find highest resource consumers
2. Sort by 'avg_cpuskw' or 'avg_ioskw' to find distribution problems
4. Use limit_results to focus on top problematic clusters

**OPTIMIZATION DECISION FRAMEWORK:**
- **High CPU + High Query Count**: Maximum impact optimization candidates
- **High Skew + Moderate CPU**: Distribution/statistics problems
- **High I/O + Low PJI**: Potential indexing opportunities
- **High NumSteps**: Complex query rewriting candidates

**OUTPUT FORMAT:**
Returns detailed cluster statistics with performance rankings, categories, and metadata for LLM analysis and optimization recommendations.

  - Arguments:
    - `sort_by_metric` (string, optional): Sort By Metric
    - `limit_results` (integer, optional): Limit Results
- `sql_Execute_Full_Pipeline` (tool): 
**COMPLETE SQL QUERY CLUSTERING PIPELINE FOR HIGH-USAGE QUERY OPTIMIZATION**

This tool executes the entire SQL query clustering workflow to identify and analyze high CPU usage queries for optimization opportunities. It's designed for database performance analysts and DBAs who need to systematically identify query optimization candidates.

**FULL PIPELINE WORKFLOW:**
1. **Query Log Extraction**: Extracts SQL queries from DBC.DBQLSqlTbl with comprehensive performance metrics
2. **Performance Metrics Calculation**: Computes CPU skew, I/O skew, PJI (Physical to Logical I/O ratio), UII (Unit I/O Intensity)
3. **Query Tokenization**: Tokenizes SQL text using {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')} tokenizer via ivsm.tokenizer_encode
4. **Embedding Generation**: Creates semantic embeddings using ivsm.IVSM_score with ONNX models
5. **Vector Store Creation**: Converts embeddings to vector columns via ivsm.vector_to_columns
6. **K-Means Clustering**: Groups similar queries using TD_KMeans with optimal K from configuration
7. **Silhouette Analysis**: Calculates clustering quality scores using TD_Silhouette
8. **Statistics Generation**: Creates comprehensive cluster statistics with performance aggregations

**PERFORMANCE METRICS EXPLAINED:**
- **AMPCPUTIME**: Total CPU seconds across all AMPs (primary optimization target)
- **CPUSKW/IOSKW**: CPU/I/O skew ratios (>2.0 indicates distribution problems)
- **PJI**: Physical-to-Logical I/O ratio (higher = more CPU-intensive)
- **UII**: Unit I/O Intensity (higher = more I/O-intensive relative to CPU)
- **LogicalIO**: Total logical I/O operations (indicates scan intensity)
- **NumSteps**: Query plan complexity (higher = more complex plans)

**CONFIGURATION (from sql_opt_config.yml):**
- Uses top {default_max_queries} queries by CPU time (configurable)
- Creates {default_optimal_k} clusters by default (configurable via optimal_k parameter)
- Embedding model: {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')}
- Vector dimensions: {sql_clustering_config.get('embedding', {}).get('vector_length', 384)}
- All database and table names are configurable

**OPTIMIZATION WORKFLOW:**
After running this tool, use:
1. sql_Analyze_Cluster_Stats to identify problematic clusters
2. sql_Retrieve_Cluster_Queries to get actual SQL from target clusters
3. LLM analysis to identify patterns and propose specific optimizations

**USE CASES:**
- Identify query families consuming the most system resources
- Find queries with similar patterns but different performance
- Discover optimization opportunities through clustering analysis
- Prioritize DBA effort on highest-impact query improvements
- Understand workload composition and resource distribution

**PREREQUISITES:**
- DBC.DBQLSqlTbl and DBC.DBQLOgTbl must be accessible
- Embedding models and tokenizers must be installed in feature_ext_db
- Sufficient space in feature_ext_db for intermediate and final tables

  - Arguments:
    - `optimal_k` (integer, optional): Optimal K
    - `max_queries` (integer, optional): Max Queries
- `sql_Retrieve_Cluster_Queries` (tool): 
**RETRIEVE ACTUAL SQL QUERIES FROM SPECIFIC CLUSTERS FOR PATTERN ANALYSIS**

This tool extracts the actual SQL query text and performance metrics from selected clusters, enabling detailed pattern analysis and specific optimization recommendations. Essential for moving from cluster-level analysis to actual query optimization.

**DETAILED ANALYSIS CAPABILITIES:**
- **SQL Pattern Recognition**: Analyze actual query structures, joins, predicates, and functions
- **Performance Correlation**: Connect query patterns to specific performance characteristics
- **Optimization Identification**: Identify common anti-patterns, missing indexes, inefficient joins
- **Code Quality Assessment**: Evaluate query construction, complexity, and best practices
- **Workload Understanding**: See actual business logic and data access patterns

**QUERY SELECTION STRATEGIES:**
- **By CPU Impact**: Sort by 'ampcputime' to focus on highest CPU consumers
- **By I/O Volume**: Sort by 'logicalio' to find scan-intensive queries
- **By Skew Problems**: Sort by 'cpuskw' or 'ioskw' for distribution issues
- **By Complexity**: Sort by 'numsteps' for complex execution plans
- **By Response Time**: Sort by 'response_secs' for user experience impact

**AVAILABLE METRICS FOR SORTING:**
- **ampcputime**: Total CPU seconds (primary optimization target)
- **logicalio**: Total logical I/O operations (scan indicator)
- **cpuskw**: CPU skew ratio (distribution problems)
- **ioskw**: I/O skew ratio (hot spot indicators)
- **pji**: Physical-to-Logical I/O ratio (compute intensity)
- **uii**: Unit I/O Intensity (I/O efficiency)
- **numsteps**: Query execution plan steps (complexity)
- **response_secs**: Wall-clock execution time (user impact)
- **delaytime**: Time spent in queue (concurrency issues)

**AUTOMATIC PERFORMANCE CATEGORIZATION:**
Each query is categorized using configurable thresholds (from sql_opt_config.yml):
- **CPU Categories**: VERY_HIGH_CPU (>config.very_high), HIGH_CPU (>config.high), MEDIUM_CPU (>10s), LOW_CPU
- **CPU Skew**: SEVERE_CPU_SKEW (>config.severe), HIGH_CPU_SKEW (>config.high), MODERATE_CPU_SKEW (>config.moderate), NORMAL
- **I/O Skew**: SEVERE_IO_SKEW (>config.severe), HIGH_IO_SKEW (>config.high), MODERATE_IO_SKEW (>config.moderate), NORMAL

Use thresholds set in config file for, CPU - high, very_high, Skew moderate, high, severe

**TYPICAL OPTIMIZATION WORKFLOW:**
1. Start with clusters identified from sql_Analyze_Cluster_Stats
2. Retrieve top queries by impact metric (usually 'ampcputime')
3. Analyze SQL patterns for common issues:
   - Missing WHERE clauses or inefficient predicates
   - Cartesian products or missing JOIN conditions
   - Inefficient GROUP BY or ORDER BY operations
   - Suboptimal table access patterns
   - Missing or outdated statistics
4. Develop specific optimization recommendations

**QUERY LIMIT STRATEGY:**
- Use the query limit set in config file for  pattern recognition and analysis, unless user specifies a different limit

**OUTPUT INCLUDES:**
- Complete SQL query text for each query
- All performance metrics, user, application, and workload context, cluster membership and rankings
- Performance categories for quick filtering        

  - Arguments:
    - `cluster_ids` (array, required): Cluster Ids
    - `metric` (string, optional): Metric
    - `limit_per_cluster` (integer, optional): Limit Per Cluster
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Uncategorized ---
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
--- Category: Utilities ---
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `rag_Execute_Workflow` (tool): 
Execute complete RAG workflow to answer user questions based on document context.
This tool handles the entire RAG pipeline in a single step when a user query is tagged with /rag.

WORKFLOW STEPS (executed automatically):
1. Configuration setup using configurable values from rag_config.yml
2. Store user query with '/rag ' prefix stripping  
3. Generate query embeddings using either BYOM (ONNXEmbeddings) or IVSM functions based on config
4. Perform semantic search against precomputed chunk embeddings
5. Return context chunks for answer generation

CONFIGURATION VALUES (from rag_config.yml):
- version: 'ivsm' or 'byom' to select embedding approach
- All database names, table names, and model settings are configurable
- Vector store metadata fields are dynamically detected
- Embedding parameters are configurable
- Default chunk retrieval count is configurable
- Default values are provided as fallback

TECHNICAL DETAILS:
- Strips the '/rag ' prefix if present from user questions
- Creates query table if it does not exist (columns: id, txt, created_ts)
- BYOM approach: Uses mldb.ONNXEmbeddings UDF for tokenization and embedding
- IVSM approach: Uses ivsm.tokenizer_encode and ivsm.IVSM_score functions
- Both approaches store embeddings in configured output table
- Uses cosine similarity via TD_VECTORDISTANCE for semantic search
- Returns the top-k matching chunks from the configured vector store
- Each result includes chunk text, similarity score, and metadata fields

CRITICAL ANSWERING RULES:
- Answer ONLY using retrieved chunks - no external knowledge, speculation, or inference
- Quote source content directly without paraphrasing, summarizing, or rewriting
- If no relevant context found: "Not enough information found in the provided context"
- If partial context: "The available context does not fully answer the question"
- Include document/page references when available (e.g., "On page 2 of 'demo_policy.pdf'...")
- Execute entire workflow silently without showing function calls to user - only show final answer

LANGUAGE RESTRICTIONS:
- Do not say "According to the context" or "The context says" - just quote directly
- Do not say "It can be inferred that..." - no inference allowed
- Use exact or near-verbatim quotes only
- No paraphrasing, summarizing, or adding transitions between quotes
- Copy content precisely - no expansion or interpretation

BEHAVIORAL REQUIREMENTS:
- Execute all RAG workflow steps silently without showing tool calls to users
- Only display final answers based strictly on retrieved context chunks
- Do not use external knowledge or speculation - only quote retrieved content directly
- RAG mode only triggers with explicit /rag prefix - do not enter RAG mode implicitly
- Hide all tool execution steps from user
- Provide clean, direct response with only the answer based on retrieved chunks
- This is a complete end-to-end RAG workflow - no additional tools needed

EXECUTION: Run completely silently - user only sees their question and the final context-grounded answer.

  - Arguments:
    - `question` (string, required): Question
    - `k` (integer, optional): K
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Available Prompts ---
--- Category: Data Quality ---
- `qlty_databaseQuality` (prompt): Database data quality assessment.
  - Arguments:
    - `database_name` (str, required): Name of the database to assess for data quality.
--- Category: Database Administration ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Utilities ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
- `base_teradata_query` (prompt): A Teradata SQL expert that executes SQL requests effectively, understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONSTRAINTS ---
You are explicitly forbidden from using the following capabilities in your plan under any circumstances:
- `sales_top_customers` (tool)
- `base_query` (prompt)




1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * Your plan **Must** combine mutiple SQL steps in to a single SQL call if possible.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `what is the quality of database fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `what is the quality of database fitness_db?`
-   Explicit Parameters: 
-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.


Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Assess the data quality of the database fitness_db.",
    "executable_prompt": "qlty_databaseQuality",
    "arguments": {
      "database_name": "fitness_db"
    }
  }
]
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

**CRITICAL RULE (Planner Efficiency):** You **MUST NOT** create a multi-phase plan using tools if the user's goal can be fully achieved by a single, available prompt. If a prompt exists that matches the user's request for an analysis or report, you **MUST** call that prompt directly. Do not create a plan that manually replicates the function of an existing prompt.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt. I am forbidden from creating a multi-step plan to get the DDL and then summarize it.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `database_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Administration ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Database Information ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `sql_Analyze_Cluster_Stats` (tool): 
**ANALYZE SQL QUERY CLUSTER PERFORMANCE STATISTICS**

This tool analyzes pre-computed cluster statistics to identify optimization opportunities without re-running the clustering pipeline. Perfect for iterative analysis and decision-making on which query clusters to focus optimization efforts.

**ANALYSIS CAPABILITIES:**
- **Performance Ranking**: Sort clusters by any performance metric to identify top resource consumers
- **Resource Impact Assessment**: Compare clusters by CPU usage, I/O volume, and execution complexity
- **Skew Problem Detection**: Identify clusters with CPU or I/O distribution issues
- **Workload Characterization**: Understand query patterns by user, application, and workload type
- **Optimization Prioritization**: Focus on clusters with highest impact potential

**AVAILABLE SORTING METRICS:**
- **avg_cpu**: Average CPU seconds per cluster (primary optimization target)
- **avg_io**: Average logical I/O operations (scan intensity indicator)
- **avg_cpuskw**: Average CPU skew (distribution problem indicator)
- **avg_ioskw**: Average I/O skew (hot spot indicator)
- **avg_pji**: Average Physical-to-Logical I/O ratio (compute intensity)
- **avg_uii**: Average Unit I/O Intensity (I/O efficiency)
- **avg_numsteps**: Average query plan complexity
- **queries**: Number of queries in cluster (frequency indicator)
- **cluster_silhouette_score**: Clustering quality measure

**PERFORMANCE CATEGORIZATION:**
Automatically categorizes clusters using configurable thresholds (from sql_opt_config.yml):
- **HIGH_CPU_USAGE**: Average CPU > config.performance_thresholds.cpu.high
- **HIGH_IO_USAGE**: Average I/O > config.performance_thresholds.io.high
- **HIGH_CPU_SKEW**: CPU skew > config.performance_thresholds.skew.high
- **HIGH_IO_SKEW**: I/O skew > config.performance_thresholds.skew.high
- **NORMAL**: Clusters within configured normal performance ranges

**TYPICAL ANALYSIS WORKFLOW:**
1. Sort by 'avg_cpu' or 'avg_io' to find highest resource consumers
2. Sort by 'avg_cpuskw' or 'avg_ioskw' to find distribution problems
4. Use limit_results to focus on top problematic clusters

**OPTIMIZATION DECISION FRAMEWORK:**
- **High CPU + High Query Count**: Maximum impact optimization candidates
- **High Skew + Moderate CPU**: Distribution/statistics problems
- **High I/O + Low PJI**: Potential indexing opportunities
- **High NumSteps**: Complex query rewriting candidates

**OUTPUT FORMAT:**
Returns detailed cluster statistics with performance rankings, categories, and metadata for LLM analysis and optimization recommendations.

  - Arguments:
    - `sort_by_metric` (string, optional): Sort By Metric
    - `limit_results` (integer, optional): Limit Results
- `sql_Execute_Full_Pipeline` (tool): 
**COMPLETE SQL QUERY CLUSTERING PIPELINE FOR HIGH-USAGE QUERY OPTIMIZATION**

This tool executes the entire SQL query clustering workflow to identify and analyze high CPU usage queries for optimization opportunities. It's designed for database performance analysts and DBAs who need to systematically identify query optimization candidates.

**FULL PIPELINE WORKFLOW:**
1. **Query Log Extraction**: Extracts SQL queries from DBC.DBQLSqlTbl with comprehensive performance metrics
2. **Performance Metrics Calculation**: Computes CPU skew, I/O skew, PJI (Physical to Logical I/O ratio), UII (Unit I/O Intensity)
3. **Query Tokenization**: Tokenizes SQL text using {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')} tokenizer via ivsm.tokenizer_encode
4. **Embedding Generation**: Creates semantic embeddings using ivsm.IVSM_score with ONNX models
5. **Vector Store Creation**: Converts embeddings to vector columns via ivsm.vector_to_columns
6. **K-Means Clustering**: Groups similar queries using TD_KMeans with optimal K from configuration
7. **Silhouette Analysis**: Calculates clustering quality scores using TD_Silhouette
8. **Statistics Generation**: Creates comprehensive cluster statistics with performance aggregations

**PERFORMANCE METRICS EXPLAINED:**
- **AMPCPUTIME**: Total CPU seconds across all AMPs (primary optimization target)
- **CPUSKW/IOSKW**: CPU/I/O skew ratios (>2.0 indicates distribution problems)
- **PJI**: Physical-to-Logical I/O ratio (higher = more CPU-intensive)
- **UII**: Unit I/O Intensity (higher = more I/O-intensive relative to CPU)
- **LogicalIO**: Total logical I/O operations (indicates scan intensity)
- **NumSteps**: Query plan complexity (higher = more complex plans)

**CONFIGURATION (from sql_opt_config.yml):**
- Uses top {default_max_queries} queries by CPU time (configurable)
- Creates {default_optimal_k} clusters by default (configurable via optimal_k parameter)
- Embedding model: {sql_clustering_config.get('model', {}).get('model_id', 'bge-small-en-v1.5')}
- Vector dimensions: {sql_clustering_config.get('embedding', {}).get('vector_length', 384)}
- All database and table names are configurable

**OPTIMIZATION WORKFLOW:**
After running this tool, use:
1. sql_Analyze_Cluster_Stats to identify problematic clusters
2. sql_Retrieve_Cluster_Queries to get actual SQL from target clusters
3. LLM analysis to identify patterns and propose specific optimizations

**USE CASES:**
- Identify query families consuming the most system resources
- Find queries with similar patterns but different performance
- Discover optimization opportunities through clustering analysis
- Prioritize DBA effort on highest-impact query improvements
- Understand workload composition and resource distribution

**PREREQUISITES:**
- DBC.DBQLSqlTbl and DBC.DBQLOgTbl must be accessible
- Embedding models and tokenizers must be installed in feature_ext_db
- Sufficient space in feature_ext_db for intermediate and final tables

  - Arguments:
    - `optimal_k` (integer, optional): Optimal K
    - `max_queries` (integer, optional): Max Queries
- `sql_Retrieve_Cluster_Queries` (tool): 
**RETRIEVE ACTUAL SQL QUERIES FROM SPECIFIC CLUSTERS FOR PATTERN ANALYSIS**

This tool extracts the actual SQL query text and performance metrics from selected clusters, enabling detailed pattern analysis and specific optimization recommendations. Essential for moving from cluster-level analysis to actual query optimization.

**DETAILED ANALYSIS CAPABILITIES:**
- **SQL Pattern Recognition**: Analyze actual query structures, joins, predicates, and functions
- **Performance Correlation**: Connect query patterns to specific performance characteristics
- **Optimization Identification**: Identify common anti-patterns, missing indexes, inefficient joins
- **Code Quality Assessment**: Evaluate query construction, complexity, and best practices
- **Workload Understanding**: See actual business logic and data access patterns

**QUERY SELECTION STRATEGIES:**
- **By CPU Impact**: Sort by 'ampcputime' to focus on highest CPU consumers
- **By I/O Volume**: Sort by 'logicalio' to find scan-intensive queries
- **By Skew Problems**: Sort by 'cpuskw' or 'ioskw' for distribution issues
- **By Complexity**: Sort by 'numsteps' for complex execution plans
- **By Response Time**: Sort by 'response_secs' for user experience impact

**AVAILABLE METRICS FOR SORTING:**
- **ampcputime**: Total CPU seconds (primary optimization target)
- **logicalio**: Total logical I/O operations (scan indicator)
- **cpuskw**: CPU skew ratio (distribution problems)
- **ioskw**: I/O skew ratio (hot spot indicators)
- **pji**: Physical-to-Logical I/O ratio (compute intensity)
- **uii**: Unit I/O Intensity (I/O efficiency)
- **numsteps**: Query execution plan steps (complexity)
- **response_secs**: Wall-clock execution time (user impact)
- **delaytime**: Time spent in queue (concurrency issues)

**AUTOMATIC PERFORMANCE CATEGORIZATION:**
Each query is categorized using configurable thresholds (from sql_opt_config.yml):
- **CPU Categories**: VERY_HIGH_CPU (>config.very_high), HIGH_CPU (>config.high), MEDIUM_CPU (>10s), LOW_CPU
- **CPU Skew**: SEVERE_CPU_SKEW (>config.severe), HIGH_CPU_SKEW (>config.high), MODERATE_CPU_SKEW (>config.moderate), NORMAL
- **I/O Skew**: SEVERE_IO_SKEW (>config.severe), HIGH_IO_SKEW (>config.high), MODERATE_IO_SKEW (>config.moderate), NORMAL

Use thresholds set in config file for, CPU - high, very_high, Skew moderate, high, severe

**TYPICAL OPTIMIZATION WORKFLOW:**
1. Start with clusters identified from sql_Analyze_Cluster_Stats
2. Retrieve top queries by impact metric (usually 'ampcputime')
3. Analyze SQL patterns for common issues:
   - Missing WHERE clauses or inefficient predicates
   - Cartesian products or missing JOIN conditions
   - Inefficient GROUP BY or ORDER BY operations
   - Suboptimal table access patterns
   - Missing or outdated statistics
4. Develop specific optimization recommendations

**QUERY LIMIT STRATEGY:**
- Use the query limit set in config file for  pattern recognition and analysis, unless user specifies a different limit

**OUTPUT INCLUDES:**
- Complete SQL query text for each query
- All performance metrics, user, application, and workload context, cluster membership and rankings
- Performance categories for quick filtering        

  - Arguments:
    - `cluster_ids` (array, required): Cluster Ids
    - `metric` (string, optional): Metric
    - `limit_per_cluster` (integer, optional): Limit Per Cluster
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Uncategorized ---
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
--- Category: Utilities ---
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `rag_Execute_Workflow` (tool): 
Execute complete RAG workflow to answer user questions based on document context.
This tool handles the entire RAG pipeline in a single step when a user query is tagged with /rag.

WORKFLOW STEPS (executed automatically):
1. Configuration setup using configurable values from rag_config.yml
2. Store user query with '/rag ' prefix stripping  
3. Generate query embeddings using either BYOM (ONNXEmbeddings) or IVSM functions based on config
4. Perform semantic search against precomputed chunk embeddings
5. Return context chunks for answer generation

CONFIGURATION VALUES (from rag_config.yml):
- version: 'ivsm' or 'byom' to select embedding approach
- All database names, table names, and model settings are configurable
- Vector store metadata fields are dynamically detected
- Embedding parameters are configurable
- Default chunk retrieval count is configurable
- Default values are provided as fallback

TECHNICAL DETAILS:
- Strips the '/rag ' prefix if present from user questions
- Creates query table if it does not exist (columns: id, txt, created_ts)
- BYOM approach: Uses mldb.ONNXEmbeddings UDF for tokenization and embedding
- IVSM approach: Uses ivsm.tokenizer_encode and ivsm.IVSM_score functions
- Both approaches store embeddings in configured output table
- Uses cosine similarity via TD_VECTORDISTANCE for semantic search
- Returns the top-k matching chunks from the configured vector store
- Each result includes chunk text, similarity score, and metadata fields

CRITICAL ANSWERING RULES:
- Answer ONLY using retrieved chunks - no external knowledge, speculation, or inference
- Quote source content directly without paraphrasing, summarizing, or rewriting
- If no relevant context found: "Not enough information found in the provided context"
- If partial context: "The available context does not fully answer the question"
- Include document/page references when available (e.g., "On page 2 of 'demo_policy.pdf'...")
- Execute entire workflow silently without showing function calls to user - only show final answer

LANGUAGE RESTRICTIONS:
- Do not say "According to the context" or "The context says" - just quote directly
- Do not say "It can be inferred that..." - no inference allowed
- Use exact or near-verbatim quotes only
- No paraphrasing, summarizing, or adding transitions between quotes
- Copy content precisely - no expansion or interpretation

BEHAVIORAL REQUIREMENTS:
- Execute all RAG workflow steps silently without showing tool calls to users
- Only display final answers based strictly on retrieved context chunks
- Do not use external knowledge or speculation - only quote retrieved content directly
- RAG mode only triggers with explicit /rag prefix - do not enter RAG mode implicitly
- Hide all tool execution steps from user
- Provide clean, direct response with only the answer based on retrieved chunks
- This is a complete end-to-end RAG workflow - no additional tools needed

EXECUTION: Run completely silently - user only sees their question and the final context-grounded answer.

  - Arguments:
    - `question` (string, required): Question
    - `k` (integer, optional): K
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
    - `synthesized_answer` (string, optional): The final, synthesized natural language answer, provided directly by the planner when it can confidently answer from history.
--- Available Prompts ---
--- Category: Data Quality ---
- `dba_tableArchive` (prompt): The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage` (prompt): You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
  - Arguments:
    - `database_name` (str, required): Name of the database to analyze for table lineage.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_tableDropImpact` (prompt): You are a Teradata DBA who is an expert in finding the impact of dropping a table.
  - Arguments:
    - `table_name` (str, required): Name of the table to analyze for drop impact.
    - `database_name` (str, required): Name of the database containing the table.
    - `number_days` (str, required): Number of days to look back for SQL execution history (e.g., 7, 30, 90).
- `dba_databaseHealthAssessment` (prompt): You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis` (prompt): Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice` (prompt): Analyze Teradata user activity patterns for the past 7 days
--- Category: Database Information ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
- `base_databaseBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of databases.
  - Arguments:
    - `database_name` (str, optional): Database to describe.
--- Category: Utilities ---
- `_testMyServer` (prompt): Test all the MCP tools, prompts and resources.
  - Arguments:
    - `domain` (str, optional): Domain to test (eg. "all" "data quality", "exploratory"...).
- `base_teradata_query` (prompt): A Teradata SQL expert that executes SQL requests effectively, understanding teradata specific syntax.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

---
### Critical Directives
You MUST follow these directives in order to create a valid and efficient plan.


--- CONSTRAINTS ---
You are explicitly forbidden from using the following capabilities in your plan under any circumstances:
- `sales_top_customers` (tool)
- `base_query` (prompt)




1.  **Analyze Goal and Context**: First, carefully read the user's `GOAL` and review the `CONTEXT` section to understand the full intent and what actions have already been taken.
    
    

2.  **Identify Conversational Turns**: If the user's `GOAL` is purely conversational (e.g., a greeting like "hello") and does not require any data or action, your response **MUST be a single JSON object**: `{"plan_type": "conversational", "response": "I'm doing well, thank you for asking! How can I help you with your Teradata database system today?"}`.

3.  **Handle Context and Parameters Correctly**:
    * **Prioritize the Goal**: You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in the `Workflow History`. The history is for supplementing missing information, not for overriding the current request.
    * **Extract Parameters**: You **MUST** meticulously scan the `GOAL` for entities that correspond to tool arguments (e.g., table names) and populate the `"arguments"` block in your plan phase with these key-value pairs.

4.  **Follow the Plan Architecture**:
    * Your plan **MUST** follow a strict "data-gathering first, synthesis last" architecture.
    * If the goal requires a final summary, the plan **MUST** conclude with a single phase that uses the `CoreLLMTask` tool. The `task_description` for this phase **MUST** be the complete and verbatim text of the main `GOAL` to ensure all original context is preserved.

5.  **Optimize for Efficiency**:
    * Your plan **MUST** be as efficient as possible. Combine multiple steps into a single phase if one tool can perform the combined operation.
    * Your plan **Must** combine mutiple SQL steps in to a single SQL call if possible.
    * **CRITICAL STRATEGY (Query Pushdown Efficiency)**: Always prefer a single action that filters data at the source over multiple steps that retrieve unfiltered data and then filter it.
        * **HIGHLY PREFERRED:** Use a tool that accepts a filter (e.g., a `sql` parameter with a `WHERE` clause) to request *only the specific data you need*.
        * **AVOID IF POSSIBLE:** Do not use a general-purpose "list" tool and then follow it with a second phase to find a specific item.

6.  **Maintain Simplicity and Focus**:
    * If the `GOAL` can be answered with a single tool call, your plan **MUST** consist of only that single phase. Do not add unnecessary synthesis phases for simple data retrieval.
    * Every phase **MUST** correspond to a concrete, executable action. Do **NOT** create phases for simple verification or acknowledgement.

7.  **Adhere to Structural Rules**:
    * **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested structures. Decompose tasks with nested logic into multiple, sequential looping phases.
    * **CRITICAL RULE (Capability Type Enforcement)**: Your selection **MUST** strictly adhere to the capability type. You are **forbidden** from placing a `(prompt)` in the `"relevant_tools"` list or a `(tool)` in the `"executable_prompt"` field.

8.  **Ensure Stability**:
    * **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You **MUST NOT** create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5. If you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again.

---
### Plan JSON Structure
Your output **MUST** be a single, valid JSON array of phase objects. Each object must follow this structure:

-   `"phase"`: An integer, starting from 1.
-   `"goal"`: A concise string describing what this phase will accomplish. You MUST embed any relevant parameters from the user's goal directly into this string.
-   `"type"`: (Optional) Use `"loop"` if the phase needs to iterate over the results of a previous phase.
-   `"loop_over"`: (Required if `type` is `"loop"`) A string identifying the source of items to loop over (e.g., `"result_of_phase_1"`).
-   `"relevant_tools"`: A JSON array containing the single string name of the `(tool)` to be used in this phase.
-   `"executable_prompt"`: A string name of the `(prompt)` to be used in this phase.
-   `"arguments"`: (Optional) A JSON object of key-value pairs for the selected capability. You can use placeholders like `"result_of_phase_1"` to pass data between phases.

---
### EXAMPLE (Flattening Nested Logic)
-   **User Goal**: "For each database on the system, get the DDL for all of its tables."
-   **Correct Plan**:
    ```json
    [
      {
        "phase": 1,
        "goal": "First, get a list of all databases on the system.",
        "relevant_tools": ["base_listDatabases"]
      },
      {
        "phase": 2,
        "goal": "Now, loop over the list of databases gathered in Phase 1 and get the list of tables for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_1",
        "relevant_tools": ["base_listTables"]
      },
      {
        "phase": 3,
        "goal": "Finally, loop over the flattened list of tables gathered in Phase 2 and get the DDL for each one.",
        "type": "loop",
        "loop_over": "result_of_phase_2",
        "relevant_tools": ["base_tableDDL"]
      }
    ]

---
### Context for this Plan
-   Overall Goal: `# Name:  Database data quality assessment

# Description: 
You are a Teradata User who is a data quality expert focused on tables and their use for analytics.

# Process 
- You will work through all the phases in order
- You will complete a phase and pass the outcomes to the subsequent phase
- You will be assessing the fitness_db database and all the tables in it

## Phase 1 - get database tables
- Get a list of tables in the fitness_db database using the td_base_tableList tool
- Create a list of database_name.table_name for the next phase

## Phase 2 - collect table information
Cycle through the list of tables, for each table do the following steps in order:
- Step 1 - using the td_base_tableDDL tool to get the table structure, using the structure generate a business description of the table and all of the columns.
- Step 2 - using the qlty_columnSummary tool, gather column statistics for the table
- Step 3 - using the qlty_univariateStatistics tool to get the univariate statistics for a table 
- Step 4 - using the qlty_rowsWithMissingValues tool to get rows with missing values in a table

## Phase 3 - Present results as a dashboard
- At the beginning of the dashboard identify the database
- For each table present the results from phase 2 together
- Ensure that each table is presented the same way
- Use color to highlight points of interest

# Communication guidelines
- Be concise but informative in your explanation
- Clearly indicate which phase you are currently in and only focus on the activities of the current phase
- Summarize the outcome of the phase before moving to the next phase

# Final output
A professional data quality dashboard that is easily navigable.
`
-   Explicit Parameters: 
--- EXPLICIT PARAMETERS ---
The following parameters were explicitly provided for this prompt execution:
- database_name: "fitness_db"

-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.

- Active Prompt: You are currently executing the 'qlty_databaseQuality' prompt. Do not call it again.

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.
```

---
### Context for this Plan
-   Overall Goal: `# Name:  Database data quality assessment

# Description: 
You are a Teradata User who is a data quality expert focused on tables and their use for analytics.

# Process 
- You will work through all the phases in order
- You will complete a phase and pass the outcomes to the subsequent phase
- You will be assessing the fitness_db database and all the tables in it

## Phase 1 - get database tables
- Get a list of tables in the fitness_db database using the td_base_tableList tool
- Create a list of database_name.table_name for the next phase

## Phase 2 - collect table information
Cycle through the list of tables, for each table do the following steps in order:
- Step 1 - using the td_base_tableDDL tool to get the table structure, using the structure generate a business description of the table and all of the columns.
- Step 2 - using the qlty_columnSummary tool, gather column statistics for the table
- Step 3 - using the qlty_univariateStatistics tool to get the univariate statistics for a table 
- Step 4 - using the qlty_rowsWithMissingValues tool to get rows with missing values in a table

## Phase 3 - Present results as a dashboard
- At the beginning of the dashboard identify the database
- For each table present the results from phase 2 together
- Ensure that each table is presented the same way
- Use color to highlight points of interest

# Communication guidelines
- Be concise but informative in your explanation
- Clearly indicate which phase you are currently in and only focus on the activities of the current phase
- Summarize the outcome of the phase before moving to the next phase

# Final output
A professional data quality dashboard that is easily navigable.
`
-   Explicit Parameters: 
--- EXPLICIT PARAMETERS ---
The following parameters were explicitly provided for this prompt execution:
- database_name: "fitness_db"

-   User's Original Input: `what is the quality of database fitness_db?`
-   Workflow History: `[]`
-   Execution Depth: This is recursive call number `0`. Avoid creating identical plans.

- Active Prompt: You are currently executing the 'qlty_databaseQuality' prompt. Do not call it again.

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Get a list of tables in the fitness_db database.",
    "relevant_tools": [
      "base_tableList"
    ],
    "arguments": {
      "database_name": "fitness_db"
    }
  },
  {
    "phase": 2,
    "goal": "For each table in the list from Phase 1, get the table DDL, column summary, univariate statistics, and rows with missing values.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [
      "base_tableDDL"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "result_of_phase_1.table_name"
    }
  },
  {
    "phase": 3,
    "goal": "For each table in the list from Phase 1, get the column summary.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [
      "qlty_columnSummary"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "result_of_phase_1.table_name"
    }
  },
  {
    "phase": 4,
    "goal": "For each table in the list from Phase 1, get the univariate statistics.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [
      "qlty_univariateStatistics"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "result_of_phase_1.table_name"
    }
  },
  {
    "phase": 5,
    "goal": "For each table in the list from Phase 1, get the rows with missing values.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": [
      "qlty_rowsWithMissingValues"
    ],
    "arguments": {
      "database_name": "fitness_db",
      "table_name": "result_of_phase_1.table_name",
      "column_name": "result_of_phase_1.column_name"
    }
  },
  {
    "phase": 6,
    "goal": "Present results as a dashboard, identifying the database, presenting results from phase 2-5 together for each table, ensuring consistent presentation, and using color to highlight points of interest.",
    "relevant_tools": [
      "CoreLLMTask"
    ],
    "arguments": {
      "task_description": "# Name:  Database data quality assessment\n\n# Description: \nYou are a Teradata User who is a data quality expert focused on tables and their use for analytics.\n\n# Process \n- You will work through all the phases in order\n- You will complete a phase and pass the outcomes to the subsequent phase\n- You will be assessing the fitness_db database and all the tables in it\n\n## Phase 1 - get database tables\n- Get a list of tables in the fitness_db database using the td_base_tableList tool\n- Create a list of database_name.table_name for the next phase\n\n## Phase 2 - collect table information\nCycle through the list of tables, for each table do the following steps in order:\n- Step 1 - using the td_base_tableDDL tool to get the table structure, using the structure generate a business description of the table and all of the columns.\n- Step 2 - using the qlty_columnSummary tool, gather column statistics for the table\n- Step 3 - using the qlty_univariateStatistics tool to get the univariate statistics for a table \n- Step 4 - using the qlty_rowsWithMissingValues tool to get rows with missing values in a table\n\n## Phase 3 - Present results as a dashboard\n- At the beginning of the dashboard identify the database\n- For each table present the results from phase 2 together\n- Ensure that each table is presented the same way\n- Use color to highlight points of interest\n\n# Communication guidelines\n- Be concise but informative in your explanation\n- Clearly indicate which phase you are currently in and only focus on the activities of the current phase\n- Summarize the outcome of the phase before moving to the next phase\n\n# Final output\nA professional data quality dashboard that is easily navigable.\n",
      "source_data": [
        "result_of_phase_2",
        "result_of_phase_3",
        "result_of_phase_4",
        "result_of_phase_5"
      ]
    }
  }
]
```
[user]: SYSTEM PROMPT:
You are a JSON-only responding assistant.

USER PROMPT:
Analyze the tool to determine if its `column_name` argument is for 'numeric', 'character', or 'any' type.
Tool: `qlty_univariateStatistics`
Description: "Get the univariate statistics for a table."
Hint: This tool is for quantitative analysis and requires a 'numeric' data type for `column_name`.
Respond with a single JSON object: {"dataType": "numeric" | "character" | "any"}
[model]: ```json
{"dataType": "numeric"}
```
[user]: SYSTEM PROMPT:
You are a JSON-only responding assistant.

USER PROMPT:
Analyze the tool to determine if its `column_name` argument is for 'numeric', 'character', or 'any' type.
Tool: `qlty_rowsWithMissingValues`
Description: "Get the rows with missing values in a table."
Hint: 
Respond with a single JSON object: {"dataType": "numeric" | "character" | "any"}
[model]: ```json
{"dataType": "any"}
```
[user]: SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'No user question provided.'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---
Analyze the voluminous raw data from the previous loops. Your task is to distill this information. For each item (e.g., table) processed, produce a concise, one-paragraph summary of the most critical findings. Your output MUST be a clean list of these summary objects, each containing the item's name and the summary text.

--- RELEVANT DATA (Selected from Previous Phases) ---
{
  "result_of_phase_2": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableDDL",
        "database": "fitness_db",
        "table": "fitness_db.SaleDetails",
        "rows": 1
      },
      "results": [
        {
          "Request Text": "CREATE MULTISET TABLE fitness_db.SaleDetails ,FALLBACK ,\r     NO BEFORE JOURNAL,\r     NO AFTER JOURNAL,\r     CHECKSUM = DEFAULT,\r     DEFAULT MERGEBLOCKRATIO,\r     MAP = TD_MAP1\r     (\r      SaleDetailID INTEGER NOT NULL,\r      SaleID INTEGER NOT NULL,\r      ProductID INTEGER NOT NULL,\r      Quantity INTEGER NOT NULL,\r      UnitPrice DECIMAL(10,2) NOT NULL, \rFOREIGN KEY ( SaleID ) REFERENCES fitness_db.Sales ( SaleID ),\rFOREIGN KEY ( ProductID ) REFERENCES fitness_db.Products ( ProductID ))\rUNIQUE PRIMARY INDEX ( SaleDetailID );",
          "TableName": "SaleDetails"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableDDL",
        "database": "fitness_db",
        "table": "fitness_db.Products",
        "rows": 1
      },
      "results": [
        {
          "Request Text": "CREATE MULTISET TABLE fitness_db.Products ,FALLBACK ,\r     NO BEFORE JOURNAL,\r     NO AFTER JOURNAL,\r     CHECKSUM = DEFAULT,\r     DEFAULT MERGEBLOCKRATIO,\r     MAP = TD_MAP1\r     (\r      ProductID INTEGER NOT NULL,\r      ProductName VARCHAR(100) CHARACTER SET LATIN NOT CASESPECIFIC NOT NULL,\r      ProductType VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC,\r      Brand VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC,\r      Price DECIMAL(10,2) NOT NULL,\r      StockQuantity INTEGER)\rUNIQUE PRIMARY INDEX ( ProductID );",
          "TableName": "Products"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableDDL",
        "database": "fitness_db",
        "table": "fitness_db.Customers",
        "rows": 1
      },
      "results": [
        {
          "Request Text": "CREATE MULTISET TABLE fitness_db.Customers ,FALLBACK ,\r     NO BEFORE JOURNAL,\r     NO AFTER JOURNAL,\r     CHECKSUM = DEFAULT,\r     DEFAULT MERGEBLOCKRATIO,\r     MAP = TD_MAP1\r     (\r      CustomerID INTEGER NOT NULL,\r      FirstName VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC,\r      LastName VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC,\r      Email VARCHAR(100) CHARACTER SET LATIN NOT CASESPECIFIC,\r      Phone VARCHAR(20) CHARACTER SET LATIN NOT CASESPECIFIC,\r      Address VARCHAR(255) CHARACTER SET LATIN NOT CASESPECIFIC,\r      City VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC,\r      State VARCHAR(50) CHARACTER SET LATIN NOT CASESPECIFIC,\r      ZipCode VARCHAR(10) CHARACTER SET LATIN NOT CASESPECIFIC,\r      RegistrationDate DATE FORMAT 'YYYY-MM-DD')\rUNIQUE PRIMARY INDEX ( CustomerID );",
          "TableName": "Customers"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableDDL",
        "database": "fitness_db",
        "table": "fitness_db.ServiceTickets",
        "rows": 1
      },
      "results": [
        {
          "Request Text": "CREATE MULTISET TABLE fitness_db.ServiceTickets ,FALLBACK ,\r     NO BEFORE JOURNAL,\r     NO AFTER JOURNAL,\r     CHECKSUM = DEFAULT,\r     DEFAULT MERGEBLOCKRATIO,\r     MAP = TD_MAP1\r     (\r      TicketID INTEGER NOT NULL,\r      CustomerID INTEGER NOT NULL,\r      ProductID INTEGER NOT NULL,\r      TicketDate DATE FORMAT 'YYYY-MM-DD' NOT NULL,\r      IssueDescription VARCHAR(1000) CHARACTER SET LATIN NOT CASESPECIFIC,\r      Status VARCHAR(20) CHARACTER SET LATIN NOT CASESPECIFIC,\r      ResolutionDate DATE FORMAT 'YYYY-MM-DD', \rFOREIGN KEY ( CustomerID ) REFERENCES fitness_db.Customers ( CustomerID ),\rFOREIGN KEY ( ProductID ) REFERENCES fitness_db.Products ( ProductID ))\rUNIQUE PRIMARY INDEX ( TicketID );",
          "TableName": "ServiceTickets"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableDDL",
        "database": "fitness_db",
        "table": "fitness_db.Sales",
        "rows": 1
      },
      "results": [
        {
          "Request Text": "CREATE MULTISET TABLE fitness_db.Sales ,FALLBACK ,\r     NO BEFORE JOURNAL,\r     NO AFTER JOURNAL,\r     CHECKSUM = DEFAULT,\r     DEFAULT MERGEBLOCKRATIO,\r     MAP = TD_MAP1\r     (\r      SaleID INTEGER NOT NULL,\r      CustomerID INTEGER NOT NULL,\r      SaleDate TIMESTAMP(6) NOT NULL,\r      TotalAmount DECIMAL(12,2) NOT NULL,\r      SalesPersonID INTEGER, \rCONSTRAINT pk_sales PRIMARY KEY ( SaleID ), \rFOREIGN KEY ( CustomerID ) REFERENCES fitness_db.Customers ( CustomerID ))\r;",
          "TableName": "Sales"
        }
      ]
    }
  ],
  "result_of_phase_3": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_columnSummary",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "rows": 5
      },
      "results": [
        {
          "ColumnName": "SaleID",
          "Datatype": "INTEGER",
          "NonNullCount": "103",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "103",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "SaleDetails"
        },
        {
          "ColumnName": "UnitPrice",
          "Datatype": "DECIMAL(10,2)",
          "NonNullCount": "103",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "103",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "SaleDetails"
        },
        {
          "ColumnName": "SaleDetailID",
          "Datatype": "INTEGER",
          "NonNullCount": "103",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "103",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "SaleDetails"
        },
        {
          "ColumnName": "ProductID",
          "Datatype": "INTEGER",
          "NonNullCount": "103",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "103",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "SaleDetails"
        },
        {
          "ColumnName": "Quantity",
          "Datatype": "INTEGER",
          "NonNullCount": "103",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "103",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "SaleDetails"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_columnSummary",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "rows": 6
      },
      "results": [
        {
          "ColumnName": "ProductName",
          "Datatype": "VARCHAR(100) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Products"
        },
        {
          "ColumnName": "Price",
          "Datatype": "DECIMAL(10,2)",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Products"
        },
        {
          "ColumnName": "ProductID",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Products"
        },
        {
          "ColumnName": "ProductType",
          "Datatype": "VARCHAR(50) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Products"
        },
        {
          "ColumnName": "Brand",
          "Datatype": "VARCHAR(50) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Products"
        },
        {
          "ColumnName": "StockQuantity",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Products"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_columnSummary",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "rows": 10
      },
      "results": [
        {
          "ColumnName": "FirstName",
          "Datatype": "VARCHAR(50) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "RegistrationDate",
          "Datatype": "DATE",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "Phone",
          "Datatype": "VARCHAR(20) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "CustomerID",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "LastName",
          "Datatype": "VARCHAR(50) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "State",
          "Datatype": "VARCHAR(50) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "City",
          "Datatype": "VARCHAR(50) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "Email",
          "Datatype": "VARCHAR(100) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "Address",
          "Datatype": "VARCHAR(255) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        },
        {
          "ColumnName": "ZipCode",
          "Datatype": "VARCHAR(10) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Customers"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_columnSummary",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "rows": 7
      },
      "results": [
        {
          "ColumnName": "CustomerID",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "ServiceTickets"
        },
        {
          "ColumnName": "IssueDescription",
          "Datatype": "VARCHAR(1000) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "ServiceTickets"
        },
        {
          "ColumnName": "TicketID",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "ServiceTickets"
        },
        {
          "ColumnName": "ProductID",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "ServiceTickets"
        },
        {
          "ColumnName": "ResolutionDate",
          "Datatype": "DATE",
          "NonNullCount": "41",
          "NullCount": "59",
          "BlankCount": "None",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "59.0",
          "NonNullPercentage": "41.0",
          "TableName": "ServiceTickets"
        },
        {
          "ColumnName": "TicketDate",
          "Datatype": "DATE",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "ServiceTickets"
        },
        {
          "ColumnName": "Status",
          "Datatype": "VARCHAR(20) CHARACTER SET LATIN",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "0",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "ServiceTickets"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_columnSummary",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "rows": 5
      },
      "results": [
        {
          "ColumnName": "CustomerID",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Sales"
        },
        {
          "ColumnName": "SalesPersonID",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Sales"
        },
        {
          "ColumnName": "SaleID",
          "Datatype": "INTEGER",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Sales"
        },
        {
          "ColumnName": "SaleDate",
          "Datatype": "TIMESTAMP(6)",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "None",
          "PositiveCount": "None",
          "NegativeCount": "None",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Sales"
        },
        {
          "ColumnName": "TotalAmount",
          "Datatype": "DECIMAL(12,2)",
          "NonNullCount": "100",
          "NullCount": "0",
          "BlankCount": "None",
          "ZeroCount": "0",
          "PositiveCount": "100",
          "NegativeCount": "0",
          "NullPercentage": "0.0",
          "NonNullPercentage": "100.0",
          "TableName": "Sales"
        }
      ]
    }
  ],
  "result_of_phase_4": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "ProductID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "101.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "102.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "104.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "105.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.19115253773938612",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "84118.4077669903",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "147.4517299088383",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "144.6398614736261",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "48.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.1605186898125281",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MAXIMUM",
          "StatValue": "200.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MEAN",
          "StatValue": "150.23300970873785",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MEDIAN",
          "StatValue": "150.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MINIMUM",
          "StatValue": "101.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MODE",
          "StatValue": "107.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "102.02",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "110.4",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "126.5",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "106.1",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "150.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "174.5",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "189.8",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "194.89999999999998",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "198.98000000000002",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "SKEWNESS",
          "StatValue": "0.016878670555318467",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "28.717421058051073",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.8296115761869536",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "SUM",
          "StatValue": "15474.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(1)",
          "StatValue": "200.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(2)",
          "StatValue": "199.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(3)",
          "StatValue": "198.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(4)",
          "StatValue": "197.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(5)",
          "StatValue": "196.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "150.12698412698413",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "2408824.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "99.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "VARIANCE",
          "StatValue": "824.6902722253951",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "ProductID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "UnitPrice",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "BOTTOM5(1)",
          "StatValue": "10.99",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "BOTTOM5(2)",
          "StatValue": "14.99",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "BOTTOM5(3)",
          "StatValue": "19.99",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "BOTTOM5(4)",
          "StatValue": "21.95",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "BOTTOM5(5)",
          "StatValue": "24.99",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "1.4638173753383297",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "169531443.32416508",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "354.5317210125803",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "HARMONIC MEAN",
          "StatValue": "111.70062060591341",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "850.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "KURTOSIS",
          "StatValue": "9.671599116013837",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "MAXIMUM",
          "StatValue": "6999.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "MEAN",
          "StatValue": "880.7205825242719",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "MEDIAN",
          "StatValue": "399.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "MINIMUM",
          "StatValue": "10.99",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "MODE",
          "StatValue": "999.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(1)",
          "StatValue": "11.07",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(10)",
          "StatValue": "35.982000000000006",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(25)",
          "StatValue": "149.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(5)",
          "StatValue": "22.254",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(50)",
          "StatValue": "399.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(75)",
          "StatValue": "999.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(90)",
          "StatValue": "2178.2",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(95)",
          "StatValue": "2948.599999999996",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "PERCENTILES(99)",
          "StatValue": "6485.099800000002",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "RANGE",
          "StatValue": "6988.01",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "SKEWNESS",
          "StatValue": "2.9053409914875012",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "1289.2140915171244",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "STANDARD ERROR",
          "StatValue": "127.03003901938033",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "SUM",
          "StatValue": "90714.22",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "TOP5(1)",
          "StatValue": "6999.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "TOP5(2)",
          "StatValue": "6495.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "TOP5(3)",
          "StatValue": "5999.99",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "TOP5(4)",
          "StatValue": "4599.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "TOP5(5)",
          "StatValue": "3499.99",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "TRIMMED MEAN",
          "StatValue": "494.9150793650794",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "249425324.0058",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "77.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "VARIANCE",
          "StatValue": "1662072.9737663243",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        },
        {
          "ATTRIBUTE": "UnitPrice",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "UnitPrice"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "Quantity",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 38
      },
      "results": [
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "BOTTOM5(1)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "BOTTOM5(2)",
          "StatValue": "2.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.1642000513375526",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "2.9126213592233006",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "1.0203939240935582",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "HARMONIC MEAN",
          "StatValue": "1.0147783251231528",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "KURTOSIS",
          "StatValue": "30.900815841584166",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "MAXIMUM",
          "StatValue": "2.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "MEAN",
          "StatValue": "1.029126213592233",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "MEDIAN",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "MINIMUM",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "MODE",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(1)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(10)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(25)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(5)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(50)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(75)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(90)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(95)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "PERCENTILES(99)",
          "StatValue": "2.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "RANGE",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "SKEWNESS",
          "StatValue": "5.683402727424986",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "0.1689825771046658",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "STANDARD ERROR",
          "StatValue": "0.016650348072088237",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "SUM",
          "StatValue": "106.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "TOP5(1)",
          "StatValue": "2.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "TOP5(2)",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "TRIMMED MEAN",
          "StatValue": "1.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "112.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "2.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "VARIANCE",
          "StatValue": "0.02855511136493432",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        },
        {
          "ATTRIBUTE": "Quantity",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "Quantity"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "SaleID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "1001.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "1002.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "1003.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "1004.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "1005.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.02802273760929229",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "88192.05825242716",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "inf",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "1048.4951637518795",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "51.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2379360835637412",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MAXIMUM",
          "StatValue": "1100.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MEAN",
          "StatValue": "1049.3106796116506",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MEDIAN",
          "StatValue": "1049.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MINIMUM",
          "StatValue": "1001.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MODE",
          "StatValue": "1011.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "1002.02",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "1010.2",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "1023.5",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "1006.1",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "1049.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "1074.5",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "1089.8",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "1094.9",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "1098.98",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "SKEWNESS",
          "StatValue": "0.04296934205804725",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.40455784538545",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.897317175653385",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "SUM",
          "StatValue": "108079.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(1)",
          "StatValue": "1100.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(2)",
          "StatValue": "1099.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(3)",
          "StatValue": "1098.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(4)",
          "StatValue": "1097.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(5)",
          "StatValue": "1096.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "1049.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "113496641.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "100.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "VARIANCE",
          "StatValue": "864.6280220826192",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "SaleDetailID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "5001.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "5002.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "5003.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "5004.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "5005.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.005913999957850768",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "91052.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "inf",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "5051.825014946784",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "51.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "MAXIMUM",
          "StatValue": "5103.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "MEAN",
          "StatValue": "5052.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "MEDIAN",
          "StatValue": "5052.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "MINIMUM",
          "StatValue": "5001.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "MODE",
          "StatValue": "5001.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "5002.02",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "5011.2",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "5026.5",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "5006.1",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "5052.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "5077.5",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "5092.8",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "5097.9",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "5101.98",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "RANGE",
          "StatValue": "102.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "SKEWNESS",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.87752778706208",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.943920288775949",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "SUM",
          "StatValue": "520356.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "TOP5(1)",
          "StatValue": "5103.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "TOP5(2)",
          "StatValue": "5102.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "TOP5(3)",
          "StatValue": "5101.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "TOP5(4)",
          "StatValue": "5100.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "TOP5(5)",
          "StatValue": "5099.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "5052.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "2628929564.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "103.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "VARIANCE",
          "StatValue": "892.6666666666666",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        },
        {
          "ATTRIBUTE": "SaleDetailID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "SaleDetails",
          "ColumnName": "SaleDetailID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "Price",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "Price",
          "StatName": "BOTTOM5(1)",
          "StatValue": "10.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "BOTTOM5(2)",
          "StatValue": "14.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "BOTTOM5(3)",
          "StatValue": "19.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "BOTTOM5(4)",
          "StatValue": "21.95",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "BOTTOM5(5)",
          "StatValue": "24.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "1.4369493252515202",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "167468492.11521596",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "380.45298776794465",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "HARMONIC MEAN",
          "StatValue": "128.39179187587052",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "849.02",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "KURTOSIS",
          "StatValue": "9.391651780204356",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "MAXIMUM",
          "StatValue": "6999.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "MEAN",
          "StatValue": "905.1228",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "MEDIAN",
          "StatValue": "399.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "MINIMUM",
          "StatValue": "10.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "MODE",
          "StatValue": "999.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(1)",
          "StatValue": "14.95",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(10)",
          "StatValue": "39.986000000000004",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(25)",
          "StatValue": "149.98000000000002",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(5)",
          "StatValue": "27.84",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(50)",
          "StatValue": "399.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(75)",
          "StatValue": "999.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(90)",
          "StatValue": "2208.600000000001",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(95)",
          "StatValue": "3024.0494999999987",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "PERCENTILES(99)",
          "StatValue": "6500.040000000003",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "RANGE",
          "StatValue": "6988.01",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "SKEWNESS",
          "StatValue": "2.8674067833803587",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "1300.6155967297666",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "STANDARD ERROR",
          "StatValue": "130.06155967297667",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "SUM",
          "StatValue": "90512.28",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "TOP5(1)",
          "StatValue": "6999.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "TOP5(2)",
          "StatValue": "6495.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "TOP5(3)",
          "StatValue": "5999.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "TOP5(4)",
          "StatValue": "4599.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "TOP5(5)",
          "StatValue": "3499.99",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "TRIMMED MEAN",
          "StatValue": "512.595",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "249393220.4232",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "78.0",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "VARIANCE",
          "StatValue": "1691600.9304567268",
          "TableName": "Products",
          "ColumnName": "Price"
        },
        {
          "ATTRIBUTE": "Price",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "Price"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "StockQuantity",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "BOTTOM5(1)",
          "StatValue": "7.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "BOTTOM5(2)",
          "StatValue": "8.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "BOTTOM5(3)",
          "StatValue": "9.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "BOTTOM5(4)",
          "StatValue": "10.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "BOTTOM5(5)",
          "StatValue": "11.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "1.0931726699424213",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "2004323.44",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "74.09644779665638",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "HARMONIC MEAN",
          "StatValue": "42.040324122694265",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "145.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "KURTOSIS",
          "StatValue": "1.889626534338205",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "MAXIMUM",
          "StatValue": "600.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "MEAN",
          "StatValue": "130.16",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "MEDIAN",
          "StatValue": "70.5",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "MINIMUM",
          "StatValue": "7.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "MODE",
          "StatValue": "35.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(1)",
          "StatValue": "7.99",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(10)",
          "StatValue": "17.8",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(25)",
          "StatValue": "35.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(5)",
          "StatValue": "11.95",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(50)",
          "StatValue": "70.5",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(75)",
          "StatValue": "180.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(90)",
          "StatValue": "353.0000000000002",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(95)",
          "StatValue": "451.4999999999999",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "PERCENTILES(99)",
          "StatValue": "550.5000000000002",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "RANGE",
          "StatValue": "593.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "SKEWNESS",
          "StatValue": "1.6296619279942401",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "142.28735471970555",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "STANDARD ERROR",
          "StatValue": "14.228735471970555",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "SUM",
          "StatValue": "13016.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "TOP5(1)",
          "StatValue": "600.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "TOP5(2)",
          "StatValue": "550.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "TOP5(3)",
          "StatValue": "500.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "TOP5(4)",
          "StatValue": "480.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "TOP5(5)",
          "StatValue": "450.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "TRIMMED MEAN",
          "StatValue": "84.9",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "3698486.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "90.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "VARIANCE",
          "StatValue": "20245.691313131312",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        },
        {
          "ATTRIBUTE": "StockQuantity",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "StockQuantity"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "ProductID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "101.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "102.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "103.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "104.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "105.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.19276738854406655",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "83325.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "147.66203517302964",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "144.79041960341308",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "49.5",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MAXIMUM",
          "StatValue": "200.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MEAN",
          "StatValue": "150.5",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MEDIAN",
          "StatValue": "150.5",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MINIMUM",
          "StatValue": "101.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MODE",
          "StatValue": "101.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "101.99",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "110.9",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "125.75",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "105.95",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "150.5",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "175.25",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "190.10000000000002",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "195.05",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "199.01",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "SKEWNESS",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.011491975882016",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.9011491975882016",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "SUM",
          "StatValue": "15050.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(1)",
          "StatValue": "200.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(2)",
          "StatValue": "199.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(3)",
          "StatValue": "198.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(4)",
          "StatValue": "197.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(5)",
          "StatValue": "196.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "150.5",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "2348350.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "100.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "VARIANCE",
          "StatValue": "841.6666666666666",
          "TableName": "Products",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Products",
          "ColumnName": "ProductID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "CustomerID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "1.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "2.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "3.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "4.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "5.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.574484989621426",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "83325.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "37.9926893448343",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "19.277563597396004",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "49.5",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MAXIMUM",
          "StatValue": "100.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MEAN",
          "StatValue": "50.5",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MEDIAN",
          "StatValue": "50.5",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MINIMUM",
          "StatValue": "1.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MODE",
          "StatValue": "1.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "1.99",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "10.9",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "25.75",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "5.95",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "50.5",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "75.25",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "90.10000000000001",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "95.05",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "99.01",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "SKEWNESS",
          "StatValue": "0.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.011491975882016",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.9011491975882016",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "SUM",
          "StatValue": "5050.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(1)",
          "StatValue": "100.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(2)",
          "StatValue": "99.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(3)",
          "StatValue": "98.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(4)",
          "StatValue": "97.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(5)",
          "StatValue": "96.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "50.5",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "338350.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "100.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "VARIANCE",
          "StatValue": "841.6666666666666",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Customers",
          "ColumnName": "CustomerID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "ProductID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "101.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "102.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "103.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "104.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "105.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.19276738854406655",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "83325.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "147.66203517302964",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "144.79041960341308",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "49.5",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MAXIMUM",
          "StatValue": "200.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MEAN",
          "StatValue": "150.5",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MEDIAN",
          "StatValue": "150.5",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MINIMUM",
          "StatValue": "101.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "MODE",
          "StatValue": "101.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "101.99",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "110.9",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "125.75",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "105.95",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "150.5",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "175.25",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "190.10000000000002",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "195.05",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "199.01",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "SKEWNESS",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.011491975882016",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.9011491975882016",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "SUM",
          "StatValue": "15050.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(1)",
          "StatValue": "200.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(2)",
          "StatValue": "199.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(3)",
          "StatValue": "198.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(4)",
          "StatValue": "197.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TOP5(5)",
          "StatValue": "196.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "150.5",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "2348350.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "VARIANCE",
          "StatValue": "841.6666666666666",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        },
        {
          "ATTRIBUTE": "ProductID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "ProductID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "CustomerID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "1.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "2.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "3.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "4.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "5.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.574484989621426",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "83325.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "37.9926893448343",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "19.277563597396004",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "49.5",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MAXIMUM",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MEAN",
          "StatValue": "50.5",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MEDIAN",
          "StatValue": "50.5",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MINIMUM",
          "StatValue": "1.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MODE",
          "StatValue": "1.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "1.99",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "10.9",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "25.75",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "5.95",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "50.5",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "75.25",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "90.10000000000001",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "95.05",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "99.01",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "SKEWNESS",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.011491975882016",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.9011491975882016",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "SUM",
          "StatValue": "5050.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(1)",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(2)",
          "StatValue": "99.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(3)",
          "StatValue": "98.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(4)",
          "StatValue": "97.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(5)",
          "StatValue": "96.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "50.5",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "338350.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "VARIANCE",
          "StatValue": "841.6666666666666",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "CustomerID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "TicketID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "9001.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "9002.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "9003.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "9004.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "9005.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.003205512620947132",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "83325.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "inf",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "9050.407932514327",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "49.5",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "MAXIMUM",
          "StatValue": "9100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "MEAN",
          "StatValue": "9050.5",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "MEDIAN",
          "StatValue": "9050.5",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "MINIMUM",
          "StatValue": "9001.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "MODE",
          "StatValue": "9001.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "9001.99",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "9010.9",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "9025.75",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "9005.95",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "9050.5",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "9075.25",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "9090.1",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "9095.05",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "9099.01",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "SKEWNESS",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.011491975882016",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.9011491975882016",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "SUM",
          "StatValue": "905050.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "TOP5(1)",
          "StatValue": "9100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "TOP5(2)",
          "StatValue": "9099.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "TOP5(3)",
          "StatValue": "9098.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "TOP5(4)",
          "StatValue": "9097.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "TOP5(5)",
          "StatValue": "9096.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "9050.5",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "8191238350.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "100.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "VARIANCE",
          "StatValue": "841.6666666666666",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        },
        {
          "ATTRIBUTE": "TicketID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "ServiceTickets",
          "ColumnName": "TicketID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "SalesPersonID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 40
      },
      "results": [
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "10.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "11.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "12.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.07545825324943571",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "67.95999999999994",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "10.94902558107801",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "10.918114143920594",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "2.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.544350016404825",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "MAXIMUM",
          "StatValue": "12.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "MEAN",
          "StatValue": "10.98",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "MEDIAN",
          "StatValue": "11.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "MINIMUM",
          "StatValue": "10.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "MODE",
          "StatValue": "10.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "10.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "10.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "10.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "10.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "11.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "12.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "12.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "12.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "12.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "RANGE",
          "StatValue": "2.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "SKEWNESS",
          "StatValue": "0.037665227942409514",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "0.8285316206788041",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "STANDARD ERROR",
          "StatValue": "0.08285316206788042",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "SUM",
          "StatValue": "1098.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "TOP5(1)",
          "StatValue": "12.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "TOP5(2)",
          "StatValue": "11.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "TOP5(3)",
          "StatValue": "10.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "10.966666666666667",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "12124.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "3.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "VARIANCE",
          "StatValue": "0.6864646464646458",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        },
        {
          "ATTRIBUTE": "SalesPersonID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "SalesPersonID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "TotalAmount",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "BOTTOM5(1)",
          "StatValue": "10.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "BOTTOM5(2)",
          "StatValue": "14.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "BOTTOM5(3)",
          "StatValue": "19.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "BOTTOM5(4)",
          "StatValue": "21.95",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "BOTTOM5(5)",
          "StatValue": "24.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "1.4306165918632576",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "167056895.92067498",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "389.5932632366347",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "HARMONIC MEAN",
          "StatValue": "134.52441406134025",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "849.02",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "KURTOSIS",
          "StatValue": "9.424963916266076",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "MAXIMUM",
          "StatValue": "6999.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "MEAN",
          "StatValue": "908.0115000000001",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "MEDIAN",
          "StatValue": "399.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "MINIMUM",
          "StatValue": "10.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "MODE",
          "StatValue": "999.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(1)",
          "StatValue": "14.95",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(10)",
          "StatValue": "45.39",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(25)",
          "StatValue": "149.98000000000002",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(5)",
          "StatValue": "27.84",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(50)",
          "StatValue": "399.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(75)",
          "StatValue": "999.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(90)",
          "StatValue": "2208.600000000001",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(95)",
          "StatValue": "3024.0494999999987",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "PERCENTILES(99)",
          "StatValue": "6500.040000000003",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "RANGE",
          "StatValue": "6988.01",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "SKEWNESS",
          "StatValue": "2.873294957931939",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "1299.0163175026444",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "STANDARD ERROR",
          "StatValue": "129.90163175026444",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "SUM",
          "StatValue": "90801.15000000001",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "TOP5(1)",
          "StatValue": "6999.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "TOP5(2)",
          "StatValue": "6495.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "TOP5(3)",
          "StatValue": "5999.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "TOP5(4)",
          "StatValue": "4599.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "TOP5(5)",
          "StatValue": "3499.99",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "TRIMMED MEAN",
          "StatValue": "516.3265",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "249505384.3339",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "79.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "VARIANCE",
          "StatValue": "1687443.3931381311",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        },
        {
          "ATTRIBUTE": "TotalAmount",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "TotalAmount"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "CustomerID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "1.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "2.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "3.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "4.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "5.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.574484989621426",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "83325.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "37.9926893448343",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "19.277563597396004",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "49.5",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MAXIMUM",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MEAN",
          "StatValue": "50.5",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MEDIAN",
          "StatValue": "50.5",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MINIMUM",
          "StatValue": "1.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "MODE",
          "StatValue": "1.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "1.99",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "10.9",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "25.75",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "5.95",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "50.5",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "75.25",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "90.10000000000001",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "95.05",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "99.01",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "SKEWNESS",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.011491975882016",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.9011491975882016",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "SUM",
          "StatValue": "5050.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(1)",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(2)",
          "StatValue": "99.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(3)",
          "StatValue": "98.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(4)",
          "StatValue": "97.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TOP5(5)",
          "StatValue": "96.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "50.5",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "338350.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "VARIANCE",
          "StatValue": "841.6666666666666",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        },
        {
          "ATTRIBUTE": "CustomerID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "CustomerID"
        }
      ]
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_univariateStatistics",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "SaleID",
        "stats_calculated": [
          "ALL"
        ],
        "rows": 44
      },
      "results": [
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(1)",
          "StatValue": "1001.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(2)",
          "StatValue": "1002.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(3)",
          "StatValue": "1003.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(4)",
          "StatValue": "1004.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "BOTTOM5(5)",
          "StatValue": "1005.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "COEFFICIENT OF VARIATION",
          "StatValue": "0.027616841481087118",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "CORRECTED SUM OF SQUARES",
          "StatValue": "83325.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "GEOMETRIC MEAN",
          "StatValue": "1050.1032083326036",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "HARMONIC MEAN",
          "StatValue": "1049.7063267286171",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "INTERQUARTILE RANGE",
          "StatValue": "49.5",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "KURTOSIS",
          "StatValue": "-1.2",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MAXIMUM",
          "StatValue": "1100.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MEAN",
          "StatValue": "1050.5",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MEDIAN",
          "StatValue": "1050.5",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MINIMUM",
          "StatValue": "1001.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "MODE",
          "StatValue": "1001.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "NEGATIVE VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "NULL COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(1)",
          "StatValue": "1001.99",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(10)",
          "StatValue": "1010.9",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(25)",
          "StatValue": "1025.75",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(5)",
          "StatValue": "1005.95",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(50)",
          "StatValue": "1050.5",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(75)",
          "StatValue": "1075.25",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(90)",
          "StatValue": "1090.1",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(95)",
          "StatValue": "1095.05",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "PERCENTILES(99)",
          "StatValue": "1099.01",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "POSITIVE VALUES COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "RANGE",
          "StatValue": "99.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "SKEWNESS",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "STANDARD DEVIATION",
          "StatValue": "29.011491975882016",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "STANDARD ERROR",
          "StatValue": "2.9011491975882016",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "SUM",
          "StatValue": "105050.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(1)",
          "StatValue": "1100.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(2)",
          "StatValue": "1099.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(3)",
          "StatValue": "1098.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(4)",
          "StatValue": "1097.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TOP5(5)",
          "StatValue": "1096.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "TRIMMED MEAN",
          "StatValue": "1050.5",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "UNCORRECTED SUM OF SQUARES",
          "StatValue": "110438350.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "UNIQUE ENTITY COUNT",
          "StatValue": "100.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "VARIANCE",
          "StatValue": "841.6666666666666",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        },
        {
          "ATTRIBUTE": "SaleID",
          "StatName": "ZERO VALUES COUNT",
          "StatValue": "0.0",
          "TableName": "Sales",
          "ColumnName": "SaleID"
        }
      ]
    }
  ],
  "result_of_phase_5": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "ProductID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "UnitPrice",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "Quantity",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "SaleID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.SaleDetails",
        "column_name": "SaleDetailID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "ProductType",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "Price",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "StockQuantity",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "Brand",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "ProductName",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Products",
        "column_name": "ProductID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "LastName",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "Phone",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "Address",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "City",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "ZipCode",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "RegistrationDate",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "State",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "Email",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "FirstName",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Customers",
        "column_name": "CustomerID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "ProductID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "IssueDescription",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "Status",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "row_count": 59,
        "columns": [
          "TicketID",
          "CustomerID",
          "ProductID",
          "TicketDate",
          "IssueDescription",
          "Status",
          "ResolutionDate",
          "TableName",
          "ColumnName"
        ],
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "ResolutionDate",
        "rows_with_missing_values": 59
      },
      "comment": "Full data is too large for context. This is a summary."
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "TicketDate",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "CustomerID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.ServiceTickets",
        "column_name": "TicketID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "SaleDate",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "SalesPersonID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "TotalAmount",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "CustomerID",
        "rows_with_missing_values": 0
      },
      "results": []
    },
    {
      "status": "success",
      "metadata": {
        "tool_name": "qlty_rowsWithMissingValues",
        "database_name": "fitness_db",
        "table_name": "fitness_db.Sales",
        "column_name": "SaleID",
        "rows_with_missing_values": 0
      },
      "results": []
    }
  ]
}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
- database_name: fitness_db
- table_name: fitness_db.SaleDetails

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.
[model]: ```
[
  {
    "table_name": "fitness_db.SaleDetails",
    "summary": "The SaleDetails table provides information about the individual items included in each sale, including the product, quantity, and unit price. It has no missing values, with integer datatypes for SaleID, ProductID, Quantity, and SaleDetailID and a DECIMAL(10,2) for UnitPrice. The data types and statistics suggest this table is well-maintained and suitable for analysis."
  },
  {
    "table_name": "fitness_db.Products",
    "summary": "The Products table stores information about the products, including the product name, type, brand, price, and stock quantity. There are no missing values in any column. The numerical column 'Price' shows a wide range and skewness, indicating a diverse product portfolio. 'StockQuantity' also varies significantly, potentially affecting inventory management."
  },
  {
    "table_name": "fitness_db.Customers",
    "summary": "The Customers table contains customer-related information such as name, contact details, address, and registration date. There are no missing values, ensuring data integrity for customer relationship management and targeted marketing activities."
  },
  {
    "table_name": "fitness_db.ServiceTickets",
    "summary": "The ServiceTickets table records customer service tickets with details on the issue, status, and resolution. The 'ResolutionDate' column has 59% missing values, which can hinder analysis on resolution times. All other columns have complete data, providing accurate insights into service-related issues."
  },
  {
    "table_name": "fitness_db.Sales",
    "summary": "The Sales table captures sales transactions, including the customer, date, total amount, and sales person. There are no missing values, and the table contains an integer datatype for SalesPersonID and TotalAmount is of DECIMAL(12,2) datatype. The numerical columns, such as 'TotalAmount', display statistical characteristics necessary for sales performance analysis."
  }
]
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'what is the quality of database fitness_db?'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---
# Name:  Database data quality assessment

# Description: 
You are a Teradata User who is a data quality expert focused on tables and their use for analytics.

# Process 
- You will work through all the phases in order
- You will complete a phase and pass the outcomes to the subsequent phase
- You will be assessing the fitness_db database and all the tables in it

## Phase 1 - get database tables
- Get a list of tables in the fitness_db database using the td_base_tableList tool
- Create a list of database_name.table_name for the next phase

## Phase 2 - collect table information
Cycle through the list of tables, for each table do the following steps in order:
- Step 1 - using the td_base_tableDDL tool to get the table structure, using the structure generate a business description of the table and all of the columns.
- Step 2 - using the qlty_columnSummary tool, gather column statistics for the table
- Step 3 - using the qlty_univariateStatistics tool to get the univariate statistics for a table 
- Step 4 - using the qlty_rowsWithMissingValues tool to get rows with missing values in a table

## Phase 3 - Present results as a dashboard
- At the beginning of the dashboard identify the database
- For each table present the results from phase 2 together
- Ensure that each table is presented the same way
- Use color to highlight points of interest

# Communication guidelines
- Be concise but informative in your explanation
- Clearly indicate which phase you are currently in and only focus on the activities of the current phase
- Summarize the outcome of the phase before moving to the next phase

# Final output
A professional data quality dashboard that is easily navigable.


--- RELEVANT DATA (Selected from Previous Phases) ---
{
  "result_of_phase_6": [
    {
      "status": "success",
      "results": [
        {
          "response": "```\n[\n  {\n    \"table_name\": \"fitness_db.SaleDetails\",\n    \"summary\": \"The SaleDetails table provides information about the individual items included in each sale, including the product, quantity, and unit price. It has no missing values, with integer datatypes for SaleID, ProductID, Quantity, and SaleDetailID and a DECIMAL(10,2) for UnitPrice. The data types and statistics suggest this table is well-maintained and suitable for analysis.\"\n  },\n  {\n    \"table_name\": \"fitness_db.Products\",\n    \"summary\": \"The Products table stores information about the products, including the product name, type, brand, price, and stock quantity. There are no missing values in any column. The numerical column 'Price' shows a wide range and skewness, indicating a diverse product portfolio. 'StockQuantity' also varies significantly, potentially affecting inventory management.\"\n  },\n  {\n    \"table_name\": \"fitness_db.Customers\",\n    \"summary\": \"The Customers table contains customer-related information such as name, contact details, address, and registration date. There are no missing values, ensuring data integrity for customer relationship management and targeted marketing activities.\"\n  },\n  {\n    \"table_name\": \"fitness_db.ServiceTickets\",\n    \"summary\": \"The ServiceTickets table records customer service tickets with details on the issue, status, and resolution. The 'ResolutionDate' column has 59% missing values, which can hinder analysis on resolution times. All other columns have complete data, providing accurate insights into service-related issues.\"\n  },\n  {\n    \"table_name\": \"fitness_db.Sales\",\n    \"summary\": \"The Sales table captures sales transactions, including the customer, date, total amount, and sales person. There are no missing values, and the table contains an integer datatype for SalesPersonID and TotalAmount is of DECIMAL(12,2) datatype. The numerical columns, such as 'TotalAmount', display statistical characteristics necessary for sales performance analysis.\"\n  }\n]\n```"
        }
      ]
    }
  ]
}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
- database_name: fitness_db
- table_name: fitness_db.SaleDetails

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.

